
SDIO+FAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002ac80  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08035e90  08035e90  00045e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08035e98  08035e98  00045e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08035e9c  08035e9c  00045e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  08035ea0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00050098  2**0
                  CONTENTS
  8 .bss          0000471c  20000098  20000098  00050098  2**2
                  ALLOC
  9 ._user_heap_stack 00001200  200047b4  200047b4  00050098  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00050098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001cea0  00000000  00000000  000500c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000042dc  00000000  00000000  0006cf68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014c0  00000000  00000000  00071248  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012b8  00000000  00000000  00072708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a84f  00000000  00000000  000739c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005fb1  00000000  00000000  0007e20f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000841c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005460  00000000  00000000  0008423c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1f8 	.word	0x0800b1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800b1f8 	.word	0x0800b1f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f94b 	bl	80007a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	200f      	movs	r0, #15
 8000510:	f000 f808 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f00a fb6e 	bl	800abf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f963 	bl	800080e <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f92b 	bl	80007ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000030 	.word	0x20000030
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20004044 	.word	0x20004044

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20004044 	.word	0x20004044

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d005      	beq.n	80005ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_Delay+0x40>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffde 	bl	80005ac <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3f7      	bcc.n	80005ec <HAL_Delay+0x28>
  {
  }
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000004 	.word	0x20000004

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <__NVIC_EnableIRQ+0x38>)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	095b      	lsrs	r3, r3, #5
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	f002 021f 	and.w	r2, r2, #31
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	490d      	ldr	r1, [pc, #52]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	2201      	movs	r2, #1
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	1e5a      	subs	r2, r3, #1
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	401a      	ands	r2, r3
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000742:	2101      	movs	r1, #1
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	1e59      	subs	r1, r3, #1
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000770:	d301      	bcc.n	8000776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2301      	movs	r3, #1
 8000774:	e00f      	b.n	8000796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <SysTick_Config+0x40>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077e:	210f      	movs	r1, #15
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f7ff ff90 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <SysTick_Config+0x40>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SysTick_Config+0x40>)
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff2b 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007cc:	f7ff ff40 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80007d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	6978      	ldr	r0, [r7, #20]
 80007d8:	f7ff ff90 	bl	80006fc <NVIC_EncodePriority>
 80007dc:	4602      	mov	r2, r0
 80007de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff5f 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff33 	bl	800066c <__NVIC_EnableIRQ>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ffa2 	bl	8000760 <SysTick_Config>
 800081c:	4603      	mov	r3, r0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000834:	f7ff feba 	bl	80005ac <HAL_GetTick>
 8000838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d101      	bne.n	8000844 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	e099      	b.n	8000978 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2202      	movs	r2, #2
 8000850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	f022 0201 	bic.w	r2, r2, #1
 8000862:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000864:	e00f      	b.n	8000886 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000866:	f7ff fea1 	bl	80005ac <HAL_GetTick>
 800086a:	4602      	mov	r2, r0
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	2b05      	cmp	r3, #5
 8000872:	d908      	bls.n	8000886 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2220      	movs	r2, #32
 8000878:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2203      	movs	r2, #3
 800087e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000882:	2303      	movs	r3, #3
 8000884:	e078      	b.n	8000978 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1e8      	bne.n	8000866 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	4b38      	ldr	r3, [pc, #224]	; (8000980 <HAL_DMA_Init+0x158>)
 80008a0:	4013      	ands	r3, r2
 80008a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a1b      	ldr	r3, [r3, #32]
 80008d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d107      	bne.n	80008f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4313      	orrs	r3, r2
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	f023 0307 	bic.w	r3, r3, #7
 8000906:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4313      	orrs	r3, r2
 8000910:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	2b04      	cmp	r3, #4
 8000918:	d117      	bne.n	800094a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	4313      	orrs	r3, r2
 8000922:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	2b00      	cmp	r3, #0
 800092a:	d00e      	beq.n	800094a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 fa99 	bl	8000e64 <DMA_CheckFifoParam>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d008      	beq.n	800094a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2240      	movs	r2, #64	; 0x40
 800093c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000946:	2301      	movs	r3, #1
 8000948:	e016      	b.n	8000978 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 fa50 	bl	8000df8 <DMA_CalcBaseAndBitshift>
 8000958:	4603      	mov	r3, r0
 800095a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000960:	223f      	movs	r2, #63	; 0x3f
 8000962:	409a      	lsls	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	f010803f 	.word	0xf010803f

08000984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <HAL_DMA_Start_IT+0x26>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e048      	b.n	8000a3c <HAL_DMA_Start_IT+0xb8>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d137      	bne.n	8000a2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2202      	movs	r2, #2
 80009c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2200      	movs	r2, #0
 80009ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f000 f9e2 	bl	8000d9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009dc:	223f      	movs	r2, #63	; 0x3f
 80009de:	409a      	lsls	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	f042 0216 	orr.w	r2, r2, #22
 80009f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	6952      	ldr	r2, [r2, #20]
 80009fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a02:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d007      	beq.n	8000a1c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	6812      	ldr	r2, [r2, #0]
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	f042 0208 	orr.w	r2, r2, #8
 8000a1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	6812      	ldr	r2, [r2, #0]
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	f042 0201 	orr.w	r2, r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e005      	b.n	8000a3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a36:	2302      	movs	r3, #2
 8000a38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d004      	beq.n	8000a62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00c      	b.n	8000a7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2205      	movs	r2, #5
 8000a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	6812      	ldr	r2, [r2, #0]
 8000a74:	f022 0201 	bic.w	r2, r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a94:	4b92      	ldr	r3, [pc, #584]	; (8000ce0 <HAL_DMA_IRQHandler+0x258>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a92      	ldr	r2, [pc, #584]	; (8000ce4 <HAL_DMA_IRQHandler+0x25c>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0a9b      	lsrs	r3, r3, #10
 8000aa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d01a      	beq.n	8000af4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d013      	beq.n	8000af4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	f022 0204 	bic.w	r2, r2, #4
 8000ada:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aec:	f043 0201 	orr.w	r2, r3, #1
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af8:	2201      	movs	r2, #1
 8000afa:	409a      	lsls	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d012      	beq.n	8000b2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b16:	2201      	movs	r2, #1
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b22:	f043 0202 	orr.w	r2, r3, #2
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2e:	2204      	movs	r2, #4
 8000b30:	409a      	lsls	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d012      	beq.n	8000b60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00b      	beq.n	8000b60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b58:	f043 0204 	orr.w	r2, r3, #4
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b64:	2210      	movs	r2, #16
 8000b66:	409a      	lsls	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d043      	beq.n	8000bf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d03c      	beq.n	8000bf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b82:	2210      	movs	r2, #16
 8000b84:	409a      	lsls	r2, r3
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d018      	beq.n	8000bca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d108      	bne.n	8000bb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d024      	beq.n	8000bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	4798      	blx	r3
 8000bb6:	e01f      	b.n	8000bf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d01b      	beq.n	8000bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	4798      	blx	r3
 8000bc8:	e016      	b.n	8000bf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d107      	bne.n	8000be8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	f022 0208 	bic.w	r2, r2, #8
 8000be6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 808e 	beq.w	8000d26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 8086 	beq.w	8000d26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1e:	2220      	movs	r2, #32
 8000c20:	409a      	lsls	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	d136      	bne.n	8000ca0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	6812      	ldr	r2, [r2, #0]
 8000c3c:	f022 0216 	bic.w	r2, r2, #22
 8000c40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	6952      	ldr	r2, [r2, #20]
 8000c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <HAL_DMA_IRQHandler+0x1da>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d007      	beq.n	8000c72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	f022 0208 	bic.w	r2, r2, #8
 8000c70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c76:	223f      	movs	r2, #63	; 0x3f
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d07d      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	4798      	blx	r3
        }
        return;
 8000c9e:	e078      	b.n	8000d92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d01c      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d108      	bne.n	8000cce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d030      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	4798      	blx	r3
 8000ccc:	e02b      	b.n	8000d26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d027      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
 8000cde:	e022      	b.n	8000d26 <HAL_DMA_IRQHandler+0x29e>
 8000ce0:	20000030 	.word	0x20000030
 8000ce4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10f      	bne.n	8000d16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	f022 0210 	bic.w	r2, r2, #16
 8000d04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d032      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d022      	beq.n	8000d80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2205      	movs	r2, #5
 8000d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	f022 0201 	bic.w	r2, r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d807      	bhi.n	8000d6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f2      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x2ca>
 8000d6c:	e000      	b.n	8000d70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	4798      	blx	r3
 8000d90:	e000      	b.n	8000d94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d92:	bf00      	nop
    }
  }
}
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop

08000d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000db8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b40      	cmp	r3, #64	; 0x40
 8000dc8:	d108      	bne.n	8000ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000dda:	e007      	b.n	8000dec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3b10      	subs	r3, #16
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <DMA_CalcBaseAndBitshift+0x64>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e12:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <DMA_CalcBaseAndBitshift+0x68>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d909      	bls.n	8000e3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e2e:	f023 0303 	bic.w	r3, r3, #3
 8000e32:	1d1a      	adds	r2, r3, #4
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	659a      	str	r2, [r3, #88]	; 0x58
 8000e38:	e007      	b.n	8000e4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e42:	f023 0303 	bic.w	r3, r3, #3
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	aaaaaaab 	.word	0xaaaaaaab
 8000e60:	0800b294 	.word	0x0800b294

08000e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d11f      	bne.n	8000ebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d855      	bhi.n	8000f30 <DMA_CheckFifoParam+0xcc>
 8000e84:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <DMA_CheckFifoParam+0x28>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000eaf 	.word	0x08000eaf
 8000e94:	08000e9d 	.word	0x08000e9d
 8000e98:	08000f31 	.word	0x08000f31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d045      	beq.n	8000f34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eac:	e042      	b.n	8000f34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eb6:	d13f      	bne.n	8000f38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ebc:	e03c      	b.n	8000f38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec6:	d121      	bne.n	8000f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d836      	bhi.n	8000f3c <DMA_CheckFifoParam+0xd8>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <DMA_CheckFifoParam+0x70>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000eeb 	.word	0x08000eeb
 8000edc:	08000ee5 	.word	0x08000ee5
 8000ee0:	08000efd 	.word	0x08000efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8000ee8:	e02f      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d024      	beq.n	8000f40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000efa:	e021      	b.n	8000f40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f04:	d11e      	bne.n	8000f44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f0a:	e01b      	b.n	8000f44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d902      	bls.n	8000f18 <DMA_CheckFifoParam+0xb4>
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d003      	beq.n	8000f1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f16:	e018      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f1c:	e015      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00e      	beq.n	8000f48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8000f2e:	e00b      	b.n	8000f48 <DMA_CheckFifoParam+0xe4>
      break;
 8000f30:	bf00      	nop
 8000f32:	e00a      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      break;
 8000f34:	bf00      	nop
 8000f36:	e008      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      break;
 8000f38:	bf00      	nop
 8000f3a:	e006      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      break;
 8000f3c:	bf00      	nop
 8000f3e:	e004      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      break;
 8000f40:	bf00      	nop
 8000f42:	e002      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      break;   
 8000f44:	bf00      	nop
 8000f46:	e000      	b.n	8000f4a <DMA_CheckFifoParam+0xe6>
      break;
 8000f48:	bf00      	nop
    }
  } 
  
  return status; 
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e16b      	b.n	800124c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 815a 	bne.w	8001246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x4a>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d123      	bne.n	8000fea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	69b9      	ldr	r1, [r7, #24]
 8000fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0203 	and.w	r2, r3, #3
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d00b      	beq.n	800103e <HAL_GPIO_Init+0xe6>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001032:	2b11      	cmp	r3, #17
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b12      	cmp	r3, #18
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80b4 	beq.w	8001246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4a5f      	ldr	r2, [pc, #380]	; (8001260 <HAL_GPIO_Init+0x308>)
 80010e4:	4b5e      	ldr	r3, [pc, #376]	; (8001260 <HAL_GPIO_Init+0x308>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b5c      	ldr	r3, [pc, #368]	; (8001260 <HAL_GPIO_Init+0x308>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <HAL_GPIO_Init+0x30c>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_GPIO_Init+0x310>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x226>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a50      	ldr	r2, [pc, #320]	; (800126c <HAL_GPIO_Init+0x314>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x222>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x318>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x21e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x31c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x21a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x320>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x216>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_GPIO_Init+0x324>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x212>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <HAL_GPIO_Init+0x328>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x20e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_GPIO_Init+0x32c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x20a>
 800115e:	2307      	movs	r3, #7
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001162:	2308      	movs	r3, #8
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4934      	ldr	r1, [pc, #208]	; (8001264 <HAL_GPIO_Init+0x30c>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119e:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <HAL_GPIO_Init+0x330>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c2:	4a31      	ldr	r2, [pc, #196]	; (8001288 <HAL_GPIO_Init+0x330>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_GPIO_Init+0x330>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_GPIO_Init+0x330>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <HAL_GPIO_Init+0x330>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <HAL_GPIO_Init+0x330>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_GPIO_Init+0x330>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_GPIO_Init+0x330>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae90 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	3724      	adds	r7, #36	; 0x24
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40021c00 	.word	0x40021c00
 8001288:	40013c00 	.word	0x40013c00

0800128c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e22d      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d075      	beq.n	8001396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b9d      	ldr	r3, [pc, #628]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d05b      	beq.n	8001394 <HAL_RCC_OscConfig+0x108>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d157      	bne.n	8001394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e208      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x74>
 80012f2:	4a91      	ldr	r2, [pc, #580]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	4b90      	ldr	r3, [pc, #576]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4a8b      	ldr	r2, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	4b8a      	ldr	r3, [pc, #552]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4a88      	ldr	r2, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	4b87      	ldr	r3, [pc, #540]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001324:	4a84      	ldr	r2, [pc, #528]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	4b84      	ldr	r3, [pc, #528]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4a81      	ldr	r2, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff f932 	bl	80005ac <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff f92e 	bl	80005ac <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1cd      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xc0>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff f91e 	bl	80005ac <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff f91a 	bl	80005ac <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1b9      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b6c      	ldr	r3, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0xe8>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e18d      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4956      	ldr	r1, [pc, #344]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	4b55      	ldr	r3, [pc, #340]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b4f      	ldr	r3, [pc, #316]	; (800153c <HAL_RCC_OscConfig+0x2b0>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff f8d3 	bl	80005ac <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff f8cf 	bl	80005ac <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e16e      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4943      	ldr	r1, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_RCC_OscConfig+0x2b0>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff f8b2 	bl	80005ac <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff f8ae 	bl	80005ac <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e14d      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d030      	beq.n	80014d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_RCC_OscConfig+0x2b4>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff f892 	bl	80005ac <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff f88e 	bl	80005ac <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e12d      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x200>
 80014aa:	e015      	b.n	80014d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x2b4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f87b 	bl	80005ac <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff f877 	bl	80005ac <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e116      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a0 	beq.w	8001626 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001512:	2301      	movs	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d121      	bne.n	8001566 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152e:	f7ff f83d 	bl	80005ac <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	e011      	b.n	800155a <HAL_RCC_OscConfig+0x2ce>
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
 8001544:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff f830 	bl	80005ac <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e0cf      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x478>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x2f0>
 800156e:	4a66      	ldr	r2, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001570:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	e01c      	b.n	80015b6 <HAL_RCC_OscConfig+0x32a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d10c      	bne.n	800159e <HAL_RCC_OscConfig+0x312>
 8001584:	4a60      	ldr	r2, [pc, #384]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001586:	4b60      	ldr	r3, [pc, #384]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4a5d      	ldr	r2, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e00b      	b.n	80015b6 <HAL_RCC_OscConfig+0x32a>
 800159e:	4a5a      	ldr	r2, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 80015a0:	4b59      	ldr	r3, [pc, #356]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	4a57      	ldr	r2, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d015      	beq.n	80015ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7fe fff5 	bl	80005ac <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7fe fff1 	bl	80005ac <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e08e      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ee      	beq.n	80015c6 <HAL_RCC_OscConfig+0x33a>
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7fe ffdf 	bl	80005ac <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7fe ffdb 	bl	80005ac <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e078      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ee      	bne.n	80015f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161a:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d064      	beq.n	80016f8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d05c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d141      	bne.n	80016c6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_OscConfig+0x480>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7fe ffb0 	bl	80005ac <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7fe ffac 	bl	80005ac <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04b      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166e:	4926      	ldr	r1, [pc, #152]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	085b      	lsrs	r3, r3, #1
 8001688:	3b01      	subs	r3, #1
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_RCC_OscConfig+0x480>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7fe ff85 	bl	80005ac <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7fe ff81 	bl	80005ac <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e020      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x41a>
 80016c4:	e018      	b.n	80016f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_RCC_OscConfig+0x480>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7fe ff6e 	bl	80005ac <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7fe ff6a 	bl	80005ac <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e009      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_RCC_OscConfig+0x47c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x448>
 80016f2:	e001      	b.n	80016f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40007000 	.word	0x40007000
 8001708:	40023800 	.word	0x40023800
 800170c:	42470060 	.word	0x42470060

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0ca      	b.n	80018ba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 020f 	and.w	r2, r3, #15
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d20c      	bcs.n	800174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_RCC_ClockConfig+0x1b4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 020f 	and.w	r2, r3, #15
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b6      	b.n	80018ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	494f      	ldr	r1, [pc, #316]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07d      	b.n	80018ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06d      	b.n	80018ba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e065      	b.n	80018ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4936      	ldr	r1, [pc, #216]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 0203 	bic.w	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7fe fed4 	bl	80005ac <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7fe fed0 	bl	80005ac <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04d      	b.n	80018ba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d90c      	bls.n	8001858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 020f 	and.w	r2, r3, #15
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e030      	b.n	80018ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4918      	ldr	r1, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001882:	4911      	ldr	r1, [pc, #68]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f81d 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 800189a:	4601      	mov	r1, r0
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	5cd3      	ldrb	r3, [r2, r3]
 80018aa:	fa21 f303 	lsr.w	r3, r1, r3
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b2:	200f      	movs	r0, #15
 80018b4:	f7fe fe36 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08035e78 	.word	0x08035e78
 80018d0:	20000030 	.word	0x20000030

080018d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d8:	b08f      	sub	sp, #60	; 0x3c
 80018da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ec:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d007      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x34>
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d008      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0x3a>
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 80b2 	bne.w	8001a66 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001902:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001906:	e0b1      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001908:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800190c:	e0ae      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800190e:	4b5a      	ldr	r3, [pc, #360]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001918:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d04e      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001924:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	f04f 0400 	mov.w	r4, #0
 800192e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	ea01 0103 	and.w	r1, r1, r3
 800193a:	ea02 0204 	and.w	r2, r2, r4
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	0160      	lsls	r0, r4, #5
 8001944:	6278      	str	r0, [r7, #36]	; 0x24
 8001946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001948:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800194c:	6278      	str	r0, [r7, #36]	; 0x24
 800194e:	015b      	lsls	r3, r3, #5
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001956:	1a5b      	subs	r3, r3, r1
 8001958:	eb64 0402 	sbc.w	r4, r4, r2
 800195c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001960:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001964:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001968:	ebb8 0803 	subs.w	r8, r8, r3
 800196c:	eb69 0904 	sbc.w	r9, r9, r4
 8001970:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001988:	eb18 0801 	adds.w	r8, r8, r1
 800198c:	eb49 0902 	adc.w	r9, r9, r2
 8001990:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019a8:	4640      	mov	r0, r8
 80019aa:	4649      	mov	r1, r9
 80019ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ae:	f04f 0400 	mov.w	r4, #0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	f7fe fc0b 	bl	80001d0 <__aeabi_uldivmod>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
 80019c0:	e043      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	ea01 0103 	and.w	r1, r1, r3
 80019d8:	ea02 0204 	and.w	r2, r2, r4
 80019dc:	460b      	mov	r3, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	0160      	lsls	r0, r4, #5
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	015b      	lsls	r3, r3, #5
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019f4:	1a5b      	subs	r3, r3, r1
 80019f6:	eb64 0402 	sbc.w	r4, r4, r2
 80019fa:	01a6      	lsls	r6, r4, #6
 80019fc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001a00:	019d      	lsls	r5, r3, #6
 8001a02:	1aed      	subs	r5, r5, r3
 8001a04:	eb66 0604 	sbc.w	r6, r6, r4
 8001a08:	00f3      	lsls	r3, r6, #3
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	00eb      	lsls	r3, r5, #3
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001a1c:	186d      	adds	r5, r5, r1
 8001a1e:	eb46 0602 	adc.w	r6, r6, r2
 8001a22:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001a26:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001a2a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001a2e:	4655      	mov	r5, sl
 8001a30:	465e      	mov	r6, fp
 8001a32:	4628      	mov	r0, r5
 8001a34:	4631      	mov	r1, r6
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	f7fe fbc6 	bl	80001d0 <__aeabi_uldivmod>
 8001a44:	4603      	mov	r3, r0
 8001a46:	460c      	mov	r4, r1
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	3301      	adds	r3, #1
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a64:	e002      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	373c      	adds	r7, #60	; 0x3c
 8001a72:	46bd      	mov	sp, r7
 8001a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000030 	.word	0x20000030

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff0 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4601      	mov	r1, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	0a9b      	lsrs	r3, r3, #10
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	08035e88 	.word	0x08035e88

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac8:	f7ff ffdc 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001acc:	4601      	mov	r1, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0b5b      	lsrs	r3, r3, #13
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	08035e88 	.word	0x08035e88

08001aec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e01d      	b.n	8001b3a <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f008 ff7d 	bl	800aa10 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f810 	bl	8001b44 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001b64:	2376      	movs	r3, #118	; 0x76
 8001b66:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681d      	ldr	r5, [r3, #0]
 8001b6c:	466c      	mov	r4, sp
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b80:	4628      	mov	r0, r5
 8001b82:	f001 ff21 	bl	80039c8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_SD_InitCard+0xb4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 ff62 	bl	8003a5a <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_SD_InitCard+0xb4>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7fe fd11 	bl	80005c4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fffc 	bl	8002ba0 <SD_PowerON>
 8001ba8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e013      	b.n	8001bf0 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 ff20 	bl	8002a0e <SD_InitCard>
 8001bce:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf8:	422580a0 	.word	0x422580a0

08001bfc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0ab      	b.n	8001d7c <HAL_SD_ReadBlocks_DMA+0x180>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f040 80a4 	bne.w	8001d7a <HAL_SD_ReadBlocks_DMA+0x17e>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	441a      	add	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d907      	bls.n	8001c56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e092      	b.n	8001d7c <HAL_SD_ReadBlocks_DMA+0x180>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITER
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c70:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8001c74:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	4a42      	ldr	r2, [pc, #264]	; (8001d84 <HAL_SD_ReadBlocks_DMA+0x188>)
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8001c84:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3380      	adds	r3, #128	; 0x80
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	f7fe fe6f 	bl	8000984 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_SD_ReadBlocks_DMA+0x190>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d002      	beq.n	8001cba <HAL_SD_ReadBlocks_DMA+0xbe>
    {
      BlockAdd *= 512U;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	025b      	lsls	r3, r3, #9
 8001cb8:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	025b      	lsls	r3, r3, #9
 8001cc4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001cc6:	2390      	movs	r3, #144	; 0x90
 8001cc8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f107 0214 	add.w	r2, r7, #20
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 ff22 	bl	8003b2a <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 ff47 	bl	8003b82 <SDMMC_CmdBlockLength>
 8001cf4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_SD_ReadBlocks_DMA+0x122>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e02e      	b.n	8001d7c <HAL_SD_ReadBlocks_DMA+0x180>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d90a      	bls.n	8001d3a <HAL_SD_ReadBlocks_DMA+0x13e>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2282      	movs	r2, #130	; 0x82
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 ff6e 	bl	8003c12 <SDMMC_CmdReadMultiBlock>
 8001d36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d38:	e009      	b.n	8001d4e <HAL_SD_ReadBlocks_DMA+0x152>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2281      	movs	r2, #129	; 0x81
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 ff3f 	bl	8003bca <SDMMC_CmdReadSingleBlock>
 8001d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_SD_ReadBlocks_DMA+0x17a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	431a      	orrs	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e002      	b.n	8001d7c <HAL_SD_ReadBlocks_DMA+0x180>
    }

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_SD_ReadBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3730      	adds	r7, #48	; 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	0800281f 	.word	0x0800281f
 8001d88:	0800288d 	.word	0x0800288d
 8001d8c:	4225858c 	.word	0x4225858c

08001d90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0ab      	b.n	8001f10 <HAL_SD_WriteBlocks_DMA+0x180>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 80a4 	bne.w	8001f0e <HAL_SD_WriteBlocks_DMA+0x17e>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	441a      	add	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d907      	bls.n	8001dea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e092      	b.n	8001f10 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITER
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e04:	f042 021a 	orr.w	r2, r2, #26
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <HAL_SD_WriteBlocks_DMA+0x188>)
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8001e18:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2200      	movs	r2, #0
 8001e20:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d002      	beq.n	8001e30 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fea2 	bl	8003b82 <SDMMC_CmdBlockLength>
 8001e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	431a      	orrs	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e053      	b.n	8001f10 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d90a      	bls.n	8001e84 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	22a0      	movs	r2, #160	; 0xa0
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 ff11 	bl	8003ca2 <SDMMC_CmdWriteMultiBlock>
 8001e80:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e82:	e009      	b.n	8001e98 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2290      	movs	r2, #144	; 0x90
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fee2 	bl	8003c5a <SDMMC_CmdWriteSingleBlock>
 8001e96:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d010      	beq.n	8001ec0 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e027      	b.n	8001f10 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_SD_WriteBlocks_DMA+0x190>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3380      	adds	r3, #128	; 0x80
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	f7fe fd53 	bl	8000984 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	025b      	lsls	r3, r3, #9
 8001ee8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001eea:	2390      	movs	r3, #144	; 0x90
 8001eec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f107 0214 	add.w	r2, r7, #20
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 fe10 	bl	8003b2a <SDIO_ConfigData>
    
    return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <HAL_SD_WriteBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
  }
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	080027f5 	.word	0x080027f5
 8001f1c:	0800288d 	.word	0x0800288d
 8001f20:	4225858c 	.word	0x4225858c

08001f24 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 808d 	beq.w	800205a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8001f58:	f023 0302 	bic.w	r3, r3, #2
 8001f5c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d03a      	beq.n	8001fe0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_SD_IRQHandler+0x5e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d011      	beq.n	8001fa6 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 feb0 	bl	8003cec <SDMMC_CmdStopTransfer>
 8001f8c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f925 	bl	80021f0 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_SD_IRQHandler+0xac>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f008 f91f 	bl	800a214 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8001fd6:	e103      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f008 f911 	bl	800a200 <HAL_SD_TxCpltCallback>
}
 8001fde:	e0ff      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80f9 	beq.w	80021e0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d011      	beq.n	800201e <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fe74 	bl	8003cec <SDMMC_CmdStopTransfer>
 8002004:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8e9 	bl	80021f0 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 80da 	bne.w	80021e0 <HAL_SD_IRQHandler+0x2bc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	f040 80d3 	bne.w	80021e0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002044:	f022 0208 	bic.w	r2, r2, #8
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f008 f8d4 	bl	800a200 <HAL_SD_TxCpltCallback>
}
 8002058:	e0c2      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fff0 	bl	8003058 <SD_Write_IT>
}
 8002078:	e0b2      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ffb8 	bl	8003008 <SD_Read_IT>
}
 8002098:	e0a2      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a0:	f240 233a 	movw	r3, #570	; 0x23a
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 809a 	beq.w	80021e0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	f043 0208 	orr.w	r2, r3, #8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	f043 0210 	orr.w	r2, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	f043 0208 	orr.w	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002146:	f023 0302 	bic.w	r3, r3, #2
 800214a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	2b00      	cmp	r3, #0
 8002156:	d036      	beq.n	80021c6 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d011      	beq.n	8002184 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_SD_IRQHandler+0x2c4>)
 8002166:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fc69 	bl	8000a44 <HAL_DMA_Abort_IT>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d033      	beq.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fbca 	bl	8002916 <SD_DMATxAbort>
}
 8002182:	e02d      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d011      	beq.n	80021b0 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_SD_IRQHandler+0x2c8>)
 8002192:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fc53 	bl	8000a44 <HAL_DMA_Abort_IT>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01d      	beq.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fbf2 	bl	8002992 <SD_DMARxAbort>
}
 80021ae:	e017      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f008 f814 	bl	800a1ec <HAL_SD_AbortCallback>
}
 80021c4:	e00c      	b.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f808 	bl	80021f0 <HAL_SD_ErrorCallback>
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	08002917 	.word	0x08002917
 80021ec:	08002993 	.word	0x08002993

080021f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002204:	b490      	push	{r4, r7}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002216:	0e1b      	lsrs	r3, r3, #24
 8002218:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	b2da      	uxtb	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	b2da      	uxtb	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	b2da      	uxtb	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b2db      	uxtb	r3, r3
 8002262:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002270:	b2db      	uxtb	r3, r3
 8002272:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002280:	0e1b      	lsrs	r3, r3, #24
 8002282:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	b29b      	uxth	r3, r3
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	b29a      	uxth	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	b2db      	uxtb	r3, r3
 8002298:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	88db      	ldrh	r3, [r3, #6]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	09db      	lsrs	r3, r3, #7
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	b2da      	uxtb	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 8086 	bne.w	8002428 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	029b      	lsls	r3, r3, #10
 8002320:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800232c:	b2db      	uxtb	r3, r3
 800232e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	431a      	orrs	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002342:	0e1b      	lsrs	r3, r3, #24
 8002344:	b2db      	uxtb	r3, r3
 8002346:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	099b      	lsrs	r3, r3, #6
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	431a      	orrs	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	b2da      	uxtb	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	b2da      	uxtb	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	b2db      	uxtb	r3, r3
 8002380:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	b2da      	uxtb	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	b2da      	uxtb	r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f003 0306 	and.w	r3, r3, #6
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7e1b      	ldrb	r3, [r3, #24]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	09db      	lsrs	r3, r3, #7
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7e1b      	ldrb	r3, [r3, #24]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3302      	adds	r3, #2
 80023ea:	2201      	movs	r2, #1
 80023ec:	409a      	lsls	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	fb02 f203 	mul.w	r2, r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7a1b      	ldrb	r3, [r3, #8]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	fa03 f202 	lsl.w	r2, r3, r2
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002414:	0a52      	lsrs	r2, r2, #9
 8002416:	fb02 f203 	mul.w	r2, r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002424:	661a      	str	r2, [r3, #96]	; 0x60
 8002426:	e051      	b.n	80024cc <HAL_SD_GetCardCSD+0x2c8>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	2b01      	cmp	r3, #1
 800242e:	d13c      	bne.n	80024aa <HAL_SD_GetCardCSD+0x2a6>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002434:	b2db      	uxtb	r3, r3
 8002436:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002448:	0e1b      	lsrs	r3, r3, #24
 800244a:	b2db      	uxtb	r3, r3
 800244c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	431a      	orrs	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	b2db      	uxtb	r3, r3
 8002464:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	431a      	orrs	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	b2db      	uxtb	r3, r3
 800247a:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f04f 0400 	mov.w	r4, #0
 8002484:	3301      	adds	r3, #1
 8002486:	f144 0400 	adc.w	r4, r4, #0
 800248a:	029a      	lsls	r2, r3, #10
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249e:	659a      	str	r2, [r3, #88]	; 0x58
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	661a      	str	r2, [r3, #96]	; 0x60
 80024a8:	e010      	b.n	80024cc <HAL_SD_GetCardCSD+0x2c8>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0c1      	b.n	8002650 <HAL_SD_GetCardCSD+0x44c>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	7e9b      	ldrb	r3, [r3, #26]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	09db      	lsrs	r3, r3, #7
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b2da      	uxtb	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	b2da      	uxtb	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	b2db      	uxtb	r3, r3
 8002526:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	09db      	lsrs	r3, r3, #7
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	b2da      	uxtb	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	b2da      	uxtb	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	b2da      	uxtb	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	b2db      	uxtb	r3, r3
 8002572:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7fdb      	ldrb	r3, [r3, #31]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b2da      	uxtb	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	09db      	lsrs	r3, r3, #7
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	b2da      	uxtb	r2, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	b2da      	uxtb	r2, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	b2db      	uxtb	r3, r3
 8002632:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263e:	b2da      	uxtb	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bc90      	pop	{r4, r7}
 8002658:	4770      	bx	lr

0800265a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80026b2:	b5b0      	push	{r4, r5, r7, lr}
 80026b4:	b08e      	sub	sp, #56	; 0x38
 80026b6:	af04      	add	r7, sp, #16
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2203      	movs	r2, #3
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d02e      	beq.n	800272e <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d6:	d106      	bne.n	80026e6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
 80026e4:	e029      	b.n	800273a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ec:	d10a      	bne.n	8002704 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fb28 	bl	8002d44 <SD_WideBus_Enable>
 80026f4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
 8002702:	e01a      	b.n	800273a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fb67 	bl	8002dde <SD_WideBus_Disable>
 8002710:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
 800271e:	e00c      	b.n	800273a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
 800272c:	e005      	b.n	800273a <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e024      	b.n	80027a2 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681d      	ldr	r5, [r3, #0]
 800277e:	466c      	mov	r4, sp
 8002780:	f107 0318 	add.w	r3, r7, #24
 8002784:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002792:	4628      	mov	r0, r5
 8002794:	f001 f918 	bl	80039c8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bdb0      	pop	{r4, r5, r7, pc}

080027aa <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80027b2:	2304      	movs	r3, #4
 80027b4:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fa93 	bl	8002cf0 <SD_SendStatus>
 80027ca:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	0a5b      	lsrs	r3, r3, #9
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800280c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	2b82      	cmp	r3, #130	; 0x82
 8002836:	d111      	bne.n	800285c <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fa55 	bl	8003cec <SDMMC_CmdStopTransfer>
 8002842:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	431a      	orrs	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fcca 	bl	80021f0 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002866:	f022 0208 	bic.w	r2, r2, #8
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f007 fcc8 	bl	800a214 <HAL_SD_RxCpltCallback>
#endif
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d004      	beq.n	80028ae <SD_DMAError+0x22>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d12c      	bne.n	8002908 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028c2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80028c6:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff ff68 	bl	80027aa <HAL_SD_GetCardState>
 80028da:	4603      	mov	r3, r0
 80028dc:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	2b06      	cmp	r3, #6
 80028e2:	d002      	beq.n	80028ea <SD_DMAError+0x5e>
 80028e4:	7afb      	ldrb	r3, [r7, #11]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10a      	bne.n	8002900 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f9fc 	bl	8003cec <SDMMC_CmdStopTransfer>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fc71 	bl	80021f0 <HAL_SD_ErrorCallback>
#endif
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d127      	bne.n	800298a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff ff35 	bl	80027aa <HAL_SD_GetCardState>
 8002940:	4603      	mov	r3, r0
 8002942:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	2b06      	cmp	r3, #6
 8002956:	d002      	beq.n	800295e <SD_DMATxAbort+0x48>
 8002958:	7afb      	ldrb	r3, [r7, #11]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d115      	bne.n	800298a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f001 f9c2 	bl	8003cec <SDMMC_CmdStopTransfer>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f007 fc35 	bl	800a1ec <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8002982:	e002      	b.n	800298a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff fc33 	bl	80021f0 <HAL_SD_ErrorCallback>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d127      	bne.n	8002a06 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff fef7 	bl	80027aa <HAL_SD_GetCardState>
 80029bc:	4603      	mov	r3, r0
 80029be:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	2b06      	cmp	r3, #6
 80029d2:	d002      	beq.n	80029da <SD_DMARxAbort+0x48>
 80029d4:	7afb      	ldrb	r3, [r7, #11]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d115      	bne.n	8002a06 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 f984 	bl	8003cec <SDMMC_CmdStopTransfer>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f007 fbf7 	bl	800a1ec <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 80029fe:	e002      	b.n	8002a06 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff fbf5 	bl	80021f0 <HAL_SD_ErrorCallback>
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a0e:	b5b0      	push	{r4, r5, r7, lr}
 8002a10:	b094      	sub	sp, #80	; 0x50
 8002a12:	af04      	add	r7, sp, #16
 8002a14:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f827 	bl	8003a76 <SDIO_GetPowerState>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a32:	e0b1      	b.n	8002b98 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d02f      	beq.n	8002a9c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 fa6d 	bl	8003f20 <SDMMC_CmdSendCID>
 8002a46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <SD_InitCard+0x44>
    {
      return errorstate;
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a50:	e0a2      	b.n	8002b98 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f851 	bl	8003b00 <SDIO_GetResponse>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2104      	movs	r1, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 f848 	bl	8003b00 <SDIO_GetResponse>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 f83f 	bl	8003b00 <SDIO_GetResponse>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	210c      	movs	r1, #12
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f836 	bl	8003b00 <SDIO_GetResponse>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d00d      	beq.n	8002ac0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f107 020e 	add.w	r2, r7, #14
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fa77 	bl	8003fa2 <SDMMC_CmdSetRelAdd>
 8002ab4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SD_InitCard+0xb2>
    {
      return errorstate;
 8002abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002abe:	e06b      	b.n	8002b98 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d036      	beq.n	8002b36 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002ac8:	89fb      	ldrh	r3, [r7, #14]
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f001 fa3f 	bl	8003f60 <SDMMC_CmdSendCSD>
 8002ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <SD_InitCard+0xe0>
    {
      return errorstate;
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	e054      	b.n	8002b98 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 f803 	bl	8003b00 <SDIO_GetResponse>
 8002afa:	4602      	mov	r2, r0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2104      	movs	r1, #4
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fffa 	bl	8003b00 <SDIO_GetResponse>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2108      	movs	r1, #8
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fff1 	bl	8003b00 <SDIO_GetResponse>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	210c      	movs	r1, #12
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 ffe8 	bl	8003b00 <SDIO_GetResponse>
 8002b30:	4602      	mov	r2, r0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 ffdf 	bl	8003b00 <SDIO_GetResponse>
 8002b42:	4603      	mov	r3, r0
 8002b44:	0d1a      	lsrs	r2, r3, #20
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fb57 	bl	8002204 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	f04f 0400 	mov.w	r4, #0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	4608      	mov	r0, r1
 8002b6a:	f001 f8e3 	bl	8003d34 <SDMMC_CmdSelDesel>
 8002b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SD_InitCard+0x16c>
  {
    return errorstate;
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	e00e      	b.n	8002b98 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681d      	ldr	r5, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	466c      	mov	r4, sp
 8002b82:	f103 0210 	add.w	r2, r3, #16
 8002b86:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b90:	4628      	mov	r0, r5
 8002b92:	f000 ff19 	bl	80039c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3740      	adds	r7, #64	; 0x40
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bdb0      	pop	{r4, r5, r7, pc}

08002ba0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f8de 	bl	8003d7e <SDMMC_CmdGoIdleState>
 8002bc2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SD_PowerON+0x2e>
  {
    return errorstate;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	e08c      	b.n	8002ce8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 f8f3 	bl	8003dbe <SDMMC_CmdOperCond>
 8002bd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03d      	beq.n	8002c5c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002be6:	e032      	b.n	8002c4e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bfa:	e075      	b.n	8002ce8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 f8fc 	bl	8003e00 <SDMMC_CmdAppCommand>
 8002c08:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c14:	e068      	b.n	8002ce8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f913 	bl	8003e48 <SDMMC_CmdAppOperCommand>
 8002c22:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c2e:	e05b      	b.n	8002ce8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 ff62 	bl	8003b00 <SDIO_GetResponse>
 8002c3c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	0fdb      	lsrs	r3, r3, #31
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <SD_PowerON+0xaa>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <SD_PowerON+0xac>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0c9      	beq.n	8002be8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
 8002c5a:	e044      	b.n	8002ce6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002c62:	e031      	b.n	8002cc8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d102      	bne.n	8002c78 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c76:	e037      	b.n	8002ce8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 f8be 	bl	8003e00 <SDMMC_CmdAppCommand>
 8002c84:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <SD_PowerON+0xf0>
      {
        return errorstate;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	e02b      	b.n	8002ce8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f001 f8d5 	bl	8003e48 <SDMMC_CmdAppOperCommand>
 8002c9e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <SD_PowerON+0x10a>
      {
        return errorstate;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	e01e      	b.n	8002ce8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 ff25 	bl	8003b00 <SDIO_GetResponse>
 8002cb6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	0fdb      	lsrs	r3, r3, #31
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <SD_PowerON+0x124>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <SD_PowerON+0x126>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ca      	beq.n	8002c64 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
 8002cde:	e002      	b.n	8002ce6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8002d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d08:	e018      	b.n	8002d3c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f001 f966 	bl	8003fe8 <SDMMC_CmdSendStatus>
 8002d1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <SD_SendStatus+0x38>
  {
    return errorstate;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	e009      	b.n	8002d3c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fee6 	bl	8003b00 <SDIO_GetResponse>
 8002d34:	4602      	mov	r2, r0
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fece 	bl	8003b00 <SDIO_GetResponse>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d6e:	d102      	bne.n	8002d76 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d74:	e02f      	b.n	8002dd6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f87b 	bl	8002e78 <SD_FindSCR>
 8002d82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	e023      	b.n	8002dd6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f001 f82b 	bl	8003e00 <SDMMC_CmdAppCommand>
 8002daa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	e00f      	b.n	8002dd6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f868 	bl	8003e92 <SDMMC_CmdBusWidth>
 8002dc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	e003      	b.n	8002dd6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e001      	b.n	8002dd6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fe81 	bl	8003b00 <SDIO_GetResponse>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e08:	d102      	bne.n	8002e10 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e0e:	e02f      	b.n	8002e70 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f82e 	bl	8002e78 <SD_FindSCR>
 8002e1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	e023      	b.n	8002e70 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01c      	beq.n	8002e6c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f000 ffde 	bl	8003e00 <SDMMC_CmdAppCommand>
 8002e44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	e00f      	b.n	8002e70 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 f81b 	bl	8003e92 <SDMMC_CmdBusWidth>
 8002e5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	e003      	b.n	8002e70 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e001      	b.n	8002e70 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b08f      	sub	sp, #60	; 0x3c
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002e86:	f7fd fb91 	bl	80005ac <HAL_GetTick>
 8002e8a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fe6f 	bl	8003b82 <SDMMC_CmdBlockLength>
 8002ea4:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	e0a7      	b.n	8003000 <SD_FindSCR+0x188>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f000 ff9f 	bl	8003e00 <SDMMC_CmdAppCommand>
 8002ec2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <SD_FindSCR+0x56>
  {
    return errorstate;
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	e098      	b.n	8003000 <SD_FindSCR+0x188>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002ed8:	2330      	movs	r3, #48	; 0x30
 8002eda:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f107 0214 	add.w	r2, r7, #20
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fe19 	bl	8003b2a <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 ffec 	bl	8003eda <SDMMC_CmdSendSCR>
 8002f02:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d022      	beq.n	8002f50 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	e078      	b.n	8003000 <SD_FindSCR+0x188>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f107 020c 	add.w	r2, r7, #12
 8002f24:	18d4      	adds	r4, r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fd77 	bl	8003a1e <SDIO_ReadFIFO>
 8002f30:	4603      	mov	r3, r0
 8002f32:	6023      	str	r3, [r4, #0]
      index++;
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	3301      	adds	r3, #1
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002f3a:	f7fd fb37 	bl	80005ac <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d102      	bne.n	8002f50 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002f4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f4e:	e057      	b.n	8003000 <SD_FindSCR+0x188>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f56:	f240 432a 	movw	r3, #1066	; 0x42a
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0d6      	beq.n	8002f0e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2208      	movs	r2, #8
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002f76:	2308      	movs	r3, #8
 8002f78:	e042      	b.n	8003000 <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f90:	2302      	movs	r3, #2
 8002f92:	e035      	b.n	8003000 <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e028      	b.n	8003000 <SD_FindSCR+0x188>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	0611      	lsls	r1, r2, #24
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	0212      	lsls	r2, r2, #8
 8002fc4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8002fc8:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	0a12      	lsrs	r2, r2, #8
 8002fce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002fd2:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	0e12      	lsrs	r2, r2, #24
 8002fd8:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002fda:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	061a      	lsls	r2, r3, #24
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fe8:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002ff2:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	373c      	adds	r7, #60	; 0x3c
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}

08003008 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e00d      	b.n	800303c <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	18d4      	adds	r4, r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fcf6 	bl	8003a1e <SDIO_ReadFIFO>
 8003032:	4603      	mov	r3, r0
 8003034:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3301      	adds	r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b07      	cmp	r3, #7
 8003040:	d9ee      	bls.n	8003020 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	f103 0220 	add.w	r2, r3, #32
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e00b      	b.n	8003088 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	4413      	add	r3, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f000 fcdb 	bl	8003a38 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b07      	cmp	r3, #7
 800308c:	d9f0      	bls.n	8003070 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f103 0220 	add.w	r2, r3, #32
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e03f      	b.n	8003136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f007 fea8 	bl	800ae20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa63 	bl	80035b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	6912      	ldr	r2, [r2, #16]
 80030f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	6952      	ldr	r2, [r2, #20]
 8003108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800310c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	68d2      	ldr	r2, [r2, #12]
 8003118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800311c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_UART_IRQHandler+0x52>
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f991 	bl	80034b2 <UART_Receive_IT>
      return;
 8003190:	e0cc      	b.n	800332c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80ab 	beq.w	80032f0 <HAL_UART_IRQHandler+0x1b0>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_UART_IRQHandler+0x70>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80a0 	beq.w	80032f0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_UART_IRQHandler+0x90>
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_UART_IRQHandler+0xb0>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	f043 0202 	orr.w	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_UART_IRQHandler+0xd0>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	f043 0204 	orr.w	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_UART_IRQHandler+0xf0>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003228:	f043 0208 	orr.w	r2, r3, #8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d078      	beq.n	800332a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_UART_IRQHandler+0x112>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f930 	bl	80034b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <HAL_UART_IRQHandler+0x13a>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d031      	beq.n	80032de <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f87a 	bl	8003374 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d123      	bne.n	80032d6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	6952      	ldr	r2, [r2, #20]
 8003298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d013      	beq.n	80032ce <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	4a22      	ldr	r2, [pc, #136]	; (8003334 <HAL_UART_IRQHandler+0x1f4>)
 80032ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fbc6 	bl	8000a44 <HAL_DMA_Abort_IT>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032c8:	4610      	mov	r0, r2
 80032ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e00e      	b.n	80032ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f846 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	e00a      	b.n	80032ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f842 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	e006      	b.n	80032ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f83e 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032ea:	e01e      	b.n	800332a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	bf00      	nop
    return;
 80032ee:	e01c      	b.n	800332a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_UART_IRQHandler+0x1cc>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f867 	bl	80033d8 <UART_Transmit_IT>
    return;
 800330a:	e00f      	b.n	800332c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_UART_IRQHandler+0x1ec>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f8ae 	bl	8003482 <UART_EndTransmit_IT>
    return;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <HAL_UART_IRQHandler+0x1ec>
    return;
 800332a:	bf00      	nop
  }
}
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	080033b1 	.word	0x080033b1

08003338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800338a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	6952      	ldr	r2, [r2, #20]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff ffc8 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b21      	cmp	r3, #33	; 0x21
 80033ea:	d143      	bne.n	8003474 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d119      	bne.n	800342a <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	8812      	ldrh	r2, [r2, #0]
 8003404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003408:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]
 800341c:	e00e      	b.n	800343c <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	621a      	str	r2, [r3, #32]
 8003428:	e008      	b.n	800343c <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	1c58      	adds	r0, r3, #1
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	6208      	str	r0, [r1, #32]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4619      	mov	r1, r3
 800344a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	68d2      	ldr	r2, [r2, #12]
 8003494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff48 	bl	8003338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b22      	cmp	r3, #34	; 0x22
 80034c4:	d171      	bne.n	80035aa <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	d123      	bne.n	8003518 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10e      	bne.n	80034fc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
 80034fa:	e029      	b.n	8003550 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	b29b      	uxth	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
 8003516:	e01b      	b.n	8003550 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	1c59      	adds	r1, r3, #1
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6291      	str	r1, [r2, #40]	; 0x28
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	6852      	ldr	r2, [r2, #4]
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e00c      	b.n	8003550 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	1c59      	adds	r1, r3, #1
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6291      	str	r1, [r2, #40]	; 0x28
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	6852      	ldr	r2, [r2, #4]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4619      	mov	r1, r3
 800355e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003560:	2b00      	cmp	r3, #0
 8003562:	d120      	bne.n	80035a6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	f022 0220 	bic.w	r2, r2, #32
 8003572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	68d2      	ldr	r2, [r2, #12]
 800357e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	6952      	ldr	r2, [r2, #20]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fed5 	bl	800334c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e002      	b.n	80035ac <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	6912      	ldr	r2, [r2, #16]
 80035c6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035f8:	f023 030c 	bic.w	r3, r3, #12
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	430b      	orrs	r3, r1
 8003600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	6952      	ldr	r2, [r2, #20]
 800360c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6992      	ldr	r2, [r2, #24]
 8003614:	430a      	orrs	r2, r1
 8003616:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003620:	f040 80e4 	bne.w	80037ec <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4aab      	ldr	r2, [pc, #684]	; (80038d8 <UART_SetConfig+0x324>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <UART_SetConfig+0x84>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4aaa      	ldr	r2, [pc, #680]	; (80038dc <UART_SetConfig+0x328>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d16c      	bne.n	8003712 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681c      	ldr	r4, [r3, #0]
 800363c:	f7fe fa42 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8003640:	4602      	mov	r2, r0
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009a      	lsls	r2, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4aa2      	ldr	r2, [pc, #648]	; (80038e0 <UART_SetConfig+0x32c>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	011d      	lsls	r5, r3, #4
 8003660:	f7fe fa30 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8003664:	4602      	mov	r2, r0
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009a      	lsls	r2, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb2 f6f3 	udiv	r6, r2, r3
 800367a:	f7fe fa23 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 800367e:	4602      	mov	r2, r0
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009a      	lsls	r2, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	4a92      	ldr	r2, [pc, #584]	; (80038e0 <UART_SetConfig+0x32c>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2264      	movs	r2, #100	; 0x64
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	1af3      	subs	r3, r6, r3
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	3332      	adds	r3, #50	; 0x32
 80036a8:	4a8d      	ldr	r2, [pc, #564]	; (80038e0 <UART_SetConfig+0x32c>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036b6:	441d      	add	r5, r3
 80036b8:	f7fe fa04 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009a      	lsls	r2, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80036d2:	f7fe f9f7 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <UART_SetConfig+0x32c>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2264      	movs	r2, #100	; 0x64
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	1af3      	subs	r3, r6, r3
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	3332      	adds	r3, #50	; 0x32
 8003700:	4a77      	ldr	r2, [pc, #476]	; (80038e0 <UART_SetConfig+0x32c>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	442b      	add	r3, r5
 800370e:	60a3      	str	r3, [r4, #8]
 8003710:	e154      	b.n	80039bc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681c      	ldr	r4, [r3, #0]
 8003716:	f7fe f9c1 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 800371a:	4602      	mov	r2, r0
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	4a6b      	ldr	r2, [pc, #428]	; (80038e0 <UART_SetConfig+0x32c>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	011d      	lsls	r5, r3, #4
 800373a:	f7fe f9af 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 800373e:	4602      	mov	r2, r0
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009a      	lsls	r2, r3, #2
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fbb2 f6f3 	udiv	r6, r2, r3
 8003754:	f7fe f9a2 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8003758:	4602      	mov	r2, r0
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009a      	lsls	r2, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	4a5c      	ldr	r2, [pc, #368]	; (80038e0 <UART_SetConfig+0x32c>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2264      	movs	r2, #100	; 0x64
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	1af3      	subs	r3, r6, r3
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3332      	adds	r3, #50	; 0x32
 8003782:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <UART_SetConfig+0x32c>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003790:	441d      	add	r5, r3
 8003792:	f7fe f983 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8003796:	4602      	mov	r2, r0
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80037ac:	f7fe f976 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009a      	lsls	r2, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	4a46      	ldr	r2, [pc, #280]	; (80038e0 <UART_SetConfig+0x32c>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2264      	movs	r2, #100	; 0x64
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	1af3      	subs	r3, r6, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a41      	ldr	r2, [pc, #260]	; (80038e0 <UART_SetConfig+0x32c>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	442b      	add	r3, r5
 80037e8:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80037ea:	e0e7      	b.n	80039bc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a39      	ldr	r2, [pc, #228]	; (80038d8 <UART_SetConfig+0x324>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <UART_SetConfig+0x24c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a38      	ldr	r2, [pc, #224]	; (80038dc <UART_SetConfig+0x328>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d171      	bne.n	80038e4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681c      	ldr	r4, [r3, #0]
 8003804:	f7fe f95e 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8003808:	4602      	mov	r2, r0
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009a      	lsls	r2, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4a30      	ldr	r2, [pc, #192]	; (80038e0 <UART_SetConfig+0x32c>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	011d      	lsls	r5, r3, #4
 8003828:	f7fe f94c 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 800382c:	4602      	mov	r2, r0
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003842:	f7fe f93f 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8003846:	4602      	mov	r2, r0
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <UART_SetConfig+0x32c>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2264      	movs	r2, #100	; 0x64
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	1af3      	subs	r3, r6, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <UART_SetConfig+0x32c>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800387c:	441d      	add	r5, r3
 800387e:	f7fe f921 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8003882:	4602      	mov	r2, r0
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009a      	lsls	r2, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	fbb2 f6f3 	udiv	r6, r2, r3
 8003898:	f7fe f914 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 800389c:	4602      	mov	r2, r0
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <UART_SetConfig+0x32c>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2264      	movs	r2, #100	; 0x64
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	1af3      	subs	r3, r6, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <UART_SetConfig+0x32c>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	442b      	add	r3, r5
 80038d4:	60a3      	str	r3, [r4, #8]
 80038d6:	e071      	b.n	80039bc <UART_SetConfig+0x408>
 80038d8:	40011000 	.word	0x40011000
 80038dc:	40011400 	.word	0x40011400
 80038e0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681c      	ldr	r4, [r3, #0]
 80038e8:	f7fe f8d8 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009a      	lsls	r2, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	4a30      	ldr	r2, [pc, #192]	; (80039c4 <UART_SetConfig+0x410>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	011d      	lsls	r5, r3, #4
 800390c:	f7fe f8c6 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8003910:	4602      	mov	r2, r0
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009a      	lsls	r2, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	fbb2 f6f3 	udiv	r6, r2, r3
 8003926:	f7fe f8b9 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 800392a:	4602      	mov	r2, r0
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <UART_SetConfig+0x410>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2264      	movs	r2, #100	; 0x64
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	1af3      	subs	r3, r6, r3
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	3332      	adds	r3, #50	; 0x32
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <UART_SetConfig+0x410>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	441d      	add	r5, r3
 8003962:	f7fe f89b 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8003966:	4602      	mov	r2, r0
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f6f3 	udiv	r6, r2, r3
 800397c:	f7fe f88e 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8003980:	4602      	mov	r2, r0
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009a      	lsls	r2, r3, #2
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <UART_SetConfig+0x410>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2264      	movs	r2, #100	; 0x64
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	1af3      	subs	r3, r6, r3
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	3332      	adds	r3, #50	; 0x32
 80039aa:	4a06      	ldr	r2, [pc, #24]	; (80039c4 <UART_SetConfig+0x410>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	442b      	add	r3, r5
 80039b8:	60a3      	str	r3, [r4, #8]
}
 80039ba:	e7ff      	b.n	80039bc <UART_SetConfig+0x408>
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c4:	51eb851f 	.word	0x51eb851f

080039c8 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80039c8:	b084      	sub	sp, #16
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	f107 001c 	add.w	r0, r7, #28
 80039d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80039de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80039e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80039e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80039e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80039ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80039ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80039f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003a02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	b004      	add	sp, #16
 8003a1c:	4770      	bx	lr

08003a1e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0303 	and.w	r3, r3, #3
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ab0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003ab6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003abc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003acc:	f023 030f 	bic.w	r3, r3, #15
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	b2db      	uxtb	r3, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3314      	adds	r3, #20
 8003b12:	461a      	mov	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
}  
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003b50:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003b56:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003b5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0

}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b088      	sub	sp, #32
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003b94:	2310      	movs	r3, #16
 8003b96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b98:	2340      	movs	r3, #64	; 0x40
 8003b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ba6:	f107 0308 	add.w	r3, r7, #8
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff70 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fa63 	bl	8004084 <SDMMC_GetCmdResp1>
 8003bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b088      	sub	sp, #32
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003bdc:	2311      	movs	r3, #17
 8003bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003be0:	2340      	movs	r3, #64	; 0x40
 8003be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bec:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ff4c 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	2111      	movs	r1, #17
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fa3f 	bl	8004084 <SDMMC_GetCmdResp1>
 8003c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c08:	69fb      	ldr	r3, [r7, #28]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b088      	sub	sp, #32
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003c24:	2312      	movs	r3, #18
 8003c26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c28:	2340      	movs	r3, #64	; 0x40
 8003c2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c34:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c36:	f107 0308 	add.w	r3, r7, #8
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff28 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	2112      	movs	r1, #18
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa1b 	bl	8004084 <SDMMC_GetCmdResp1>
 8003c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c50:	69fb      	ldr	r3, [r7, #28]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b088      	sub	sp, #32
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003c6c:	2318      	movs	r3, #24
 8003c6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c70:	2340      	movs	r3, #64	; 0x40
 8003c72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c7c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff04 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	2118      	movs	r1, #24
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f9f7 	bl	8004084 <SDMMC_GetCmdResp1>
 8003c96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c98:	69fb      	ldr	r3, [r7, #28]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b088      	sub	sp, #32
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003cb4:	2319      	movs	r3, #25
 8003cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cb8:	2340      	movs	r3, #64	; 0x40
 8003cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fee0 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	2119      	movs	r1, #25
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f9d3 	bl	8004084 <SDMMC_GetCmdResp1>
 8003cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003cfc:	230c      	movs	r3, #12
 8003cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d00:	2340      	movs	r3, #64	; 0x40
 8003d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d0c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff febc 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003d1a:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <SDMMC_CmdStopTransfer+0x44>)
 8003d1c:	210c      	movs	r1, #12
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9b0 	bl	8004084 <SDMMC_GetCmdResp1>
 8003d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d26:	69fb      	ldr	r3, [r7, #28]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	05f5e100 	.word	0x05f5e100

08003d34 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003d48:	2307      	movs	r3, #7
 8003d4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d4c:	2340      	movs	r3, #64	; 0x40
 8003d4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d58:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4619      	mov	r1, r3
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fe96 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	2107      	movs	r1, #7
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f989 	bl	8004084 <SDMMC_GetCmdResp1>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3728      	adds	r7, #40	; 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b088      	sub	sp, #32
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d9e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe73 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f93f 	bl	8004030 <SDMMC_GetCmdError>
 8003db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003db4:	69fb      	ldr	r3, [r7, #28]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b088      	sub	sp, #32
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003dca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dd4:	2340      	movs	r3, #64	; 0x40
 8003dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff fe52 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fb10 	bl	8004414 <SDMMC_GetCmdResp7>
 8003df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003df6:	69fb      	ldr	r3, [r7, #28]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003e12:	2337      	movs	r3, #55	; 0x37
 8003e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e22:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e24:	f107 0308 	add.w	r3, r7, #8
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fe31 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	2137      	movs	r1, #55	; 0x37
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f924 	bl	8004084 <SDMMC_GetCmdResp1>
 8003e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003e62:	2329      	movs	r3, #41	; 0x29
 8003e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e66:	2340      	movs	r3, #64	; 0x40
 8003e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e72:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fe09 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa25 	bl	80042d0 <SDMMC_GetCmdResp3>
 8003e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e88:	69fb      	ldr	r3, [r7, #28]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b088      	sub	sp, #32
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003ea4:	2306      	movs	r3, #6
 8003ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ea8:	2340      	movs	r3, #64	; 0x40
 8003eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fde8 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	2106      	movs	r1, #6
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8db 	bl	8004084 <SDMMC_GetCmdResp1>
 8003ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b088      	sub	sp, #32
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003eea:	2333      	movs	r3, #51	; 0x33
 8003eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eee:	2340      	movs	r3, #64	; 0x40
 8003ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003efa:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fdc5 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	2133      	movs	r1, #51	; 0x33
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8b8 	bl	8004084 <SDMMC_GetCmdResp1>
 8003f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f16:	69fb      	ldr	r3, [r7, #28]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003f30:	2302      	movs	r3, #2
 8003f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f34:	23c0      	movs	r3, #192	; 0xc0
 8003f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f40:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f42:	f107 0308 	add.w	r3, r7, #8
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fda2 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f97e 	bl	8004250 <SDMMC_GetCmdResp2>
 8003f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f56:	69fb      	ldr	r3, [r7, #28]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003f72:	2309      	movs	r3, #9
 8003f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f76:	23c0      	movs	r3, #192	; 0xc0
 8003f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f82:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fd81 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f95d 	bl	8004250 <SDMMC_GetCmdResp2>
 8003f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f98:	69fb      	ldr	r3, [r7, #28]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b088      	sub	sp, #32
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fb8:	2340      	movs	r3, #64	; 0x40
 8003fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fd60 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	2103      	movs	r1, #3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f9ae 	bl	8004338 <SDMMC_GetCmdResp6>
 8003fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fde:	69fb      	ldr	r3, [r7, #28]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003ffa:	230d      	movs	r3, #13
 8003ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800400a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fd3d 	bl	8003a92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	210d      	movs	r1, #13
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f830 	bl	8004084 <SDMMC_GetCmdResp1>
 8004024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004026:	69fb      	ldr	r3, [r7, #28]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004030:	b490      	push	{r4, r7}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <SDMMC_GetCmdError+0x4c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a10      	ldr	r2, [pc, #64]	; (8004080 <SDMMC_GetCmdError+0x50>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	0a5b      	lsrs	r3, r3, #9
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800404c:	4623      	mov	r3, r4
 800404e:	1e5c      	subs	r4, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004054:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004058:	e00a      	b.n	8004070 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f2      	beq.n	800404c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bc90      	pop	{r4, r7}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000030 	.word	0x20000030
 8004080:	10624dd3 	.word	0x10624dd3

08004084 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	460b      	mov	r3, r1
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004092:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <SDMMC_GetCmdResp1+0x1c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6c      	ldr	r2, [pc, #432]	; (8004248 <SDMMC_GetCmdResp1+0x1c4>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80040a4:	4623      	mov	r3, r4
 80040a6:	1e5c      	subs	r4, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040b0:	e0c3      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f2      	beq.n	80040a4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2204      	movs	r2, #4
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040d0:	2304      	movs	r3, #4
 80040d2:	e0b2      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0a7      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fcfb 	bl	8003ae6 <SDIO_GetCommandResponse>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d001      	beq.n	80040fe <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e09d      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004106:	2100      	movs	r1, #0
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f7ff fcf9 	bl	8003b00 <SDIO_GetResponse>
 800410e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4b4e      	ldr	r3, [pc, #312]	; (800424c <SDMMC_GetCmdResp1+0x1c8>)
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800411a:	2300      	movs	r3, #0
 800411c:	e08d      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	da02      	bge.n	800412a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004128:	e087      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004134:	2340      	movs	r3, #64	; 0x40
 8004136:	e080      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	e079      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004154:	e071      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004164:	e069      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004174:	e061      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004184:	e059      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004194:	e051      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80041a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041a4:	e049      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80041b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041b4:	e041      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80041c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c4:	e039      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80041d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d4:	e031      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80041e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041e4:	e029      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80041f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80041f4:	e021      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004200:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004204:	e019      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004210:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004214:	e011      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004220:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004224:	e009      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004230:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004234:	e001      	b.n	800423a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd90      	pop	{r4, r7, pc}
 8004242:	bf00      	nop
 8004244:	20000030 	.word	0x20000030
 8004248:	10624dd3 	.word	0x10624dd3
 800424c:	fdffe008 	.word	0xfdffe008

08004250 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004250:	b490      	push	{r4, r7}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <SDMMC_GetCmdResp2+0x78>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <SDMMC_GetCmdResp2+0x7c>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800426c:	4623      	mov	r3, r4
 800426e:	1e5c      	subs	r4, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004274:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004278:	e020      	b.n	80042bc <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f2      	beq.n	800426c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2204      	movs	r2, #4
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004298:	2304      	movs	r3, #4
 800429a:	e00f      	b.n	80042bc <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e004      	b.n	80042bc <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc90      	pop	{r4, r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000030 	.word	0x20000030
 80042cc:	10624dd3 	.word	0x10624dd3

080042d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80042d0:	b490      	push	{r4, r7}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <SDMMC_GetCmdResp3+0x60>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <SDMMC_GetCmdResp3+0x64>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0a5b      	lsrs	r3, r3, #9
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80042ec:	4623      	mov	r3, r4
 80042ee:	1e5c      	subs	r4, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042f8:	e015      	b.n	8004326 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f2      	beq.n	80042ec <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004318:	2304      	movs	r3, #4
 800431a:	e004      	b.n	8004326 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bc90      	pop	{r4, r7}
 800432e:	4770      	bx	lr
 8004330:	20000030 	.word	0x20000030
 8004334:	10624dd3 	.word	0x10624dd3

08004338 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	460b      	mov	r3, r1
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004346:	4b31      	ldr	r3, [pc, #196]	; (800440c <SDMMC_GetCmdResp6+0xd4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a31      	ldr	r2, [pc, #196]	; (8004410 <SDMMC_GetCmdResp6+0xd8>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	0a5b      	lsrs	r3, r3, #9
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800435a:	4623      	mov	r3, r4
 800435c:	1e5c      	subs	r4, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004366:	e04c      	b.n	8004402 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f2      	beq.n	800435a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2204      	movs	r2, #4
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004386:	2304      	movs	r3, #4
 8004388:	e03b      	b.n	8004402 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800439c:	2301      	movs	r3, #1
 800439e:	e030      	b.n	8004402 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff fba0 	bl	8003ae6 <SDIO_GetCommandResponse>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461a      	mov	r2, r3
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d001      	beq.n	80043b4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e026      	b.n	8004402 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80043bc:	2100      	movs	r1, #0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff fb9e 	bl	8003b00 <SDIO_GetResponse>
 80043c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80043da:	2300      	movs	r3, #0
 80043dc:	e011      	b.n	8004402 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80043e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ec:	e009      	b.n	8004402 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80043f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fc:	e001      	b.n	8004402 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80043fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd90      	pop	{r4, r7, pc}
 800440a:	bf00      	nop
 800440c:	20000030 	.word	0x20000030
 8004410:	10624dd3 	.word	0x10624dd3

08004414 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004414:	b490      	push	{r4, r7}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <SDMMC_GetCmdResp7+0x6c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a18      	ldr	r2, [pc, #96]	; (8004484 <SDMMC_GetCmdResp7+0x70>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	0a5b      	lsrs	r3, r3, #9
 8004428:	f241 3288 	movw	r2, #5000	; 0x1388
 800442c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004430:	4623      	mov	r3, r4
 8004432:	1e5c      	subs	r4, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800443c:	e01a      	b.n	8004474 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f2      	beq.n	8004430 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800445c:	2304      	movs	r3, #4
 800445e:	e009      	b.n	8004474 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004472:	2300      	movs	r3, #0
  
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bc90      	pop	{r4, r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000030 	.word	0x20000030
 8004484:	10624dd3 	.word	0x10624dd3

08004488 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <disk_status+0x30>)
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	79fa      	ldrb	r2, [r7, #7]
 80044a0:	4905      	ldr	r1, [pc, #20]	; (80044b8 <disk_status+0x30>)
 80044a2:	440a      	add	r2, r1
 80044a4:	7a12      	ldrb	r2, [r2, #8]
 80044a6:	4610      	mov	r0, r2
 80044a8:	4798      	blx	r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200000dc 	.word	0x200000dc

080044bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <disk_read+0x3c>)
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	689c      	ldr	r4, [r3, #8]
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <disk_read+0x3c>)
 80044dc:	4413      	add	r3, r2
 80044de:	7a18      	ldrb	r0, [r3, #8]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	47a0      	blx	r4
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd90      	pop	{r4, r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200000dc 	.word	0x200000dc

080044fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80044fc:	b590      	push	{r4, r7, lr}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <disk_write+0x3c>)
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	68dc      	ldr	r4, [r3, #12]
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	4a07      	ldr	r2, [pc, #28]	; (8004538 <disk_write+0x3c>)
 800451c:	4413      	add	r3, r2
 800451e:	7a18      	ldrb	r0, [r3, #8]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	47a0      	blx	r4
 8004528:	4603      	mov	r3, r0
 800452a:	75fb      	strb	r3, [r7, #23]
  return res;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}
 8004536:	bf00      	nop
 8004538:	200000dc 	.word	0x200000dc

0800453c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	603a      	str	r2, [r7, #0]
 8004546:	71fb      	strb	r3, [r7, #7]
 8004548:	460b      	mov	r3, r1
 800454a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <disk_ioctl+0x38>)
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	79fa      	ldrb	r2, [r7, #7]
 800455a:	4906      	ldr	r1, [pc, #24]	; (8004574 <disk_ioctl+0x38>)
 800455c:	440a      	add	r2, r1
 800455e:	7a10      	ldrb	r0, [r2, #8]
 8004560:	79b9      	ldrb	r1, [r7, #6]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4798      	blx	r3
 8004566:	4603      	mov	r3, r0
 8004568:	73fb      	strb	r3, [r7, #15]
  return res;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200000dc 	.word	0x200000dc

08004578 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3301      	adds	r3, #1
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	b21a      	sxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b21b      	sxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b21b      	sxth	r3, r3
 8004598:	81fb      	strh	r3, [r7, #14]
	return rv;
 800459a:	89fb      	ldrh	r3, [r7, #14]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3303      	adds	r3, #3
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	3202      	adds	r2, #2
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	3201      	adds	r2, #1
 80045ce:	7812      	ldrb	r2, [r2, #0]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	7812      	ldrb	r2, [r2, #0]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
	return rv;
 80045e0:	68fb      	ldr	r3, [r7, #12]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	887a      	ldrh	r2, [r7, #2]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	0a1b      	lsrs	r3, r3, #8
 800463e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	617a      	str	r2, [r7, #20]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	1c51      	adds	r1, r2, #1
 80046a0:	6139      	str	r1, [r7, #16]
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f1      	bne.n	8004696 <mem_cpy+0x1a>
	}
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80046be:	b480      	push	{r7}
 80046c0:	b087      	sub	sp, #28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	617a      	str	r2, [r7, #20]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3b01      	subs	r3, #1
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f3      	bne.n	80046ce <mem_set+0x10>
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80046f2:	b480      	push	{r7}
 80046f4:	b089      	sub	sp, #36	; 0x24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	61fa      	str	r2, [r7, #28]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	61ba      	str	r2, [r7, #24]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	1acb      	subs	r3, r1, r3
 800471e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3b01      	subs	r3, #1
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <mem_cmp+0x40>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0eb      	beq.n	800470a <mem_cmp+0x18>

	return r;
 8004732:	697b      	ldr	r3, [r7, #20]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3724      	adds	r7, #36	; 0x24
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800474a:	e002      	b.n	8004752 <chk_chr+0x12>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3301      	adds	r3, #1
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <chk_chr+0x26>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d1f2      	bne.n	800474c <chk_chr+0xc>
	return *str;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	781b      	ldrb	r3, [r3, #0]
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <lock_fs+0x22>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	4618      	mov	r0, r3
 800478a:	f002 ff71 	bl	8007670 <ff_req_grant>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <lock_fs+0x22>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <lock_fs+0x24>
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <unlock_fs+0x2e>
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d00a      	beq.n	80047d0 <unlock_fs+0x2e>
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	2b0b      	cmp	r3, #11
 80047be:	d007      	beq.n	80047d0 <unlock_fs+0x2e>
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d004      	beq.n	80047d0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f002 ff65 	bl	800769a <ff_rel_grant>
	}
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e029      	b.n	8004840 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80047ec:	4a27      	ldr	r2, [pc, #156]	; (800488c <chk_lock+0xb4>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	4413      	add	r3, r2
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01d      	beq.n	8004836 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80047fa:	4a24      	ldr	r2, [pc, #144]	; (800488c <chk_lock+0xb4>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4413      	add	r3, r2
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d116      	bne.n	800483a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <chk_lock+0xb4>)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800481c:	429a      	cmp	r2, r3
 800481e:	d10c      	bne.n	800483a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004820:	4a1a      	ldr	r2, [pc, #104]	; (800488c <chk_lock+0xb4>)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	4413      	add	r3, r2
 8004828:	3308      	adds	r3, #8
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004830:	429a      	cmp	r2, r3
 8004832:	d102      	bne.n	800483a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004834:	e007      	b.n	8004846 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004836:	2301      	movs	r3, #1
 8004838:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d9d2      	bls.n	80047ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d109      	bne.n	8004860 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <chk_lock+0x80>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d101      	bne.n	800485c <chk_lock+0x84>
 8004858:	2300      	movs	r3, #0
 800485a:	e010      	b.n	800487e <chk_lock+0xa6>
 800485c:	2312      	movs	r3, #18
 800485e:	e00e      	b.n	800487e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <chk_lock+0xa0>
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <chk_lock+0xb4>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	4413      	add	r3, r2
 800486e:	330c      	adds	r3, #12
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d101      	bne.n	800487c <chk_lock+0xa4>
 8004878:	2310      	movs	r3, #16
 800487a:	e000      	b.n	800487e <chk_lock+0xa6>
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	200000bc 	.word	0x200000bc

08004890 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	e002      	b.n	80048a2 <enq_lock+0x12>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3301      	adds	r3, #1
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d806      	bhi.n	80048b6 <enq_lock+0x26>
 80048a8:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <enq_lock+0x40>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	4413      	add	r3, r2
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f2      	bne.n	800489c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	200000bc 	.word	0x200000bc

080048d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e01f      	b.n	8004924 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80048e4:	4a41      	ldr	r2, [pc, #260]	; (80049ec <inc_lock+0x118>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d113      	bne.n	800491e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <inc_lock+0x118>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	4413      	add	r3, r2
 80048fe:	3304      	adds	r3, #4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004906:	429a      	cmp	r2, r3
 8004908:	d109      	bne.n	800491e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800490a:	4a38      	ldr	r2, [pc, #224]	; (80049ec <inc_lock+0x118>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	4413      	add	r3, r2
 8004912:	3308      	adds	r3, #8
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800491a:	429a      	cmp	r2, r3
 800491c:	d006      	beq.n	800492c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d9dc      	bls.n	80048e4 <inc_lock+0x10>
 800492a:	e000      	b.n	800492e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800492c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d132      	bne.n	800499a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e002      	b.n	8004940 <inc_lock+0x6c>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d806      	bhi.n	8004954 <inc_lock+0x80>
 8004946:	4a29      	ldr	r2, [pc, #164]	; (80049ec <inc_lock+0x118>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	4413      	add	r3, r2
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f2      	bne.n	800493a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d101      	bne.n	800495e <inc_lock+0x8a>
 800495a:	2300      	movs	r3, #0
 800495c:	e040      	b.n	80049e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4922      	ldr	r1, [pc, #136]	; (80049ec <inc_lock+0x118>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	440b      	add	r3, r1
 800496a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	491e      	ldr	r1, [pc, #120]	; (80049ec <inc_lock+0x118>)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	440b      	add	r3, r1
 8004978:	3304      	adds	r3, #4
 800497a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	491a      	ldr	r1, [pc, #104]	; (80049ec <inc_lock+0x118>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	440b      	add	r3, r1
 8004988:	3308      	adds	r3, #8
 800498a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800498c:	4a17      	ldr	r2, [pc, #92]	; (80049ec <inc_lock+0x118>)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4413      	add	r3, r2
 8004994:	330c      	adds	r3, #12
 8004996:	2200      	movs	r2, #0
 8004998:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <inc_lock+0xe0>
 80049a0:	4a12      	ldr	r2, [pc, #72]	; (80049ec <inc_lock+0x118>)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	4413      	add	r3, r2
 80049a8:	330c      	adds	r3, #12
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <inc_lock+0xe0>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e015      	b.n	80049e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d108      	bne.n	80049cc <inc_lock+0xf8>
 80049ba:	4a0c      	ldr	r2, [pc, #48]	; (80049ec <inc_lock+0x118>)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	330c      	adds	r3, #12
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	e001      	b.n	80049d0 <inc_lock+0xfc>
 80049cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d0:	4906      	ldr	r1, [pc, #24]	; (80049ec <inc_lock+0x118>)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	440b      	add	r3, r1
 80049d8:	330c      	adds	r3, #12
 80049da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	200000bc 	.word	0x200000bc

080049f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d825      	bhi.n	8004a50 <dec_lock+0x60>
		n = Files[i].ctr;
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <dec_lock+0x74>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	4413      	add	r3, r2
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004a12:	89fb      	ldrh	r3, [r7, #14]
 8004a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a18:	d101      	bne.n	8004a1e <dec_lock+0x2e>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004a1e:	89fb      	ldrh	r3, [r7, #14]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <dec_lock+0x3a>
 8004a24:	89fb      	ldrh	r3, [r7, #14]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <dec_lock+0x74>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	4413      	add	r3, r2
 8004a32:	330c      	adds	r3, #12
 8004a34:	89fa      	ldrh	r2, [r7, #14]
 8004a36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004a38:	89fb      	ldrh	r3, [r7, #14]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <dec_lock+0x5a>
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <dec_lock+0x74>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	4413      	add	r3, r2
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	737b      	strb	r3, [r7, #13]
 8004a4e:	e001      	b.n	8004a54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004a50:	2302      	movs	r3, #2
 8004a52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004a54:	7b7b      	ldrb	r3, [r7, #13]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	200000bc 	.word	0x200000bc

08004a68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e010      	b.n	8004a98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <clear_lock+0x44>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	4413      	add	r3, r2
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d105      	bne.n	8004a92 <clear_lock+0x2a>
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <clear_lock+0x44>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	4413      	add	r3, r2
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d9eb      	bls.n	8004a76 <clear_lock+0xe>
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	200000bc 	.word	0x200000bc

08004ab0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	78db      	ldrb	r3, [r3, #3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d034      	beq.n	8004b2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	7858      	ldrb	r0, [r3, #1]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	f7ff fd10 	bl	80044fc <disk_write>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	e022      	b.n	8004b2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d217      	bcs.n	8004b2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	789b      	ldrb	r3, [r3, #2]
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e010      	b.n	8004b28 <sync_window+0x78>
					wsect += fs->fsize;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7858      	ldrb	r0, [r3, #1]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	f7ff fced 	bl	80044fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d8eb      	bhi.n	8004b06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d01b      	beq.n	8004b88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ffad 	bl	8004ab0 <sync_window>
 8004b56:	4603      	mov	r3, r0
 8004b58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d113      	bne.n	8004b88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	7858      	ldrb	r0, [r3, #1]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	f7ff fca5 	bl	80044bc <disk_read>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b78:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff87 	bl	8004ab0 <sync_window>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d158      	bne.n	8004c5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d148      	bne.n	8004c46 <sync_fs+0xb2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	791b      	ldrb	r3, [r3, #4]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d144      	bne.n	8004c46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3338      	adds	r3, #56	; 0x38
 8004bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fd79 	bl	80046be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3338      	adds	r3, #56	; 0x38
 8004bd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004bd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fd08 	bl	80045ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3338      	adds	r3, #56	; 0x38
 8004be2:	4921      	ldr	r1, [pc, #132]	; (8004c68 <sync_fs+0xd4>)
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fd1d 	bl	8004624 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3338      	adds	r3, #56	; 0x38
 8004bee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004bf2:	491e      	ldr	r1, [pc, #120]	; (8004c6c <sync_fs+0xd8>)
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fd15 	bl	8004624 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3338      	adds	r3, #56	; 0x38
 8004bfe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7ff fd0b 	bl	8004624 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3338      	adds	r3, #56	; 0x38
 8004c12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7ff fd01 	bl	8004624 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7858      	ldrb	r0, [r3, #1]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f7ff fc5e 	bl	80044fc <disk_write>
			fs->fsi_flag = 0;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fc74 	bl	800453c <disk_ioctl>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <sync_fs+0xca>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	41615252 	.word	0x41615252
 8004c6c:	61417272 	.word	0x61417272

08004c70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	3b02      	subs	r3, #2
 8004c7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	1e9a      	subs	r2, r3, #2
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d801      	bhi.n	8004c90 <clust2sect+0x20>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e008      	b.n	8004ca2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	895b      	ldrh	r3, [r3, #10]
 8004c94:	461a      	mov	r2, r3
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	fb03 f202 	mul.w	r2, r3, r2
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	4413      	add	r3, r2
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d904      	bls.n	8004cce <get_fat+0x20>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d802      	bhi.n	8004cd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004cce:	2301      	movs	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e08c      	b.n	8004dee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d045      	beq.n	8004d6e <get_fat+0xc0>
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d05d      	beq.n	8004da2 <get_fat+0xf4>
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d177      	bne.n	8004dda <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	0a5b      	lsrs	r3, r3, #9
 8004d00:	4413      	add	r3, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	6938      	ldr	r0, [r7, #16]
 8004d06:	f7ff ff17 	bl	8004b38 <move_window>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d167      	bne.n	8004de0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	60fa      	str	r2, [r7, #12]
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d22:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	0a5b      	lsrs	r3, r3, #9
 8004d2c:	4413      	add	r3, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6938      	ldr	r0, [r7, #16]
 8004d32:	f7ff ff01 	bl	8004b38 <move_window>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d153      	bne.n	8004de4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <get_fat+0xb6>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	e002      	b.n	8004d6a <get_fat+0xbc>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6a:	617b      	str	r3, [r7, #20]
			break;
 8004d6c:	e03f      	b.n	8004dee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	4413      	add	r3, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6938      	ldr	r0, [r7, #16]
 8004d7c:	f7ff fedc 	bl	8004b38 <move_window>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d130      	bne.n	8004de8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d94:	4413      	add	r3, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fbee 	bl	8004578 <ld_word>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	617b      	str	r3, [r7, #20]
			break;
 8004da0:	e025      	b.n	8004dee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	09db      	lsrs	r3, r3, #7
 8004daa:	4413      	add	r3, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f7ff fec2 	bl	8004b38 <move_window>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d118      	bne.n	8004dec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004dc8:	4413      	add	r3, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fbec 	bl	80045a8 <ld_dword>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dd6:	617b      	str	r3, [r7, #20]
			break;
 8004dd8:	e009      	b.n	8004dee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004dda:	2301      	movs	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e006      	b.n	8004dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004de0:	bf00      	nop
 8004de2:	e004      	b.n	8004dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004de4:	bf00      	nop
 8004de6:	e002      	b.n	8004dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dec:	bf00      	nop
		}
	}

	return val;
 8004dee:	697b      	ldr	r3, [r7, #20]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004e04:	2302      	movs	r3, #2
 8004e06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	f240 80d6 	bls.w	8004fbc <put_fat+0x1c4>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	f240 80d0 	bls.w	8004fbc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d073      	beq.n	8004f0c <put_fat+0x114>
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	f000 8091 	beq.w	8004f4c <put_fat+0x154>
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	f040 80c6 	bne.w	8004fbc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	0a5b      	lsrs	r3, r3, #9
 8004e46:	4413      	add	r3, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7ff fe74 	bl	8004b38 <move_window>
 8004e50:	4603      	mov	r3, r0
 8004e52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e54:	7ffb      	ldrb	r3, [r7, #31]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 80a9 	bne.w	8004fae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	61b9      	str	r1, [r7, #24]
 8004e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <put_fat+0x9e>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b25b      	sxtb	r3, r3
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	b25a      	sxtb	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b25b      	sxtb	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	e001      	b.n	8004e9a <put_fat+0xa2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	4413      	add	r3, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff fe41 	bl	8004b38 <move_window>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d178      	bne.n	8004fb2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ecc:	4413      	add	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <put_fat+0xea>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	e00e      	b.n	8004f00 <put_fat+0x108>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	b25b      	sxtb	r3, r3
 8004ee8:	f023 030f 	bic.w	r3, r3, #15
 8004eec:	b25a      	sxtb	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	0a1b      	lsrs	r3, r3, #8
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	b25b      	sxtb	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	70da      	strb	r2, [r3, #3]
			break;
 8004f0a:	e057      	b.n	8004fbc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	4413      	add	r3, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fe0d 	bl	8004b38 <move_window>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d146      	bne.n	8004fb6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004f36:	4413      	add	r3, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fb55 	bl	80045ee <st_word>
			fs->wflag = 1;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	70da      	strb	r2, [r3, #3]
			break;
 8004f4a:	e037      	b.n	8004fbc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	09db      	lsrs	r3, r3, #7
 8004f54:	4413      	add	r3, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fded 	bl	8004b38 <move_window>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d128      	bne.n	8004fba <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fb12 	bl	80045a8 <ld_dword>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f8a:	4323      	orrs	r3, r4
 8004f8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004f9c:	4413      	add	r3, r2
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fb3f 	bl	8004624 <st_dword>
			fs->wflag = 1;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	70da      	strb	r2, [r3, #3]
			break;
 8004fac:	e006      	b.n	8004fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004fae:	bf00      	nop
 8004fb0:	e004      	b.n	8004fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004fb2:	bf00      	nop
 8004fb4:	e002      	b.n	8004fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004fba:	bf00      	nop
		}
	}
	return res;
 8004fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd90      	pop	{r4, r7, pc}

08004fc6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b088      	sub	sp, #32
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d904      	bls.n	8004fec <remove_chain+0x26>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d801      	bhi.n	8004ff0 <remove_chain+0x2a>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e04b      	b.n	8005088 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	69b8      	ldr	r0, [r7, #24]
 8004ffe:	f7ff fefb 	bl	8004df8 <put_fat>
 8005002:	4603      	mov	r3, r0
 8005004:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005006:	7ffb      	ldrb	r3, [r7, #31]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <remove_chain+0x4a>
 800500c:	7ffb      	ldrb	r3, [r7, #31]
 800500e:	e03b      	b.n	8005088 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fe4b 	bl	8004cae <get_fat>
 8005018:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d031      	beq.n	8005084 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <remove_chain+0x64>
 8005026:	2302      	movs	r3, #2
 8005028:	e02e      	b.n	8005088 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d101      	bne.n	8005036 <remove_chain+0x70>
 8005032:	2301      	movs	r3, #1
 8005034:	e028      	b.n	8005088 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005036:	2200      	movs	r2, #0
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	69b8      	ldr	r0, [r7, #24]
 800503c:	f7ff fedc 	bl	8004df8 <put_fat>
 8005040:	4603      	mov	r3, r0
 8005042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005044:	7ffb      	ldrb	r3, [r7, #31]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <remove_chain+0x88>
 800504a:	7ffb      	ldrb	r3, [r7, #31]
 800504c:	e01c      	b.n	8005088 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	3b02      	subs	r3, #2
 8005058:	429a      	cmp	r2, r3
 800505a:	d20b      	bcs.n	8005074 <remove_chain+0xae>
			fs->free_clst++;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	429a      	cmp	r2, r3
 8005080:	d8c6      	bhi.n	8005010 <remove_chain+0x4a>
 8005082:	e000      	b.n	8005086 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005084:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <create_chain+0x2c>
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d81b      	bhi.n	80050f4 <create_chain+0x64>
 80050bc:	2301      	movs	r3, #1
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	e018      	b.n	80050f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff fdf2 	bl	8004cae <get_fat>
 80050ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d801      	bhi.n	80050d6 <create_chain+0x46>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e070      	b.n	80051b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d101      	bne.n	80050e2 <create_chain+0x52>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	e06a      	b.n	80051b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d901      	bls.n	80050f0 <create_chain+0x60>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	e063      	b.n	80051b8 <create_chain+0x128>
		scl = clst;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	3301      	adds	r3, #1
 80050fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	429a      	cmp	r2, r3
 8005106:	d807      	bhi.n	8005118 <create_chain+0x88>
				ncl = 2;
 8005108:	2302      	movs	r3, #2
 800510a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	429a      	cmp	r2, r3
 8005112:	d901      	bls.n	8005118 <create_chain+0x88>
 8005114:	2300      	movs	r3, #0
 8005116:	e04f      	b.n	80051b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fdc7 	bl	8004cae <get_fat>
 8005120:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d003      	beq.n	8005136 <create_chain+0xa6>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d101      	bne.n	800513a <create_chain+0xaa>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	e03e      	b.n	80051b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	429a      	cmp	r2, r3
 8005140:	d1da      	bne.n	80050f8 <create_chain+0x68>
 8005142:	2300      	movs	r3, #0
 8005144:	e038      	b.n	80051b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005146:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005148:	f04f 32ff 	mov.w	r2, #4294967295
 800514c:	69f9      	ldr	r1, [r7, #28]
 800514e:	6938      	ldr	r0, [r7, #16]
 8005150:	f7ff fe52 	bl	8004df8 <put_fat>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <create_chain+0xe2>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d006      	beq.n	8005172 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	6938      	ldr	r0, [r7, #16]
 800516a:	f7ff fe45 	bl	8004df8 <put_fat>
 800516e:	4603      	mov	r3, r0
 8005170:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d116      	bne.n	80051a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	3b02      	subs	r3, #2
 8005188:	429a      	cmp	r2, r3
 800518a:	d804      	bhi.n	8005196 <create_chain+0x106>
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	1e5a      	subs	r2, r3, #1
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	711a      	strb	r2, [r3, #4]
 80051a4:	e007      	b.n	80051b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d102      	bne.n	80051b2 <create_chain+0x122>
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	e000      	b.n	80051b4 <create_chain+0x124>
 80051b2:	2301      	movs	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80051b6:	69fb      	ldr	r3, [r7, #28]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	3304      	adds	r3, #4
 80051d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	0a5b      	lsrs	r3, r3, #9
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	8952      	ldrh	r2, [r2, #10]
 80051e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1d1a      	adds	r2, r3, #4
 80051ea:	613a      	str	r2, [r7, #16]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <clmt_clust+0x3a>
 80051f6:	2300      	movs	r3, #0
 80051f8:	e010      	b.n	800521c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d307      	bcc.n	8005212 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3304      	adds	r3, #4
 800520e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005210:	e7e9      	b.n	80051e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005212:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
}
 800521c:	4618      	mov	r0, r3
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800523e:	d204      	bcs.n	800524a <dir_sdi+0x22>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <dir_sdi+0x26>
		return FR_INT_ERR;
 800524a:	2302      	movs	r3, #2
 800524c:	e063      	b.n	8005316 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <dir_sdi+0x46>
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d902      	bls.n	800526e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10c      	bne.n	800528e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	8912      	ldrh	r2, [r2, #8]
 800527c:	4293      	cmp	r3, r2
 800527e:	d301      	bcc.n	8005284 <dir_sdi+0x5c>
 8005280:	2302      	movs	r3, #2
 8005282:	e048      	b.n	8005316 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	61da      	str	r2, [r3, #28]
 800528c:	e029      	b.n	80052e2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	895b      	ldrh	r3, [r3, #10]
 8005292:	025b      	lsls	r3, r3, #9
 8005294:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005296:	e019      	b.n	80052cc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6979      	ldr	r1, [r7, #20]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fd06 	bl	8004cae <get_fat>
 80052a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d101      	bne.n	80052b0 <dir_sdi+0x88>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e032      	b.n	8005316 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d904      	bls.n	80052c0 <dir_sdi+0x98>
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d801      	bhi.n	80052c4 <dir_sdi+0x9c>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e028      	b.n	8005316 <dir_sdi+0xee>
			ofs -= csz;
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d2e1      	bcs.n	8005298 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	6938      	ldr	r0, [r7, #16]
 80052d8:	f7ff fcca 	bl	8004c70 <clust2sect>
 80052dc:	4602      	mov	r2, r0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <dir_sdi+0xcc>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e010      	b.n	8005316 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	0a5b      	lsrs	r3, r3, #9
 80052fc:	441a      	add	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	441a      	add	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b086      	sub	sp, #24
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	3320      	adds	r3, #32
 8005334:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <dir_next+0x28>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005344:	d301      	bcc.n	800534a <dir_next+0x2c>
 8005346:	2304      	movs	r3, #4
 8005348:	e0aa      	b.n	80054a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 8098 	bne.w	8005486 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	8912      	ldrh	r2, [r2, #8]
 8005370:	4293      	cmp	r3, r2
 8005372:	f0c0 8088 	bcc.w	8005486 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	61da      	str	r2, [r3, #28]
 800537c:	2304      	movs	r3, #4
 800537e:	e08f      	b.n	80054a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	0a5b      	lsrs	r3, r3, #9
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	8952      	ldrh	r2, [r2, #10]
 8005388:	3a01      	subs	r2, #1
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d17a      	bne.n	8005486 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f7ff fc88 	bl	8004cae <get_fat>
 800539e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d801      	bhi.n	80053aa <dir_next+0x8c>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e07a      	b.n	80054a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d101      	bne.n	80053b6 <dir_next+0x98>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e074      	b.n	80054a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d858      	bhi.n	8005472 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	61da      	str	r2, [r3, #28]
 80053cc:	2304      	movs	r3, #4
 80053ce:	e067      	b.n	80054a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7ff fe59 	bl	8005090 <create_chain>
 80053de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <dir_next+0xcc>
 80053e6:	2307      	movs	r3, #7
 80053e8:	e05a      	b.n	80054a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <dir_next+0xd6>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e055      	b.n	80054a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d101      	bne.n	8005400 <dir_next+0xe2>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e04f      	b.n	80054a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff fb55 	bl	8004ab0 <sync_window>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <dir_next+0xf2>
 800540c:	2301      	movs	r3, #1
 800540e:	e047      	b.n	80054a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3338      	adds	r3, #56	; 0x38
 8005414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff f94f 	bl	80046be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	6979      	ldr	r1, [r7, #20]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fc22 	bl	8004c70 <clust2sect>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	635a      	str	r2, [r3, #52]	; 0x34
 8005432:	e012      	b.n	800545a <dir_next+0x13c>
						fs->wflag = 1;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fb38 	bl	8004ab0 <sync_window>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <dir_next+0x12c>
 8005446:	2301      	movs	r3, #1
 8005448:	e02a      	b.n	80054a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3301      	adds	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	635a      	str	r2, [r3, #52]	; 0x34
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	895b      	ldrh	r3, [r3, #10]
 800545e:	461a      	mov	r2, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	429a      	cmp	r2, r3
 8005464:	d8e6      	bhi.n	8005434 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad2      	subs	r2, r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff fbf8 	bl	8004c70 <clust2sect>
 8005480:	4602      	mov	r2, r0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005498:	441a      	add	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80054b8:	2100      	movs	r1, #0
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff feb4 	bl	8005228 <dir_sdi>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d12b      	bne.n	8005522 <dir_alloc+0x7a>
		n = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	4619      	mov	r1, r3
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff fb2f 	bl	8004b38 <move_window>
 80054da:	4603      	mov	r3, r0
 80054dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11d      	bne.n	8005520 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2be5      	cmp	r3, #229	; 0xe5
 80054ec:	d004      	beq.n	80054f8 <dir_alloc+0x50>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d107      	bne.n	8005508 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	3301      	adds	r3, #1
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d102      	bne.n	800550c <dir_alloc+0x64>
 8005506:	e00c      	b.n	8005522 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800550c:	2101      	movs	r1, #1
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff ff05 	bl	800531e <dir_next>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0d7      	beq.n	80054ce <dir_alloc+0x26>
 800551e:	e000      	b.n	8005522 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005520:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d101      	bne.n	800552c <dir_alloc+0x84>
 8005528:	2307      	movs	r3, #7
 800552a:	75fb      	strb	r3, [r7, #23]
	return res;
 800552c:	7dfb      	ldrb	r3, [r7, #23]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	331a      	adds	r3, #26
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff f817 	bl	8004578 <ld_word>
 800554a:	4603      	mov	r3, r0
 800554c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d109      	bne.n	800556a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff f80c 	bl	8004578 <ld_word>
 8005560:	4603      	mov	r3, r0
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800556a:	68fb      	ldr	r3, [r7, #12]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	331a      	adds	r3, #26
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	b292      	uxth	r2, r2
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff f82f 	bl	80045ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d109      	bne.n	80055ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f103 0214 	add.w	r2, r3, #20
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	0c1b      	lsrs	r3, r3, #16
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f7ff f821 	bl	80045ee <st_word>
	}
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	331a      	adds	r3, #26
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe ffd8 	bl	8004578 <ld_word>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <cmp_lfn+0x1e>
 80055ce:	2300      	movs	r3, #0
 80055d0:	e059      	b.n	8005686 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055da:	1e5a      	subs	r2, r3, #1
 80055dc:	4613      	mov	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80055e8:	2301      	movs	r3, #1
 80055ea:	81fb      	strh	r3, [r7, #14]
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	e033      	b.n	800565a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80055f2:	4a27      	ldr	r2, [pc, #156]	; (8005690 <cmp_lfn+0xdc>)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe ffb9 	bl	8004578 <ld_word>
 8005606:	4603      	mov	r3, r0
 8005608:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800560a:	89fb      	ldrh	r3, [r7, #14]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2bfe      	cmp	r3, #254	; 0xfe
 8005614:	d812      	bhi.n	800563c <cmp_lfn+0x88>
 8005616:	89bb      	ldrh	r3, [r7, #12]
 8005618:	4618      	mov	r0, r3
 800561a:	f001 ff75 	bl	8007508 <ff_wtoupper>
 800561e:	4603      	mov	r3, r0
 8005620:	461c      	mov	r4, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	617a      	str	r2, [r7, #20]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f001 ff69 	bl	8007508 <ff_wtoupper>
 8005636:	4603      	mov	r3, r0
 8005638:	429c      	cmp	r4, r3
 800563a:	d001      	beq.n	8005640 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800563c:	2300      	movs	r3, #0
 800563e:	e022      	b.n	8005686 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005640:	89bb      	ldrh	r3, [r7, #12]
 8005642:	81fb      	strh	r3, [r7, #14]
 8005644:	e006      	b.n	8005654 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005646:	89bb      	ldrh	r3, [r7, #12]
 8005648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800564c:	4293      	cmp	r3, r2
 800564e:	d001      	beq.n	8005654 <cmp_lfn+0xa0>
 8005650:	2300      	movs	r3, #0
 8005652:	e018      	b.n	8005686 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3301      	adds	r3, #1
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d9c8      	bls.n	80055f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <cmp_lfn+0xd0>
 800566c:	89fb      	ldrh	r3, [r7, #14]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <cmp_lfn+0xd0>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <cmp_lfn+0xd0>
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005684:	2301      	movs	r3, #1
}
 8005686:	4618      	mov	r0, r3
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	bd90      	pop	{r4, r7, pc}
 800568e:	bf00      	nop
 8005690:	0800b29c 	.word	0x0800b29c

08005694 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4611      	mov	r1, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	460b      	mov	r3, r1
 80056a4:	71fb      	strb	r3, [r7, #7]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	330d      	adds	r3, #13
 80056ae:	79ba      	ldrb	r2, [r7, #6]
 80056b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	330b      	adds	r3, #11
 80056b6:	220f      	movs	r2, #15
 80056b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	330c      	adds	r3, #12
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	331a      	adds	r3, #26
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe ff90 	bl	80045ee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	82fb      	strh	r3, [r7, #22]
 80056e2:	2300      	movs	r3, #0
 80056e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80056e6:	8afb      	ldrh	r3, [r7, #22]
 80056e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <put_lfn+0x6c>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	61fa      	str	r2, [r7, #28]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <put_lfn+0xcc>)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	4413      	add	r3, r2
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4413      	add	r3, r2
 800570e:	8afa      	ldrh	r2, [r7, #22]
 8005710:	4611      	mov	r1, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe ff6b 	bl	80045ee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005718:	8afb      	ldrh	r3, [r7, #22]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <put_lfn+0x90>
 800571e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005722:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	3301      	adds	r3, #1
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b0c      	cmp	r3, #12
 800572e:	d9da      	bls.n	80056e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005730:	8afb      	ldrh	r3, [r7, #22]
 8005732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005736:	4293      	cmp	r3, r2
 8005738:	d006      	beq.n	8005748 <put_lfn+0xb4>
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d103      	bne.n	8005750 <put_lfn+0xbc>
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800574e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	79fa      	ldrb	r2, [r7, #7]
 8005754:	701a      	strb	r2, [r3, #0]
}
 8005756:	bf00      	nop
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	0800b29c 	.word	0x0800b29c

08005764 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005772:	220b      	movs	r2, #11
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7fe ff80 	bl	800467c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b05      	cmp	r3, #5
 8005780:	d92b      	bls.n	80057da <gen_numname+0x76>
		sr = seq;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005786:	e022      	b.n	80057ce <gen_numname+0x6a>
			wc = *lfn++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	1c9a      	adds	r2, r3, #2
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005792:	2300      	movs	r3, #0
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 8005796:	e017      	b.n	80057c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005a      	lsls	r2, r3, #1
 800579c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80057a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <gen_numname+0x5e>
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80057bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80057c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	3301      	adds	r3, #1
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	d9e4      	bls.n	8005798 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1d8      	bne.n	8005788 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80057da:	2307      	movs	r3, #7
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	3330      	adds	r3, #48	; 0x30
 80057ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80057ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057f2:	2b39      	cmp	r3, #57	; 0x39
 80057f4:	d904      	bls.n	8005800 <gen_numname+0x9c>
 80057f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057fa:	3307      	adds	r3, #7
 80057fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	1e5a      	subs	r2, r3, #1
 8005804:	62ba      	str	r2, [r7, #40]	; 0x28
 8005806:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800580a:	4413      	add	r3, r2
 800580c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005810:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	603b      	str	r3, [r7, #0]
	} while (seq);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1de      	bne.n	80057de <gen_numname+0x7a>
	ns[i] = '~';
 8005820:	f107 0214 	add.w	r2, r7, #20
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	4413      	add	r3, r2
 8005828:	227e      	movs	r2, #126	; 0x7e
 800582a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800582c:	2300      	movs	r3, #0
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
 8005830:	e017      	b.n	8005862 <gen_numname+0xfe>
		if (IsDBCS1(dst[j])) {
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	4413      	add	r3, r2
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d90e      	bls.n	800585c <gen_numname+0xf8>
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	4413      	add	r3, r2
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2bff      	cmp	r3, #255	; 0xff
 8005848:	d008      	beq.n	800585c <gen_numname+0xf8>
			if (j == i - 1) break;
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	429a      	cmp	r2, r3
 8005852:	d100      	bne.n	8005856 <gen_numname+0xf2>
 8005854:	e00f      	b.n	8005876 <gen_numname+0x112>
			j++;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	3301      	adds	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	429a      	cmp	r2, r3
 8005868:	d205      	bcs.n	8005876 <gen_numname+0x112>
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	4413      	add	r3, r2
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b20      	cmp	r3, #32
 8005874:	d1dd      	bne.n	8005832 <gen_numname+0xce>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	627a      	str	r2, [r7, #36]	; 0x24
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	441a      	add	r2, r3
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	2b07      	cmp	r3, #7
 8005884:	d808      	bhi.n	8005898 <gen_numname+0x134>
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	62b9      	str	r1, [r7, #40]	; 0x28
 800588c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005890:	440b      	add	r3, r1
 8005892:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005896:	e000      	b.n	800589a <gen_numname+0x136>
 8005898:	2320      	movs	r3, #32
 800589a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	2b07      	cmp	r3, #7
 80058a0:	d9e9      	bls.n	8005876 <gen_numname+0x112>
}
 80058a2:	bf00      	nop
 80058a4:	3730      	adds	r7, #48	; 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80058b6:	230b      	movs	r3, #11
 80058b8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	0852      	lsrs	r2, r2, #1
 80058c0:	01db      	lsls	r3, r3, #7
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1c59      	adds	r1, r3, #1
 80058ca:	6079      	str	r1, [r7, #4]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	4413      	add	r3, r2
 80058d0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	60bb      	str	r3, [r7, #8]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1ed      	bne.n	80058ba <sum_sfn+0x10>
	return sum;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80058fa:	2100      	movs	r1, #0
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fc93 	bl	8005228 <dir_sdi>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <dir_find+0x24>
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	e0a9      	b.n	8005a64 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005910:	23ff      	movs	r3, #255	; 0xff
 8005912:	753b      	strb	r3, [r7, #20]
 8005914:	7d3b      	ldrb	r3, [r7, #20]
 8005916:	757b      	strb	r3, [r7, #21]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f04f 32ff 	mov.w	r2, #4294967295
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	4619      	mov	r1, r3
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f7ff f906 	bl	8004b38 <move_window>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 8090 	bne.w	8005a58 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005940:	7dbb      	ldrb	r3, [r7, #22]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <dir_find+0x60>
 8005946:	2304      	movs	r3, #4
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	e08a      	b.n	8005a62 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	330b      	adds	r3, #11
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7bfa      	ldrb	r2, [r7, #15]
 800595e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005960:	7dbb      	ldrb	r3, [r7, #22]
 8005962:	2be5      	cmp	r3, #229	; 0xe5
 8005964:	d007      	beq.n	8005976 <dir_find+0x8a>
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <dir_find+0x98>
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d006      	beq.n	8005984 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005976:	23ff      	movs	r3, #255	; 0xff
 8005978:	757b      	strb	r3, [r7, #21]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f04f 32ff 	mov.w	r2, #4294967295
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
 8005982:	e05e      	b.n	8005a42 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	d136      	bne.n	80059f8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d154      	bne.n	8005a42 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005998:	7dbb      	ldrb	r3, [r7, #22]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	7b5b      	ldrb	r3, [r3, #13]
 80059a8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80059aa:	7dbb      	ldrb	r3, [r7, #22]
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	75bb      	strb	r3, [r7, #22]
 80059b2:	7dbb      	ldrb	r3, [r7, #22]
 80059b4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80059be:	7dba      	ldrb	r2, [r7, #22]
 80059c0:	7d7b      	ldrb	r3, [r7, #21]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d115      	bne.n	80059f2 <dir_find+0x106>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	330d      	adds	r3, #13
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	7d3a      	ldrb	r2, [r7, #20]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d10e      	bne.n	80059f2 <dir_find+0x106>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f7ff fde8 	bl	80055b4 <cmp_lfn>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <dir_find+0x106>
 80059ea:	7d7b      	ldrb	r3, [r7, #21]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	e000      	b.n	80059f4 <dir_find+0x108>
 80059f2:	23ff      	movs	r3, #255	; 0xff
 80059f4:	757b      	strb	r3, [r7, #21]
 80059f6:	e024      	b.n	8005a42 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80059f8:	7d7b      	ldrb	r3, [r7, #21]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <dir_find+0x126>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ff51 	bl	80058aa <sum_sfn>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	7d3b      	ldrb	r3, [r7, #20]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d024      	beq.n	8005a5c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <dir_find+0x14a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a18      	ldr	r0, [r3, #32]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	220b      	movs	r2, #11
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f7fe fe61 	bl	80046f2 <mem_cmp>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d014      	beq.n	8005a60 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005a36:	23ff      	movs	r3, #255	; 0xff
 8005a38:	757b      	strb	r3, [r7, #21]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005a42:	2100      	movs	r1, #0
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fc6a 	bl	800531e <dir_next>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f43f af65 	beq.w	8005920 <dir_find+0x34>
 8005a56:	e004      	b.n	8005a62 <dir_find+0x176>
		if (res != FR_OK) break;
 8005a58:	bf00      	nop
 8005a5a:	e002      	b.n	8005a62 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005a5c:	bf00      	nop
 8005a5e:	e000      	b.n	8005a62 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a60:	bf00      	nop

	return res;
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08c      	sub	sp, #48	; 0x30
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005a80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <dir_register+0x20>
 8005a88:	2306      	movs	r3, #6
 8005a8a:	e0e0      	b.n	8005c4e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	e002      	b.n	8005a98 <dir_register+0x2c>
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	3301      	adds	r3, #1
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f4      	bne.n	8005a92 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005aae:	f107 030c 	add.w	r3, r7, #12
 8005ab2:	220c      	movs	r2, #12
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fde1 	bl	800467c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d032      	beq.n	8005b2a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005acc:	2301      	movs	r3, #1
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad0:	e016      	b.n	8005b00 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	f107 010c 	add.w	r1, r7, #12
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	f7ff fe3f 	bl	8005764 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff00 	bl	80058ec <dir_find>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	3301      	adds	r3, #1
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	2b63      	cmp	r3, #99	; 0x63
 8005b04:	d9e5      	bls.n	8005ad2 <dir_register+0x66>
 8005b06:	e000      	b.n	8005b0a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005b08:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b64      	cmp	r3, #100	; 0x64
 8005b0e:	d101      	bne.n	8005b14 <dir_register+0xa8>
 8005b10:	2307      	movs	r3, #7
 8005b12:	e09c      	b.n	8005c4e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d002      	beq.n	8005b22 <dir_register+0xb6>
 8005b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b20:	e095      	b.n	8005c4e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005b22:	7dfa      	ldrb	r2, [r7, #23]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <dir_register+0xd8>
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	330c      	adds	r3, #12
 8005b38:	4a47      	ldr	r2, [pc, #284]	; (8005c58 <dir_register+0x1ec>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	3301      	adds	r3, #1
 8005b42:	e000      	b.n	8005b46 <dir_register+0xda>
 8005b44:	2301      	movs	r3, #1
 8005b46:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005b48:	6a39      	ldr	r1, [r7, #32]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fcac 	bl	80054a8 <dir_alloc>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d148      	bne.n	8005bf0 <dir_register+0x184>
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	623b      	str	r3, [r7, #32]
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d042      	beq.n	8005bf0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	015b      	lsls	r3, r3, #5
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fb56 	bl	8005228 <dir_sdi>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d132      	bne.n	8005bf0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3324      	adds	r3, #36	; 0x24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fe8b 	bl	80058aa <sum_sfn>
 8005b94:	4603      	mov	r3, r0
 8005b96:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	69f8      	ldr	r0, [r7, #28]
 8005ba0:	f7fe ffca 	bl	8004b38 <move_window>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d11d      	bne.n	8005bee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	68d8      	ldr	r0, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a19      	ldr	r1, [r3, #32]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	7efb      	ldrb	r3, [r7, #27]
 8005bc0:	f7ff fd68 	bl	8005694 <put_lfn>
				fs->wflag = 1;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fba6 	bl	800531e <dir_next>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d107      	bne.n	8005bf0 <dir_register+0x184>
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1d5      	bne.n	8005b98 <dir_register+0x12c>
 8005bec:	e000      	b.n	8005bf0 <dir_register+0x184>
				if (res != FR_OK) break;
 8005bee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d128      	bne.n	8005c4a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	69f8      	ldr	r0, [r7, #28]
 8005c00:	f7fe ff9a 	bl	8004b38 <move_window>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d11b      	bne.n	8005c4a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	2220      	movs	r2, #32
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fd4f 	bl	80046be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a18      	ldr	r0, [r3, #32]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3324      	adds	r3, #36	; 0x24
 8005c28:	220b      	movs	r2, #11
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	f7fe fd26 	bl	800467c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	330c      	adds	r3, #12
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005c3c:	f002 0218 	and.w	r2, r2, #24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2201      	movs	r2, #1
 8005c48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3730      	adds	r7, #48	; 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	4ec4ec4f 	.word	0x4ec4ec4f

08005c5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	61ba      	str	r2, [r7, #24]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c8c:	2b1f      	cmp	r3, #31
 8005c8e:	d96a      	bls.n	8005d66 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c92:	2b2f      	cmp	r3, #47	; 0x2f
 8005c94:	d006      	beq.n	8005ca4 <create_name+0x48>
 8005c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c98:	2b5c      	cmp	r3, #92	; 0x5c
 8005c9a:	d110      	bne.n	8005cbe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005c9c:	e002      	b.n	8005ca4 <create_name+0x48>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	4413      	add	r3, r2
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b2f      	cmp	r3, #47	; 0x2f
 8005cae:	d0f6      	beq.n	8005c9e <create_name+0x42>
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b5c      	cmp	r3, #92	; 0x5c
 8005cba:	d0f0      	beq.n	8005c9e <create_name+0x42>
			break;
 8005cbc:	e054      	b.n	8005d68 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2bfe      	cmp	r3, #254	; 0xfe
 8005cc2:	d901      	bls.n	8005cc8 <create_name+0x6c>
 8005cc4:	2306      	movs	r3, #6
 8005cc6:	e1bf      	b.n	8006048 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8005cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d925      	bls.n	8005d22 <create_name+0xc6>
 8005cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2bff      	cmp	r3, #255	; 0xff
 8005cdc:	d021      	beq.n	8005d22 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	61ba      	str	r2, [r7, #24]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8005cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 8005cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d02:	2b3f      	cmp	r3, #63	; 0x3f
 8005d04:	d903      	bls.n	8005d0e <create_name+0xb2>
 8005d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d0a:	2b7e      	cmp	r3, #126	; 0x7e
 8005d0c:	d909      	bls.n	8005d22 <create_name+0xc6>
 8005d0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da03      	bge.n	8005d1e <create_name+0xc2>
 8005d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d1a:	2bff      	cmp	r3, #255	; 0xff
 8005d1c:	d101      	bne.n	8005d22 <create_name+0xc6>
 8005d1e:	2306      	movs	r3, #6
 8005d20:	e192      	b.n	8006048 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 fb8e 	bl	8007448 <ff_convert>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <create_name+0xde>
 8005d36:	2306      	movs	r3, #6
 8005d38:	e186      	b.n	8006048 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d3e:	d809      	bhi.n	8005d54 <create_name+0xf8>
 8005d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d42:	4619      	mov	r1, r3
 8005d44:	489a      	ldr	r0, [pc, #616]	; (8005fb0 <create_name+0x354>)
 8005d46:	f7fe fcfb 	bl	8004740 <chk_chr>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <create_name+0xf8>
 8005d50:	2306      	movs	r3, #6
 8005d52:	e179      	b.n	8006048 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	617a      	str	r2, [r7, #20]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005d64:	e78a      	b.n	8005c7c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005d66:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	441a      	add	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d74:	2b1f      	cmp	r3, #31
 8005d76:	d801      	bhi.n	8005d7c <create_name+0x120>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	e000      	b.n	8005d7e <create_name+0x122>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005d82:	e011      	b.n	8005da8 <create_name+0x14c>
		w = lfn[di - 1];
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d002      	beq.n	8005da2 <create_name+0x146>
 8005d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005da0:	d106      	bne.n	8005db0 <create_name+0x154>
		di--;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1ea      	bne.n	8005d84 <create_name+0x128>
 8005dae:	e000      	b.n	8005db2 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 8005db0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <create_name+0x16c>
 8005dc4:	2306      	movs	r3, #6
 8005dc6:	e13f      	b.n	8006048 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3324      	adds	r3, #36	; 0x24
 8005dcc:	220b      	movs	r2, #11
 8005dce:	2120      	movs	r1, #32
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe fc74 	bl	80046be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	e002      	b.n	8005de2 <create_name+0x186>
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d0f5      	beq.n	8005ddc <create_name+0x180>
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8005dfc:	d0ee      	beq.n	8005ddc <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <create_name+0x1bc>
 8005e04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e08:	f043 0303 	orr.w	r3, r3, #3
 8005e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005e10:	e002      	b.n	8005e18 <create_name+0x1bc>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <create_name+0x1d6>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e24:	3b01      	subs	r3, #1
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e30:	d1ef      	bne.n	8005e12 <create_name+0x1b6>

	i = b = 0; ni = 8;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e38:	2300      	movs	r3, #0
 8005e3a:	623b      	str	r3, [r7, #32]
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	61ba      	str	r2, [r7, #24]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80aa 	beq.w	8005fac <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d006      	beq.n	8005e6c <create_name+0x210>
 8005e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e60:	2b2e      	cmp	r3, #46	; 0x2e
 8005e62:	d10a      	bne.n	8005e7a <create_name+0x21e>
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d006      	beq.n	8005e7a <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 8005e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e70:	f043 0303 	orr.w	r3, r3, #3
 8005e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e78:	e097      	b.n	8005faa <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005e7a:	6a3a      	ldr	r2, [r7, #32]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d203      	bcs.n	8005e8a <create_name+0x22e>
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d123      	bne.n	8005ed2 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b0b      	cmp	r3, #11
 8005e8e:	d106      	bne.n	8005e9e <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8005e90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e94:	f043 0303 	orr.w	r3, r3, #3
 8005e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e9c:	e08d      	b.n	8005fba <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d005      	beq.n	8005eb2 <create_name+0x256>
 8005ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eaa:	f043 0303 	orr.w	r3, r3, #3
 8005eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d87e      	bhi.n	8005fb8 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	230b      	movs	r3, #11
 8005ec4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ed0:	e06b      	b.n	8005faa <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed6:	d910      	bls.n	8005efa <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8005ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fb14 	bl	8007508 <ff_wtoupper>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 faaf 	bl	8007448 <ff_convert>
 8005eea:	4603      	mov	r3, r0
 8005eec:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005eee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ef2:	f043 0302 	orr.w	r3, r3, #2
 8005ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 8005efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005efc:	2bff      	cmp	r3, #255	; 0xff
 8005efe:	d91a      	bls.n	8005f36 <create_name+0x2da>
			if (i >= ni - 1) {
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1e5a      	subs	r2, r3, #1
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d808      	bhi.n	8005f1c <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8005f0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f0e:	f043 0303 	orr.w	r3, r3, #3
 8005f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	623b      	str	r3, [r7, #32]
 8005f1a:	e046      	b.n	8005faa <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	623a      	str	r2, [r7, #32]
 8005f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f24:	0a12      	lsrs	r2, r2, #8
 8005f26:	b292      	uxth	r2, r2
 8005f28:	b2d1      	uxtb	r1, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	460a      	mov	r2, r1
 8005f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f34:	e02f      	b.n	8005f96 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <create_name+0x2f0>
 8005f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f3e:	4619      	mov	r1, r3
 8005f40:	481c      	ldr	r0, [pc, #112]	; (8005fb4 <create_name+0x358>)
 8005f42:	f7fe fbfd 	bl	8004740 <chk_chr>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005f4c:	235f      	movs	r3, #95	; 0x5f
 8005f4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f54:	f043 0303 	orr.w	r3, r3, #3
 8005f58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f5c:	e01b      	b.n	8005f96 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d909      	bls.n	8005f78 <create_name+0x31c>
 8005f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f66:	2b5a      	cmp	r3, #90	; 0x5a
 8005f68:	d806      	bhi.n	8005f78 <create_name+0x31c>
					b |= 2;
 8005f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f6e:	f043 0302 	orr.w	r3, r3, #2
 8005f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f76:	e00e      	b.n	8005f96 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f7a:	2b60      	cmp	r3, #96	; 0x60
 8005f7c:	d90b      	bls.n	8005f96 <create_name+0x33a>
 8005f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f80:	2b7a      	cmp	r3, #122	; 0x7a
 8005f82:	d808      	bhi.n	8005f96 <create_name+0x33a>
						b |= 1; w -= 0x20;
 8005f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f92:	3b20      	subs	r3, #32
 8005f94:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	623a      	str	r2, [r7, #32]
 8005f9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f9e:	b2d1      	uxtb	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	460a      	mov	r2, r1
 8005fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005faa:	e749      	b.n	8005e40 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 8005fac:	bf00      	nop
 8005fae:	e004      	b.n	8005fba <create_name+0x35e>
 8005fb0:	0800b210 	.word	0x0800b210
 8005fb4:	0800b21c 	.word	0x0800b21c
			if (si > di) break;			/* No extension */
 8005fb8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fc0:	2be5      	cmp	r3, #229	; 0xe5
 8005fc2:	d103      	bne.n	8005fcc <create_name+0x370>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d104      	bne.n	8005fdc <create_name+0x380>
 8005fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe0:	f003 030c 	and.w	r3, r3, #12
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d005      	beq.n	8005ff4 <create_name+0x398>
 8005fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d105      	bne.n	8006000 <create_name+0x3a4>
 8005ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006000:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d117      	bne.n	800603c <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800600c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b01      	cmp	r3, #1
 8006016:	d105      	bne.n	8006024 <create_name+0x3c8>
 8006018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800601c:	f043 0310 	orr.w	r3, r3, #16
 8006020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006028:	f003 030c 	and.w	r3, r3, #12
 800602c:	2b04      	cmp	r3, #4
 800602e:	d105      	bne.n	800603c <create_name+0x3e0>
 8006030:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006034:	f043 0308 	orr.w	r3, r3, #8
 8006038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006042:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006046:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	; 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006064:	e002      	b.n	800606c <follow_path+0x1c>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b2f      	cmp	r3, #47	; 0x2f
 8006072:	d0f8      	beq.n	8006066 <follow_path+0x16>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b5c      	cmp	r3, #92	; 0x5c
 800607a:	d0f4      	beq.n	8006066 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2200      	movs	r2, #0
 8006080:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b1f      	cmp	r3, #31
 8006088:	d80a      	bhi.n	80060a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2280      	movs	r2, #128	; 0x80
 800608e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006092:	2100      	movs	r1, #0
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff f8c7 	bl	8005228 <dir_sdi>
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]
 800609e:	e043      	b.n	8006128 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80060a0:	463b      	mov	r3, r7
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fdd9 	bl	8005c5c <create_name>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d134      	bne.n	800611e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fc19 	bl	80058ec <dir_find>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80060c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d127      	bne.n	8006122 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d122      	bne.n	8006122 <follow_path+0xd2>
 80060dc:	2305      	movs	r3, #5
 80060de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80060e0:	e01f      	b.n	8006122 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d11c      	bne.n	8006126 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	799b      	ldrb	r3, [r3, #6]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80060f8:	2305      	movs	r3, #5
 80060fa:	75fb      	strb	r3, [r7, #23]
 80060fc:	e014      	b.n	8006128 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610c:	4413      	add	r3, r2
 800610e:	4619      	mov	r1, r3
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fa10 	bl	8005536 <ld_clust>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800611c:	e7c0      	b.n	80060a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <follow_path+0xd8>
				break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006126:	bf00      	nop
			}
		}
	}

	return res;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006132:	b480      	push	{r7}
 8006134:	b087      	sub	sp, #28
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800613a:	f04f 33ff 	mov.w	r3, #4294967295
 800613e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d031      	beq.n	80061ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	e002      	b.n	8006156 <get_ldnumber+0x24>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	3301      	adds	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b1f      	cmp	r3, #31
 800615c:	d903      	bls.n	8006166 <get_ldnumber+0x34>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b3a      	cmp	r3, #58	; 0x3a
 8006164:	d1f4      	bne.n	8006150 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b3a      	cmp	r3, #58	; 0x3a
 800616c:	d11c      	bne.n	80061a8 <get_ldnumber+0x76>
			tp = *path;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	60fa      	str	r2, [r7, #12]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	3b30      	subs	r3, #48	; 0x30
 800617e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b09      	cmp	r3, #9
 8006184:	d80e      	bhi.n	80061a4 <get_ldnumber+0x72>
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	429a      	cmp	r2, r3
 800618c:	d10a      	bne.n	80061a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d107      	bne.n	80061a4 <get_ldnumber+0x72>
					vol = (int)i;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	3301      	adds	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	e002      	b.n	80061ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80061ac:	693b      	ldr	r3, [r7, #16]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	70da      	strb	r2, [r3, #3]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fe fcae 	bl	8004b38 <move_window>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <check_fs+0x2a>
 80061e2:	2304      	movs	r3, #4
 80061e4:	e038      	b.n	8006258 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3338      	adds	r3, #56	; 0x38
 80061ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe f9c2 	bl	8004578 <ld_word>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <check_fs+0x48>
 8006200:	2303      	movs	r3, #3
 8006202:	e029      	b.n	8006258 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800620a:	2be9      	cmp	r3, #233	; 0xe9
 800620c:	d009      	beq.n	8006222 <check_fs+0x66>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006214:	2beb      	cmp	r3, #235	; 0xeb
 8006216:	d11e      	bne.n	8006256 <check_fs+0x9a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800621e:	2b90      	cmp	r3, #144	; 0x90
 8006220:	d119      	bne.n	8006256 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3338      	adds	r3, #56	; 0x38
 8006226:	3336      	adds	r3, #54	; 0x36
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe f9bd 	bl	80045a8 <ld_dword>
 800622e:	4603      	mov	r3, r0
 8006230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006234:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <check_fs+0xa4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d101      	bne.n	800623e <check_fs+0x82>
 800623a:	2300      	movs	r3, #0
 800623c:	e00c      	b.n	8006258 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3338      	adds	r3, #56	; 0x38
 8006242:	3352      	adds	r3, #82	; 0x52
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe f9af 	bl	80045a8 <ld_dword>
 800624a:	4602      	mov	r2, r0
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <check_fs+0xa8>)
 800624e:	429a      	cmp	r2, r3
 8006250:	d101      	bne.n	8006256 <check_fs+0x9a>
 8006252:	2300      	movs	r3, #0
 8006254:	e000      	b.n	8006258 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006256:	2302      	movs	r3, #2
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	00544146 	.word	0x00544146
 8006264:	33544146 	.word	0x33544146

08006268 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b094      	sub	sp, #80	; 0x50
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff ff58 	bl	8006132 <get_ldnumber>
 8006282:	6378      	str	r0, [r7, #52]	; 0x34
	if (vol < 0) return FR_INVALID_DRIVE;
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	2b00      	cmp	r3, #0
 8006288:	da01      	bge.n	800628e <find_volume+0x26>
 800628a:	230b      	movs	r3, #11
 800628c:	e226      	b.n	80066dc <find_volume+0x474>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800628e:	4aa4      	ldr	r2, [pc, #656]	; (8006520 <find_volume+0x2b8>)
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006296:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <find_volume+0x3a>
 800629e:	230c      	movs	r3, #12
 80062a0:	e21c      	b.n	80066dc <find_volume+0x474>

	ENTER_FF(fs);						/* Lock the volume */
 80062a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a4:	f7fe fa67 	bl	8004776 <lock_fs>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <find_volume+0x4a>
 80062ae:	230f      	movs	r3, #15
 80062b0:	e214      	b.n	80066dc <find_volume+0x474>
	*rfs = fs;							/* Return pointer to the file system object */
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01a      	beq.n	80062fe <find_volume+0x96>
		stat = disk_status(fs->drv);
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe f8db 	bl	8004488 <disk_status>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80062d8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10c      	bne.n	80062fe <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <find_volume+0x92>
 80062ea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80062f6:	230a      	movs	r3, #10
 80062f8:	e1f0      	b.n	80066dc <find_volume+0x474>
			}
			return FR_OK;				/* The file system object is valid */
 80062fa:	2300      	movs	r3, #0
 80062fc:	e1ee      	b.n	80066dc <find_volume+0x474>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	b2da      	uxtb	r2, r3
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	705a      	strb	r2, [r3, #1]
/*	stat = disk_initialize(fs->drv);	 Initialize the physical drive
	if (stat & STA_NOINIT) { 			 Check if the initialization succeeded
		return FR_NOT_READY;			 Failed to initialize due to no medium or hard error
	}*/
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <find_volume+0xba>
 8006312:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <find_volume+0xba>
		return FR_WRITE_PROTECTED;
 800631e:	230a      	movs	r3, #10
 8006320:	e1dc      	b.n	80066dc <find_volume+0x474>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	64bb      	str	r3, [r7, #72]	; 0x48
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006326:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800632a:	f7ff ff47 	bl	80061bc <check_fs>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006334:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006338:	2b02      	cmp	r3, #2
 800633a:	d14b      	bne.n	80063d4 <find_volume+0x16c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800633c:	2300      	movs	r3, #0
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006340:	e01f      	b.n	8006382 <find_volume+0x11a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006350:	4413      	add	r3, r2
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	3304      	adds	r3, #4
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <find_volume+0x104>
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	3308      	adds	r3, #8
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe f920 	bl	80045a8 <ld_dword>
 8006368:	4602      	mov	r2, r0
 800636a:	e000      	b.n	800636e <find_volume+0x106>
 800636c:	2200      	movs	r2, #0
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006376:	440b      	add	r3, r1
 8006378:	f843 2c40 	str.w	r2, [r3, #-64]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	3301      	adds	r3, #1
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	2b03      	cmp	r3, #3
 8006386:	d9dc      	bls.n	8006342 <find_volume+0xda>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006388:	2300      	movs	r3, #0
 800638a:	63bb      	str	r3, [r7, #56]	; 0x38
		if (i) i--;
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <find_volume+0x130>
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	3b01      	subs	r3, #1
 8006396:	63bb      	str	r3, [r7, #56]	; 0x38
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80063a0:	4413      	add	r3, r2
 80063a2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80063a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <find_volume+0x152>
 80063ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80063b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b2:	f7ff ff03 	bl	80061bc <check_fs>
 80063b6:	4603      	mov	r3, r0
 80063b8:	e000      	b.n	80063bc <find_volume+0x154>
 80063ba:	2303      	movs	r3, #3
 80063bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80063c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d905      	bls.n	80063d4 <find_volume+0x16c>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	3301      	adds	r3, #1
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d9e1      	bls.n	8006398 <find_volume+0x130>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80063d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d101      	bne.n	80063e0 <find_volume+0x178>
 80063dc:	2301      	movs	r3, #1
 80063de:	e17d      	b.n	80066dc <find_volume+0x474>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80063e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d901      	bls.n	80063ec <find_volume+0x184>
 80063e8:	230d      	movs	r3, #13
 80063ea:	e177      	b.n	80066dc <find_volume+0x474>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	3338      	adds	r3, #56	; 0x38
 80063f0:	330b      	adds	r3, #11
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe f8c0 	bl	8004578 <ld_word>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fe:	d001      	beq.n	8006404 <find_volume+0x19c>
 8006400:	230d      	movs	r3, #13
 8006402:	e16b      	b.n	80066dc <find_volume+0x474>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	3338      	adds	r3, #56	; 0x38
 8006408:	3316      	adds	r3, #22
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe f8b4 	bl	8004578 <ld_word>
 8006410:	4603      	mov	r3, r0
 8006412:	647b      	str	r3, [r7, #68]	; 0x44
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <find_volume+0x1c0>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	3338      	adds	r3, #56	; 0x38
 800641e:	3324      	adds	r3, #36	; 0x24
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe f8c1 	bl	80045a8 <ld_dword>
 8006426:	6478      	str	r0, [r7, #68]	; 0x44
		fs->fsize = fasize;
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800642c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	789b      	ldrb	r3, [r3, #2]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d005      	beq.n	800644c <find_volume+0x1e4>
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	789b      	ldrb	r3, [r3, #2]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d001      	beq.n	800644c <find_volume+0x1e4>
 8006448:	230d      	movs	r3, #13
 800644a:	e147      	b.n	80066dc <find_volume+0x474>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	789b      	ldrb	r3, [r3, #2]
 8006450:	461a      	mov	r2, r3
 8006452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006454:	fb02 f303 	mul.w	r3, r2, r3
 8006458:	647b      	str	r3, [r7, #68]	; 0x44

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006460:	b29a      	uxth	r2, r3
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	895b      	ldrh	r3, [r3, #10]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <find_volume+0x218>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	895b      	ldrh	r3, [r3, #10]
 8006472:	461a      	mov	r2, r3
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	895b      	ldrh	r3, [r3, #10]
 8006478:	3b01      	subs	r3, #1
 800647a:	4013      	ands	r3, r2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <find_volume+0x21c>
 8006480:	230d      	movs	r3, #13
 8006482:	e12b      	b.n	80066dc <find_volume+0x474>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	3338      	adds	r3, #56	; 0x38
 8006488:	3311      	adds	r3, #17
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe f874 	bl	8004578 <ld_word>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	891b      	ldrh	r3, [r3, #8]
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <find_volume+0x242>
 80064a6:	230d      	movs	r3, #13
 80064a8:	e118      	b.n	80066dc <find_volume+0x474>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	3338      	adds	r3, #56	; 0x38
 80064ae:	3313      	adds	r3, #19
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fe f861 	bl	8004578 <ld_word>
 80064b6:	4603      	mov	r3, r0
 80064b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80064ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <find_volume+0x266>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	3338      	adds	r3, #56	; 0x38
 80064c4:	3320      	adds	r3, #32
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe f86e 	bl	80045a8 <ld_dword>
 80064cc:	6438      	str	r0, [r7, #64]	; 0x40

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	3338      	adds	r3, #56	; 0x38
 80064d2:	330e      	adds	r3, #14
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe f84f 	bl	8004578 <ld_word>
 80064da:	4603      	mov	r3, r0
 80064dc:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80064de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <find_volume+0x280>
 80064e4:	230d      	movs	r3, #13
 80064e6:	e0f9      	b.n	80066dc <find_volume+0x474>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80064e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80064ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ec:	4413      	add	r3, r2
 80064ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f0:	8912      	ldrh	r2, [r2, #8]
 80064f2:	0912      	lsrs	r2, r2, #4
 80064f4:	b292      	uxth	r2, r2
 80064f6:	4413      	add	r3, r2
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80064fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	429a      	cmp	r2, r3
 8006500:	d201      	bcs.n	8006506 <find_volume+0x29e>
 8006502:	230d      	movs	r3, #13
 8006504:	e0ea      	b.n	80066dc <find_volume+0x474>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	8952      	ldrh	r2, [r2, #10]
 8006510:	fbb3 f3f2 	udiv	r3, r3, r2
 8006514:	623b      	str	r3, [r7, #32]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <find_volume+0x2bc>
 800651c:	230d      	movs	r3, #13
 800651e:	e0dd      	b.n	80066dc <find_volume+0x474>
 8006520:	200000b4 	.word	0x200000b4
		fmt = FS_FAT32;
 8006524:	2303      	movs	r3, #3
 8006526:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006530:	4293      	cmp	r3, r2
 8006532:	d802      	bhi.n	800653a <find_volume+0x2d2>
 8006534:	2302      	movs	r3, #2
 8006536:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006540:	4293      	cmp	r3, r2
 8006542:	d802      	bhi.n	800654a <find_volume+0x2e2>
 8006544:	2301      	movs	r3, #1
 8006546:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006558:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655c:	441a      	add	r2, r3
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	441a      	add	r2, r3
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800656c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006570:	2b03      	cmp	r3, #3
 8006572:	d11e      	bne.n	80065b2 <find_volume+0x34a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	3338      	adds	r3, #56	; 0x38
 8006578:	332a      	adds	r3, #42	; 0x2a
 800657a:	4618      	mov	r0, r3
 800657c:	f7fd fffc 	bl	8004578 <ld_word>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <find_volume+0x322>
 8006586:	230d      	movs	r3, #13
 8006588:	e0a8      	b.n	80066dc <find_volume+0x474>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	891b      	ldrh	r3, [r3, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <find_volume+0x32e>
 8006592:	230d      	movs	r3, #13
 8006594:	e0a2      	b.n	80066dc <find_volume+0x474>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	3338      	adds	r3, #56	; 0x38
 800659a:	332c      	adds	r3, #44	; 0x2c
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe f803 	bl	80045a8 <ld_dword>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b0:	e01f      	b.n	80065f2 <find_volume+0x38a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	891b      	ldrh	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <find_volume+0x356>
 80065ba:	230d      	movs	r3, #13
 80065bc:	e08e      	b.n	80066dc <find_volume+0x474>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c4:	441a      	add	r2, r3
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80065ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d103      	bne.n	80065da <find_volume+0x372>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	e00a      	b.n	80065f0 <find_volume+0x388>
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	085a      	lsrs	r2, r3, #1
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	6a1a      	ldr	r2, [r3, #32]
 80065f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80065fc:	0a5b      	lsrs	r3, r3, #9
 80065fe:	429a      	cmp	r2, r3
 8006600:	d201      	bcs.n	8006606 <find_volume+0x39e>
 8006602:	230d      	movs	r3, #13
 8006604:	e06a      	b.n	80066dc <find_volume+0x474>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	f04f 32ff 	mov.w	r2, #4294967295
 800660c:	619a      	str	r2, [r3, #24]
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2280      	movs	r2, #128	; 0x80
 800661a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800661c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006620:	2b03      	cmp	r3, #3
 8006622:	d149      	bne.n	80066b8 <find_volume+0x450>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	3338      	adds	r3, #56	; 0x38
 8006628:	3330      	adds	r3, #48	; 0x30
 800662a:	4618      	mov	r0, r3
 800662c:	f7fd ffa4 	bl	8004578 <ld_word>
 8006630:	4603      	mov	r3, r0
 8006632:	2b01      	cmp	r3, #1
 8006634:	d140      	bne.n	80066b8 <find_volume+0x450>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006638:	3301      	adds	r3, #1
 800663a:	4619      	mov	r1, r3
 800663c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800663e:	f7fe fa7b 	bl	8004b38 <move_window>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d137      	bne.n	80066b8 <find_volume+0x450>
		{
			fs->fsi_flag = 0;
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	2200      	movs	r2, #0
 800664c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	3338      	adds	r3, #56	; 0x38
 8006652:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006656:	4618      	mov	r0, r3
 8006658:	f7fd ff8e 	bl	8004578 <ld_word>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006664:	429a      	cmp	r2, r3
 8006666:	d127      	bne.n	80066b8 <find_volume+0x450>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	3338      	adds	r3, #56	; 0x38
 800666c:	4618      	mov	r0, r3
 800666e:	f7fd ff9b 	bl	80045a8 <ld_dword>
 8006672:	4602      	mov	r2, r0
 8006674:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <find_volume+0x47c>)
 8006676:	429a      	cmp	r2, r3
 8006678:	d11e      	bne.n	80066b8 <find_volume+0x450>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	3338      	adds	r3, #56	; 0x38
 800667e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd ff90 	bl	80045a8 <ld_dword>
 8006688:	4602      	mov	r2, r0
 800668a:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <find_volume+0x480>)
 800668c:	429a      	cmp	r2, r3
 800668e:	d113      	bne.n	80066b8 <find_volume+0x450>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	3338      	adds	r3, #56	; 0x38
 8006694:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006698:	4618      	mov	r0, r3
 800669a:	f7fd ff85 	bl	80045a8 <ld_dword>
 800669e:	4602      	mov	r2, r0
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	3338      	adds	r3, #56	; 0x38
 80066a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fd ff7b 	bl	80045a8 <ld_dword>
 80066b2:	4602      	mov	r2, r0
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80066be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <find_volume+0x484>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <find_volume+0x484>)
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <find_volume+0x484>)
 80066ce:	881a      	ldrh	r2, [r3, #0]
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80066d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066d6:	f7fe f9c7 	bl	8004a68 <clear_lock>
#endif
	return FR_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3750      	adds	r7, #80	; 0x50
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	41615252 	.word	0x41615252
 80066e8:	61417272 	.word	0x61417272
 80066ec:	200000b8 	.word	0x200000b8

080066f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80066fa:	2309      	movs	r3, #9
 80066fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d02e      	beq.n	8006762 <validate+0x72>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02a      	beq.n	8006762 <validate+0x72>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d025      	beq.n	8006762 <validate+0x72>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	889a      	ldrh	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	88db      	ldrh	r3, [r3, #6]
 8006720:	429a      	cmp	r2, r3
 8006722:	d11e      	bne.n	8006762 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe f824 	bl	8004776 <lock_fs>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d014      	beq.n	800675e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd fea4 	bl	8004488 <disk_status>
 8006740:	4603      	mov	r3, r0
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <validate+0x60>
				res = FR_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
 800674e:	e008      	b.n	8006762 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe f823 	bl	80047a2 <unlock_fs>
 800675c:	e001      	b.n	8006762 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800675e:	230f      	movs	r3, #15
 8006760:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <validate+0x7e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	e000      	b.n	8006770 <validate+0x80>
 800676e:	2300      	movs	r3, #0
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	6013      	str	r3, [r2, #0]
	return res;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006792:	f107 0310 	add.w	r3, r7, #16
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fccb 	bl	8006132 <get_ldnumber>
 800679c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	da01      	bge.n	80067a8 <f_mount+0x28>
 80067a4:	230b      	movs	r3, #11
 80067a6:	e048      	b.n	800683a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80067a8:	4a26      	ldr	r2, [pc, #152]	; (8006844 <f_mount+0xc4>)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80067b8:	69b8      	ldr	r0, [r7, #24]
 80067ba:	f7fe f955 	bl	8004a68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 ff48 	bl	8007658 <ff_del_syncobj>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <f_mount+0x52>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e033      	b.n	800683a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00f      	beq.n	80067fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3310      	adds	r3, #16
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f000 ff14 	bl	800761c <ff_cre_syncobj>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <f_mount+0x7e>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e01d      	b.n	800683a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4910      	ldr	r1, [pc, #64]	; (8006844 <f_mount+0xc4>)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <f_mount+0x94>
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <f_mount+0x98>
 8006814:	2300      	movs	r3, #0
 8006816:	e010      	b.n	800683a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006818:	f107 010c 	add.w	r1, r7, #12
 800681c:	f107 0308 	add.w	r3, r7, #8
 8006820:	2200      	movs	r2, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff fd20 	bl	8006268 <find_volume>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	7dfa      	ldrb	r2, [r7, #23]
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd ffb5 	bl	80047a2 <unlock_fs>
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200000b4 	.word	0x200000b4

08006848 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b09a      	sub	sp, #104	; 0x68
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <f_open+0x18>
 800685c:	2309      	movs	r3, #9
 800685e:	e1c9      	b.n	8006bf4 <f_open+0x3ac>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006866:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006868:	79fa      	ldrb	r2, [r7, #7]
 800686a:	f107 0110 	add.w	r1, r7, #16
 800686e:	f107 0308 	add.w	r3, r7, #8
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fcf8 	bl	8006268 <find_volume>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800687e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006882:	2b00      	cmp	r3, #0
 8006884:	f040 81a6 	bne.w	8006bd4 <f_open+0x38c>
		dj.obj.fs = fs;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800688c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006890:	f000 ff0e 	bl	80076b0 <ff_memalloc>
 8006894:	65b8      	str	r0, [r7, #88]	; 0x58
 8006896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <f_open+0x62>
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2111      	movs	r1, #17
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fd ff7e 	bl	80047a2 <unlock_fs>
 80068a6:	2311      	movs	r3, #17
 80068a8:	e1a4      	b.n	8006bf4 <f_open+0x3ac>
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ae:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	f107 0314 	add.w	r3, r7, #20
 80068b6:	4611      	mov	r1, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fbc9 	bl	8006050 <follow_path>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80068c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d11a      	bne.n	8006902 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80068cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da03      	bge.n	80068de <f_open+0x96>
				res = FR_INVALID_NAME;
 80068d6:	2306      	movs	r3, #6
 80068d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80068dc:	e011      	b.n	8006902 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	f107 0314 	add.w	r3, r7, #20
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd ff6e 	bl	80047d8 <chk_lock>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	f003 031c 	and.w	r3, r3, #28
 8006908:	2b00      	cmp	r3, #0
 800690a:	d07f      	beq.n	8006a0c <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800690c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006910:	2b00      	cmp	r3, #0
 8006912:	d017      	beq.n	8006944 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006914:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006918:	2b04      	cmp	r3, #4
 800691a:	d10e      	bne.n	800693a <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800691c:	f7fd ffb8 	bl	8004890 <enq_lock>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d006      	beq.n	8006934 <f_open+0xec>
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff f89e 	bl	8005a6c <dir_register>
 8006930:	4603      	mov	r3, r0
 8006932:	e000      	b.n	8006936 <f_open+0xee>
 8006934:	2312      	movs	r3, #18
 8006936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	f043 0308 	orr.w	r3, r3, #8
 8006940:	71fb      	strb	r3, [r7, #7]
 8006942:	e010      	b.n	8006966 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006944:	7ebb      	ldrb	r3, [r7, #26]
 8006946:	f003 0311 	and.w	r3, r3, #17
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <f_open+0x10e>
					res = FR_DENIED;
 800694e:	2307      	movs	r3, #7
 8006950:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006954:	e007      	b.n	8006966 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <f_open+0x11e>
 8006960:	2308      	movs	r3, #8
 8006962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006966:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800696a:	2b00      	cmp	r3, #0
 800696c:	d168      	bne.n	8006a40 <f_open+0x1f8>
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d063      	beq.n	8006a40 <f_open+0x1f8>
				dw = GET_FATTIME();
 8006978:	f003 fcb4 	bl	800a2e4 <get_fattime>
 800697c:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	330e      	adds	r3, #14
 8006982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006984:	4618      	mov	r0, r3
 8006986:	f7fd fe4d 	bl	8004624 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	3316      	adds	r3, #22
 800698e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006990:	4618      	mov	r0, r3
 8006992:	f7fd fe47 	bl	8004624 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006998:	330b      	adds	r3, #11
 800699a:	2220      	movs	r2, #32
 800699c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fdc6 	bl	8005536 <ld_clust>
 80069aa:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069b0:	2200      	movs	r2, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fdde 	bl	8005574 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ba:	331c      	adds	r3, #28
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fd fe30 	bl	8004624 <st_dword>
					fs->wflag = 1;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2201      	movs	r2, #1
 80069c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80069ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d037      	beq.n	8006a40 <f_open+0x1f8>
						dw = fs->winsect;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80069d6:	f107 0314 	add.w	r3, r7, #20
 80069da:	2200      	movs	r2, #0
 80069dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe faf1 	bl	8004fc6 <remove_chain>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80069ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d126      	bne.n	8006a40 <f_open+0x1f8>
							res = move_window(fs, dw);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe f89e 	bl	8004b38 <move_window>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a06:	3a01      	subs	r2, #1
 8006a08:	615a      	str	r2, [r3, #20]
 8006a0a:	e019      	b.n	8006a40 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006a0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d115      	bne.n	8006a40 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006a14:	7ebb      	ldrb	r3, [r7, #26]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <f_open+0x1de>
					res = FR_NO_FILE;
 8006a1e:	2304      	movs	r3, #4
 8006a20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006a24:	e00c      	b.n	8006a40 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <f_open+0x1f8>
 8006a30:	7ebb      	ldrb	r3, [r7, #26]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <f_open+0x1f8>
						res = FR_DENIED;
 8006a3a:	2307      	movs	r3, #7
 8006a3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006a40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d128      	bne.n	8006a9a <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <f_open+0x212>
				mode |= FA_MODIFIED;
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f107 0314 	add.w	r3, r7, #20
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fd ff27 	bl	80048d4 <inc_lock>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <f_open+0x252>
 8006a94:	2302      	movs	r3, #2
 8006a96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8095 	bne.w	8006bce <f_open+0x386>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fd43 	bl	8005536 <ld_clust>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	331c      	adds	r3, #28
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fd fd74 	bl	80045a8 <ld_dword>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	88da      	ldrh	r2, [r3, #6]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3330      	adds	r3, #48	; 0x30
 8006af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006afa:	2100      	movs	r1, #0
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fd fdde 	bl	80046be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d060      	beq.n	8006bce <f_open+0x386>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d05c      	beq.n	8006bce <f_open+0x386>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	895b      	ldrh	r3, [r3, #10]
 8006b20:	025b      	lsls	r3, r3, #9
 8006b22:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b30:	e016      	b.n	8006b60 <f_open+0x318>
					clst = get_fat(&fp->obj, clst);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe f8b9 	bl	8004cae <get_fat>
 8006b3c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d802      	bhi.n	8006b4a <f_open+0x302>
 8006b44:	2302      	movs	r3, #2
 8006b46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d102      	bne.n	8006b58 <f_open+0x310>
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <f_open+0x328>
 8006b68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d8e0      	bhi.n	8006b32 <f_open+0x2ea>
				}
				fp->clust = clst;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d127      	bne.n	8006bce <f_open+0x386>
 8006b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d022      	beq.n	8006bce <f_open+0x386>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe f86f 	bl	8004c70 <clust2sect>
 8006b92:	64b8      	str	r0, [r7, #72]	; 0x48
 8006b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <f_open+0x35a>
						res = FR_INT_ERR;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ba0:	e015      	b.n	8006bce <f_open+0x386>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba4:	0a5a      	lsrs	r2, r3, #9
 8006ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba8:	441a      	add	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	7858      	ldrb	r0, [r3, #1]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1a      	ldr	r2, [r3, #32]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f7fd fc7d 	bl	80044bc <disk_read>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <f_open+0x386>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8006bce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006bd0:	f000 fd7a 	bl	80076c8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006bd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <f_open+0x39a>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fd fdd9 	bl	80047a2 <unlock_fs>
 8006bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3768      	adds	r7, #104	; 0x68
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f107 0214 	add.w	r2, r7, #20
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fd67 	bl	80066f0 <validate>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d107      	bne.n	8006c40 <f_read+0x44>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	7d5b      	ldrb	r3, [r3, #21]
 8006c34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006c38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d009      	beq.n	8006c54 <f_read+0x58>
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd fdaa 	bl	80047a2 <unlock_fs>
 8006c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c52:	e13d      	b.n	8006ed0 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	7d1b      	ldrb	r3, [r3, #20]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <f_read+0x72>
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2107      	movs	r1, #7
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fd fd9c 	bl	80047a2 <unlock_fs>
 8006c6a:	2307      	movs	r3, #7
 8006c6c:	e130      	b.n	8006ed0 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	f240 811c 	bls.w	8006ebc <f_read+0x2c0>
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006c88:	e118      	b.n	8006ebc <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f040 80e4 	bne.w	8006e60 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	0a5b      	lsrs	r3, r3, #9
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	8952      	ldrh	r2, [r2, #10]
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d139      	bne.n	8006d22 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	633b      	str	r3, [r7, #48]	; 0x30
 8006cbc:	e013      	b.n	8006ce6 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7fe fa77 	bl	80051c0 <clmt_clust>
 8006cd2:	6338      	str	r0, [r7, #48]	; 0x30
 8006cd4:	e007      	b.n	8006ce6 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7fd ffe5 	bl	8004cae <get_fat>
 8006ce4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d809      	bhi.n	8006d00 <f_read+0x104>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	755a      	strb	r2, [r3, #21]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd fd53 	bl	80047a2 <unlock_fs>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e0e7      	b.n	8006ed0 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d109      	bne.n	8006d1c <f_read+0x120>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	755a      	strb	r2, [r3, #21]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2101      	movs	r1, #1
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fd fd45 	bl	80047a2 <unlock_fs>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0d9      	b.n	8006ed0 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d20:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fd ffa0 	bl	8004c70 <clust2sect>
 8006d30:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d109      	bne.n	8006d4c <f_read+0x150>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	755a      	strb	r2, [r3, #21]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2102      	movs	r1, #2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fd fd2d 	bl	80047a2 <unlock_fs>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e0c1      	b.n	8006ed0 <f_read+0x2d4>
			sect += csect;
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0a5b      	lsrs	r3, r3, #9
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d03e      	beq.n	8006dde <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	4413      	add	r3, r2
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	8952      	ldrh	r2, [r2, #10]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d905      	bls.n	8006d7a <f_read+0x17e>
					cc = fs->csize - csect;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	895b      	ldrh	r3, [r3, #10]
 8006d72:	461a      	mov	r2, r3
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	7858      	ldrb	r0, [r3, #1]
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d84:	f7fd fb9a 	bl	80044bc <disk_read>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <f_read+0x1a6>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	755a      	strb	r2, [r3, #21]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2101      	movs	r1, #1
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fd fd02 	bl	80047a2 <unlock_fs>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e096      	b.n	8006ed0 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	7d1b      	ldrb	r3, [r3, #20]
 8006da6:	b25b      	sxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	da14      	bge.n	8006dd6 <f_read+0x1da>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	1ad2      	subs	r2, r2, r3
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d20d      	bcs.n	8006dd6 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1a      	ldr	r2, [r3, #32]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	025b      	lsls	r3, r3, #9
 8006dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc6:	18d0      	adds	r0, r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3330      	adds	r3, #48	; 0x30
 8006dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f7fd fc53 	bl	800467c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	025b      	lsls	r3, r3, #9
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006ddc:	e05a      	b.n	8006e94 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d038      	beq.n	8006e5a <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7d1b      	ldrb	r3, [r3, #20]
 8006dec:	b25b      	sxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da1d      	bge.n	8006e2e <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	7858      	ldrb	r0, [r3, #1]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	2301      	movs	r3, #1
 8006e02:	f7fd fb7b 	bl	80044fc <disk_write>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d009      	beq.n	8006e20 <f_read+0x224>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	755a      	strb	r2, [r3, #21]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2101      	movs	r1, #1
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fd fcc3 	bl	80047a2 <unlock_fs>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e057      	b.n	8006ed0 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	7d1b      	ldrb	r3, [r3, #20]
 8006e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	7858      	ldrb	r0, [r3, #1]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e38:	2301      	movs	r3, #1
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	f7fd fb3e 	bl	80044bc <disk_read>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <f_read+0x25e>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	755a      	strb	r2, [r3, #21]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2101      	movs	r1, #1
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fd fca6 	bl	80047a2 <unlock_fs>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e03a      	b.n	8006ed0 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d901      	bls.n	8006e7a <f_read+0x27e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e88:	4413      	add	r3, r2
 8006e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e90:	f7fd fbf4 	bl	800467c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	4413      	add	r3, r2
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	441a      	add	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	619a      	str	r2, [r3, #24]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	441a      	add	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f47f aee3 	bne.w	8006c8a <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fd fc6a 	bl	80047a2 <unlock_fs>
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3738      	adds	r7, #56	; 0x38
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08c      	sub	sp, #48	; 0x30
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f107 0210 	add.w	r2, r7, #16
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fbf9 	bl	80066f0 <validate>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d107      	bne.n	8006f1c <f_write+0x44>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	7d5b      	ldrb	r3, [r3, #21]
 8006f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d009      	beq.n	8006f30 <f_write+0x58>
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fd fc3c 	bl	80047a2 <unlock_fs>
 8006f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f2e:	e173      	b.n	8007218 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	7d1b      	ldrb	r3, [r3, #20]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d106      	bne.n	8006f4a <f_write+0x72>
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2107      	movs	r1, #7
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fd fc2e 	bl	80047a2 <unlock_fs>
 8006f46:	2307      	movs	r3, #7
 8006f48:	e166      	b.n	8007218 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f080 814b 	bcs.w	80071f2 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006f64:	e145      	b.n	80071f2 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 8101 	bne.w	8007176 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	0a5b      	lsrs	r3, r3, #9
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	8952      	ldrh	r2, [r2, #10]
 8006f7e:	3a01      	subs	r2, #1
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d14d      	bne.n	8007026 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10c      	bne.n	8006fac <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d11a      	bne.n	8006fd4 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe f874 	bl	8005090 <create_chain>
 8006fa8:	62b8      	str	r0, [r7, #40]	; 0x28
 8006faa:	e013      	b.n	8006fd4 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7fe f900 	bl	80051c0 <clmt_clust>
 8006fc0:	62b8      	str	r0, [r7, #40]	; 0x28
 8006fc2:	e007      	b.n	8006fd4 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fe f85f 	bl	8005090 <create_chain>
 8006fd2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8110 	beq.w	80071fc <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d109      	bne.n	8006ff6 <f_write+0x11e>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	755a      	strb	r2, [r3, #21]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2102      	movs	r1, #2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fd fbd8 	bl	80047a2 <unlock_fs>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e110      	b.n	8007218 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d109      	bne.n	8007012 <f_write+0x13a>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	755a      	strb	r2, [r3, #21]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2101      	movs	r1, #1
 8007008:	4618      	mov	r0, r3
 800700a:	f7fd fbca 	bl	80047a2 <unlock_fs>
 800700e:	2301      	movs	r3, #1
 8007010:	e102      	b.n	8007218 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007016:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <f_write+0x14e>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007024:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	7d1b      	ldrb	r3, [r3, #20]
 800702a:	b25b      	sxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	da1d      	bge.n	800706c <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	7858      	ldrb	r0, [r3, #1]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	2301      	movs	r3, #1
 8007040:	f7fd fa5c 	bl	80044fc <disk_write>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <f_write+0x186>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	755a      	strb	r2, [r3, #21]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2101      	movs	r1, #1
 8007054:	4618      	mov	r0, r3
 8007056:	f7fd fba4 	bl	80047a2 <unlock_fs>
 800705a:	2301      	movs	r3, #1
 800705c:	e0dc      	b.n	8007218 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	7d1b      	ldrb	r3, [r3, #20]
 8007062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007066:	b2da      	uxtb	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7fd fdfb 	bl	8004c70 <clust2sect>
 800707a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <f_write+0x1be>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2202      	movs	r2, #2
 8007086:	755a      	strb	r2, [r3, #21]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2102      	movs	r1, #2
 800708c:	4618      	mov	r0, r3
 800708e:	f7fd fb88 	bl	80047a2 <unlock_fs>
 8007092:	2302      	movs	r3, #2
 8007094:	e0c0      	b.n	8007218 <f_write+0x340>
			sect += csect;
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	4413      	add	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	0a5b      	lsrs	r3, r3, #9
 80070a2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d041      	beq.n	800712e <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	4413      	add	r3, r2
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	8952      	ldrh	r2, [r2, #10]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d905      	bls.n	80070c4 <f_write+0x1ec>
					cc = fs->csize - csect;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	895b      	ldrh	r3, [r3, #10]
 80070bc:	461a      	mov	r2, r3
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	7858      	ldrb	r0, [r3, #1]
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	f7fd fa15 	bl	80044fc <disk_write>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <f_write+0x214>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	755a      	strb	r2, [r3, #21]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2101      	movs	r1, #1
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fd fb5d 	bl	80047a2 <unlock_fs>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e095      	b.n	8007218 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d215      	bcs.n	8007126 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	025b      	lsls	r3, r3, #9
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007112:	4619      	mov	r1, r3
 8007114:	f7fd fab2 	bl	800467c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	7d1b      	ldrb	r3, [r3, #20]
 800711c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	025b      	lsls	r3, r3, #9
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800712c:	e044      	b.n	80071b8 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	429a      	cmp	r2, r3
 8007136:	d01b      	beq.n	8007170 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007140:	429a      	cmp	r2, r3
 8007142:	d215      	bcs.n	8007170 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	7858      	ldrb	r0, [r3, #1]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800714e:	2301      	movs	r3, #1
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	f7fd f9b3 	bl	80044bc <disk_read>
 8007156:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	755a      	strb	r2, [r3, #21]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2101      	movs	r1, #1
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fb1b 	bl	80047a2 <unlock_fs>
 800716c:	2301      	movs	r3, #1
 800716e:	e053      	b.n	8007218 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d901      	bls.n	8007190 <f_write+0x2b8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	4413      	add	r3, r2
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	69f9      	ldr	r1, [r7, #28]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fd fa69 	bl	800467c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	7d1b      	ldrb	r3, [r3, #20]
 80071ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	4413      	add	r3, r2
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	441a      	add	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	619a      	str	r2, [r3, #24]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	bf38      	it	cc
 80071d8:	461a      	movcc	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	60da      	str	r2, [r3, #12]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	441a      	add	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f aeb6 	bne.w	8006f66 <f_write+0x8e>
 80071fa:	e000      	b.n	80071fe <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	7d1b      	ldrb	r3, [r3, #20]
 8007202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007206:	b2da      	uxtb	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd fac6 	bl	80047a2 <unlock_fs>
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	; 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f107 0208 	add.w	r2, r7, #8
 800722e:	4611      	mov	r1, r2
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fa5d 	bl	80066f0 <validate>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d16d      	bne.n	800731c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7d1b      	ldrb	r3, [r3, #20]
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d067      	beq.n	800731c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7d1b      	ldrb	r3, [r3, #20]
 8007250:	b25b      	sxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	da1a      	bge.n	800728c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	7858      	ldrb	r0, [r3, #1]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1a      	ldr	r2, [r3, #32]
 8007264:	2301      	movs	r3, #1
 8007266:	f7fd f949 	bl	80044fc <disk_write>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d006      	beq.n	800727e <f_sync+0x5e>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2101      	movs	r1, #1
 8007274:	4618      	mov	r0, r3
 8007276:	f7fd fa94 	bl	80047a2 <unlock_fs>
 800727a:	2301      	movs	r3, #1
 800727c:	e055      	b.n	800732a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7d1b      	ldrb	r3, [r3, #20]
 8007282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007286:	b2da      	uxtb	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800728c:	f003 f82a 	bl	800a2e4 <get_fattime>
 8007290:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f7fd fc4c 	bl	8004b38 <move_window>
 80072a0:	4603      	mov	r3, r0
 80072a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d138      	bne.n	800731c <f_sync+0xfc>
					dir = fp->dir_ptr;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	330b      	adds	r3, #11
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	320b      	adds	r2, #11
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	f042 0220 	orr.w	r2, r2, #32
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	461a      	mov	r2, r3
 80072cc:	68f9      	ldr	r1, [r7, #12]
 80072ce:	f7fe f951 	bl	8005574 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f103 021c 	add.w	r2, r3, #28
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f7fd f9a0 	bl	8004624 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3316      	adds	r3, #22
 80072e8:	6939      	ldr	r1, [r7, #16]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fd f99a 	bl	8004624 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3312      	adds	r3, #18
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fd f979 	bl	80045ee <st_word>
					fs->wflag = 1;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2201      	movs	r2, #1
 8007300:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4618      	mov	r0, r3
 8007306:	f7fd fc45 	bl	8004b94 <sync_fs>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7d1b      	ldrb	r3, [r3, #20]
 8007312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007316:	b2da      	uxtb	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	7dfa      	ldrb	r2, [r7, #23]
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f7fd fa3d 	bl	80047a2 <unlock_fs>
 8007328:	7dfb      	ldrb	r3, [r7, #23]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff ff70 	bl	8007220 <f_sync>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11d      	bne.n	8007386 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f107 0208 	add.w	r2, r7, #8
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff f9cc 	bl	80066f0 <validate>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d111      	bne.n	8007386 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	4618      	mov	r0, r3
 8007368:	f7fd fb42 	bl	80049f0 <dec_lock>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd fa0e 	bl	80047a2 <unlock_fs>
#endif
		}
	}
	return res;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80073a6:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073a8:	7a5b      	ldrb	r3, [r3, #9]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d131      	bne.n	8007414 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073b0:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073b2:	7a5b      	ldrb	r3, [r3, #9]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073ba:	2100      	movs	r1, #0
 80073bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80073be:	4b19      	ldr	r3, [pc, #100]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073c0:	7a5b      	ldrb	r3, [r3, #9]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	4a17      	ldr	r2, [pc, #92]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073d0:	7a5b      	ldrb	r3, [r3, #9]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b13      	ldr	r3, [pc, #76]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073d8:	4413      	add	r3, r2
 80073da:	79fa      	ldrb	r2, [r7, #7]
 80073dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80073de:	4b11      	ldr	r3, [pc, #68]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073e0:	7a5b      	ldrb	r3, [r3, #9]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	b2d1      	uxtb	r1, r2
 80073e8:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <FATFS_LinkDriverEx+0x94>)
 80073ea:	7251      	strb	r1, [r2, #9]
 80073ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80073ee:	7dbb      	ldrb	r3, [r7, #22]
 80073f0:	3330      	adds	r3, #48	; 0x30
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	3301      	adds	r3, #1
 80073fc:	223a      	movs	r2, #58	; 0x3a
 80073fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3302      	adds	r3, #2
 8007404:	222f      	movs	r2, #47	; 0x2f
 8007406:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	3303      	adds	r3, #3
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
}
 8007416:	4618      	mov	r0, r3
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	200000dc 	.word	0x200000dc

08007428 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007432:	2200      	movs	r2, #0
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff ffaa 	bl	8007390 <FATFS_LinkDriverEx>
 800743c:	4603      	mov	r3, r0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007448:	b480      	push	{r7}
 800744a:	b089      	sub	sp, #36	; 0x24
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	2b7f      	cmp	r3, #127	; 0x7f
 8007458:	d802      	bhi.n	8007460 <ff_convert+0x18>
		c = chr;
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	837b      	strh	r3, [r7, #26]
 800745e:	e047      	b.n	80074f0 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <ff_convert+0x2a>
			p = oem2uni;
 8007466:	4b26      	ldr	r3, [pc, #152]	; (8007500 <ff_convert+0xb8>)
 8007468:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800746a:	f245 5320 	movw	r3, #21792	; 0x5520
 800746e:	60bb      	str	r3, [r7, #8]
 8007470:	e004      	b.n	800747c <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <ff_convert+0xbc>)
 8007474:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 8007476:	f245 5320 	movw	r3, #21792	; 0x5520
 800747a:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8007480:	2310      	movs	r3, #16
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	e023      	b.n	80074ce <ff_convert+0x86>
			i = li + (hi - li) / 2;
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	0fda      	lsrs	r2, r3, #31
 800748e:	4413      	add	r3, r2
 8007490:	105b      	asrs	r3, r3, #1
 8007492:	461a      	mov	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	461a      	mov	r2, r3
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d014      	beq.n	80074d6 <ff_convert+0x8e>
			if (chr > p[i * 2])
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	461a      	mov	r2, r3
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d902      	bls.n	80074c4 <ff_convert+0x7c>
				li = i;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e001      	b.n	80074c8 <ff_convert+0x80>
			else
				hi = i;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1d8      	bne.n	8007486 <ff_convert+0x3e>
 80074d4:	e000      	b.n	80074d8 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 80074d6:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d006      	beq.n	80074ec <ff_convert+0xa4>
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	3302      	adds	r3, #2
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	e000      	b.n	80074ee <ff_convert+0xa6>
 80074ec:	2300      	movs	r3, #0
 80074ee:	837b      	strh	r3, [r7, #26]
	}

	return c;
 80074f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3724      	adds	r7, #36	; 0x24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	08020730 	.word	0x08020730
 8007504:	0800b2ac 	.word	0x0800b2ac

08007508 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007518:	d201      	bcs.n	800751e <ff_wtoupper+0x16>
 800751a:	4b3e      	ldr	r3, [pc, #248]	; (8007614 <ff_wtoupper+0x10c>)
 800751c:	e000      	b.n	8007520 <ff_wtoupper+0x18>
 800751e:	4b3e      	ldr	r3, [pc, #248]	; (8007618 <ff_wtoupper+0x110>)
 8007520:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	1c9a      	adds	r2, r3, #2
 8007526:	617a      	str	r2, [r7, #20]
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800752c:	8a7b      	ldrh	r3, [r7, #18]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d068      	beq.n	8007604 <ff_wtoupper+0xfc>
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	8a7b      	ldrh	r3, [r7, #18]
 8007536:	429a      	cmp	r2, r3
 8007538:	d364      	bcc.n	8007604 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	1c9a      	adds	r2, r3, #2
 800753e:	617a      	str	r2, [r7, #20]
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	823b      	strh	r3, [r7, #16]
 8007544:	8a3b      	ldrh	r3, [r7, #16]
 8007546:	0a1b      	lsrs	r3, r3, #8
 8007548:	81fb      	strh	r3, [r7, #14]
 800754a:	8a3b      	ldrh	r3, [r7, #16]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007550:	88fa      	ldrh	r2, [r7, #6]
 8007552:	8a79      	ldrh	r1, [r7, #18]
 8007554:	8a3b      	ldrh	r3, [r7, #16]
 8007556:	440b      	add	r3, r1
 8007558:	429a      	cmp	r2, r3
 800755a:	da49      	bge.n	80075f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800755c:	89fb      	ldrh	r3, [r7, #14]
 800755e:	2b08      	cmp	r3, #8
 8007560:	d84f      	bhi.n	8007602 <ff_wtoupper+0xfa>
 8007562:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <ff_wtoupper+0x60>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	0800758d 	.word	0x0800758d
 800756c:	0800759f 	.word	0x0800759f
 8007570:	080075b5 	.word	0x080075b5
 8007574:	080075bd 	.word	0x080075bd
 8007578:	080075c5 	.word	0x080075c5
 800757c:	080075cd 	.word	0x080075cd
 8007580:	080075d5 	.word	0x080075d5
 8007584:	080075dd 	.word	0x080075dd
 8007588:	080075e5 	.word	0x080075e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	8a7b      	ldrh	r3, [r7, #18]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	80fb      	strh	r3, [r7, #6]
 800759c:	e027      	b.n	80075ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800759e:	88fa      	ldrh	r2, [r7, #6]
 80075a0:	8a7b      	ldrh	r3, [r7, #18]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	80fb      	strh	r3, [r7, #6]
 80075b2:	e01c      	b.n	80075ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80075b4:	88fb      	ldrh	r3, [r7, #6]
 80075b6:	3b10      	subs	r3, #16
 80075b8:	80fb      	strh	r3, [r7, #6]
 80075ba:	e018      	b.n	80075ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	3b20      	subs	r3, #32
 80075c0:	80fb      	strh	r3, [r7, #6]
 80075c2:	e014      	b.n	80075ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	3b30      	subs	r3, #48	; 0x30
 80075c8:	80fb      	strh	r3, [r7, #6]
 80075ca:	e010      	b.n	80075ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	3b1a      	subs	r3, #26
 80075d0:	80fb      	strh	r3, [r7, #6]
 80075d2:	e00c      	b.n	80075ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80075d4:	88fb      	ldrh	r3, [r7, #6]
 80075d6:	3308      	adds	r3, #8
 80075d8:	80fb      	strh	r3, [r7, #6]
 80075da:	e008      	b.n	80075ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	3b50      	subs	r3, #80	; 0x50
 80075e0:	80fb      	strh	r3, [r7, #6]
 80075e2:	e004      	b.n	80075ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80075ea:	80fb      	strh	r3, [r7, #6]
 80075ec:	bf00      	nop
			}
			break;
 80075ee:	e008      	b.n	8007602 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80075f0:	89fb      	ldrh	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d195      	bne.n	8007522 <ff_wtoupper+0x1a>
 80075f6:	8a3b      	ldrh	r3, [r7, #16]
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4413      	add	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007600:	e78f      	b.n	8007522 <ff_wtoupper+0x1a>
			break;
 8007602:	bf00      	nop
	}

	return chr;
 8007604:	88fb      	ldrh	r3, [r7, #6]
}
 8007606:	4618      	mov	r0, r3
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	08035bb4 	.word	0x08035bb4
 8007618:	08035da8 	.word	0x08035da8

0800761c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 8007628:	2300      	movs	r3, #0
 800762a:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800762c:	f107 0308 	add.w	r3, r7, #8
 8007630:	2101      	movs	r1, #1
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f8db 	bl	80077ee <osSemaphoreCreate>
 8007638:	4602      	mov	r2, r0
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	60fb      	str	r3, [r7, #12]

    return ret;
 800764e:	68fb      	ldr	r3, [r7, #12]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f967 	bl	8007934 <osSemaphoreDelete>
    return 1;
 8007666:	2301      	movs	r3, #1
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800767c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f8d3 	bl	800782c <osSemaphoreWait>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <ff_req_grant+0x20>
  {
    ret = 1;
 800768c:	2301      	movs	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007690:	68fb      	ldr	r3, [r7, #12]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f910 	bl	80078c8 <osSemaphoreRelease>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f003 fcbb 	bl	800b034 <malloc>
 80076be:	4603      	mov	r3, r0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f003 fcb7 	bl	800b044 <free>
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	4603      	mov	r3, r0
 80076e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80076ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076f0:	2b84      	cmp	r3, #132	; 0x84
 80076f2:	d005      	beq.n	8007700 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80076f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	3303      	adds	r3, #3
 80076fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007700:	68fb      	ldr	r3, [r7, #12]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007714:	f3ef 8305 	mrs	r3, IPSR
 8007718:	607b      	str	r3, [r7, #4]
  return(result);
 800771a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800771c:	2b00      	cmp	r3, #0
 800771e:	bf14      	ite	ne
 8007720:	2301      	movne	r3, #1
 8007722:	2300      	moveq	r3, #0
 8007724:	b2db      	uxtb	r3, r3
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007736:	f001 feb7 	bl	80094a8 <vTaskStartScheduler>
  
  return osOK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	bd80      	pop	{r7, pc}

08007740 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007744:	f002 fa9a 	bl	8009c7c <xTaskGetSchedulerState>
 8007748:	4603      	mov	r3, r0
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <osKernelRunning+0x12>
    return 0;
 800774e:	2300      	movs	r3, #0
 8007750:	e000      	b.n	8007754 <osKernelRunning+0x14>
  else
    return 1;
 8007752:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8007754:	4618      	mov	r0, r3
 8007756:	bd80      	pop	{r7, pc}

08007758 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800775c:	f7ff ffd7 	bl	800770e <inHandlerMode>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007766:	f001 ff9f 	bl	80096a8 <xTaskGetTickCountFromISR>
 800776a:	4603      	mov	r3, r0
 800776c:	e002      	b.n	8007774 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800776e:	f001 ff8b 	bl	8009688 <xTaskGetTickCount>
 8007772:	4603      	mov	r3, r0
  }
}
 8007774:	4618      	mov	r0, r3
 8007776:	bd80      	pop	{r7, pc}

08007778 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	b087      	sub	sp, #28
 800777c:	af02      	add	r7, sp, #8
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685c      	ldr	r4, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800778e:	b29e      	uxth	r6, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff ffa1 	bl	80076de <makeFreeRtosPriority>
 800779c:	4602      	mov	r2, r0
 800779e:	f107 030c 	add.w	r3, r7, #12
 80077a2:	9301      	str	r3, [sp, #4]
 80077a4:	9200      	str	r2, [sp, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	4632      	mov	r2, r6
 80077aa:	4629      	mov	r1, r5
 80077ac:	4620      	mov	r0, r4
 80077ae:	f001 fd1d 	bl	80091ec <xTaskCreate>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d001      	beq.n	80077bc <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80077bc:	68fb      	ldr	r3, [r7, #12]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <osDelay+0x16>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e000      	b.n	80077de <osDelay+0x18>
 80077dc:	2301      	movs	r3, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fe2e 	bl	8009440 <vTaskDelay>
  
  return osOK;
 80077e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d110      	bne.n	8007820 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80077fe:	2203      	movs	r2, #3
 8007800:	2100      	movs	r1, #0
 8007802:	2001      	movs	r0, #1
 8007804:	f000 feb2 	bl	800856c <xQueueGenericCreate>
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <osSemaphoreCreate+0x2e>
 8007810:	2300      	movs	r3, #0
 8007812:	2200      	movs	r2, #0
 8007814:	2100      	movs	r1, #0
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 ff00 	bl	800861c <xQueueGenericSend>
    return sema;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e000      	b.n	8007822 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8007820:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007840:	2380      	movs	r3, #128	; 0x80
 8007842:	e03a      	b.n	80078ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d103      	bne.n	8007858 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007850:	f04f 33ff 	mov.w	r3, #4294967295
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e009      	b.n	800786c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d006      	beq.n	800786c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <osSemaphoreWait+0x40>
      ticks = 1;
 8007868:	2301      	movs	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800786c:	f7ff ff4f 	bl	800770e <inHandlerMode>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d017      	beq.n	80078a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	461a      	mov	r2, r3
 800787c:	2100      	movs	r1, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fac8 	bl	8008e14 <xQueueReceiveFromISR>
 8007884:	4603      	mov	r3, r0
 8007886:	2b01      	cmp	r3, #1
 8007888:	d001      	beq.n	800788e <osSemaphoreWait+0x62>
      return osErrorOS;
 800788a:	23ff      	movs	r3, #255	; 0xff
 800788c:	e015      	b.n	80078ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d011      	beq.n	80078b8 <osSemaphoreWait+0x8c>
 8007894:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <osSemaphoreWait+0x98>)
 8007896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	e008      	b.n	80078b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 f9ab 	bl	8008c04 <xQueueSemaphoreTake>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d001      	beq.n	80078b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80078b4:	23ff      	movs	r3, #255	; 0xff
 80078b6:	e000      	b.n	80078ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80078d8:	f7ff ff19 	bl	800770e <inHandlerMode>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d016      	beq.n	8007910 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f825 	bl	8008938 <xQueueGiveFromISR>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d001      	beq.n	80078f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80078f4:	23ff      	movs	r3, #255	; 0xff
 80078f6:	e017      	b.n	8007928 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d013      	beq.n	8007926 <osSemaphoreRelease+0x5e>
 80078fe:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <osSemaphoreRelease+0x68>)
 8007900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	e00a      	b.n	8007926 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007910:	2300      	movs	r3, #0
 8007912:	2200      	movs	r2, #0
 8007914:	2100      	movs	r1, #0
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fe80 	bl	800861c <xQueueGenericSend>
 800791c:	4603      	mov	r3, r0
 800791e:	2b01      	cmp	r3, #1
 8007920:	d001      	beq.n	8007926 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007922:	23ff      	movs	r3, #255	; 0xff
 8007924:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007926:	68fb      	ldr	r3, [r7, #12]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800793c:	f7ff fee7 	bl	800770e <inHandlerMode>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007946:	2382      	movs	r3, #130	; 0x82
 8007948:	e003      	b.n	8007952 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fadf 	bl	8008f0e <vQueueDelete>

  return osOK; 
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	4619      	mov	r1, r3
 8007970:	f000 fdfc 	bl	800856c <xQueueGenericCreate>
 8007974:	4603      	mov	r3, r0
#endif
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800798c:	2300      	movs	r3, #0
 800798e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <osMessagePut+0x1e>
    ticks = 1;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800799e:	f7ff feb6 	bl	800770e <inHandlerMode>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d018      	beq.n	80079da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80079a8:	f107 0210 	add.w	r2, r7, #16
 80079ac:	f107 0108 	add.w	r1, r7, #8
 80079b0:	2300      	movs	r3, #0
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 ff2c 	bl	8008810 <xQueueGenericSendFromISR>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d001      	beq.n	80079c2 <osMessagePut+0x42>
      return osErrorOS;
 80079be:	23ff      	movs	r3, #255	; 0xff
 80079c0:	e018      	b.n	80079f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d014      	beq.n	80079f2 <osMessagePut+0x72>
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <osMessagePut+0x7c>)
 80079ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	e00b      	b.n	80079f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80079da:	f107 0108 	add.w	r1, r7, #8
 80079de:	2300      	movs	r3, #0
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fe1a 	bl	800861c <xQueueGenericSend>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d001      	beq.n	80079f2 <osMessagePut+0x72>
      return osErrorOS;
 80079ee:	23ff      	movs	r3, #255	; 0xff
 80079f0:	e000      	b.n	80079f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007a00:	b590      	push	{r4, r7, lr}
 8007a02:	b08b      	sub	sp, #44	; 0x2c
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007a1a:	2380      	movs	r3, #128	; 0x80
 8007a1c:	617b      	str	r3, [r7, #20]
    return event;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	461c      	mov	r4, r3
 8007a22:	f107 0314 	add.w	r3, r7, #20
 8007a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a2e:	e054      	b.n	8007ada <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3e:	d103      	bne.n	8007a48 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
 8007a46:	e009      	b.n	8007a5c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d006      	beq.n	8007a5c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <osMessageGet+0x5c>
      ticks = 1;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007a5c:	f7ff fe57 	bl	800770e <inHandlerMode>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01c      	beq.n	8007aa0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007a66:	f107 0220 	add.w	r2, r7, #32
 8007a6a:	f107 0314 	add.w	r3, r7, #20
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	68b8      	ldr	r0, [r7, #8]
 8007a74:	f001 f9ce 	bl	8008e14 <xQueueReceiveFromISR>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d102      	bne.n	8007a84 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007a7e:	2310      	movs	r3, #16
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	e001      	b.n	8007a88 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01d      	beq.n	8007aca <osMessageGet+0xca>
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <osMessageGet+0xe4>)
 8007a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	e014      	b.n	8007aca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	68b8      	ldr	r0, [r7, #8]
 8007aac:	f000 ffce 	bl	8008a4c <xQueueReceive>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d102      	bne.n	8007abc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	e006      	b.n	8007aca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <osMessageGet+0xc6>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e000      	b.n	8007ac8 <osMessageGet+0xc8>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	461c      	mov	r4, r3
 8007ace:	f107 0314 	add.w	r3, r7, #20
 8007ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	372c      	adds	r7, #44	; 0x2c
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd90      	pop	{r4, r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007aec:	f002 f8c6 	bl	8009c7c <xTaskGetSchedulerState>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d001      	beq.n	8007afa <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8007af6:	f000 fa6f 	bl	8007fd8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007afa:	bf00      	nop
 8007afc:	bd80      	pop	{r7, pc}

08007afe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f103 0208 	add.w	r2, r3, #8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f103 0208 	add.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f103 0208 	add.w	r2, r3, #8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d103      	bne.n	8007bc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e00c      	b.n	8007bda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e002      	b.n	8007bce <vListInsert+0x2e>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d9f6      	bls.n	8007bc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6892      	ldr	r2, [r2, #8]
 8007c28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6852      	ldr	r2, [r2, #4]
 8007c32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d103      	bne.n	8007c46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	1e5a      	subs	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3b04      	subs	r3, #4
 8007c78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c98:	4a0c      	ldr	r2, [pc, #48]	; (8007ccc <pxPortInitialiseStack+0x64>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b14      	subs	r3, #20
 8007ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f06f 0202 	mvn.w	r2, #2
 8007cb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3b20      	subs	r3, #32
 8007cbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	08007cd1 	.word	0x08007cd1

08007cd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cda:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <prvTaskExitError+0x50>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d009      	beq.n	8007cf8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e7fe      	b.n	8007cf6 <prvTaskExitError+0x26>
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d0a:	bf00      	nop
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0fc      	beq.n	8007d0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000008 	.word	0x20000008
	...

08007d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <pxCurrentTCBConst2>)
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6808      	ldr	r0, [r1, #0]
 8007d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	f380 8809 	msr	PSP, r0
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	4770      	bx	lr
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst2>:
 8007d50:	20003d08 	.word	0x20003d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d58:	4808      	ldr	r0, [pc, #32]	; (8007d7c <prvPortStartFirstTask+0x24>)
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	6800      	ldr	r0, [r0, #0]
 8007d5e:	f380 8808 	msr	MSP, r0
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8814 	msr	CONTROL, r0
 8007d6a:	b662      	cpsie	i
 8007d6c:	b661      	cpsie	f
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	df00      	svc	0
 8007d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d7a:	bf00      	nop
 8007d7c:	e000ed08 	.word	0xe000ed08

08007d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d86:	4b44      	ldr	r3, [pc, #272]	; (8007e98 <xPortStartScheduler+0x118>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a44      	ldr	r2, [pc, #272]	; (8007e9c <xPortStartScheduler+0x11c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d109      	bne.n	8007da4 <xPortStartScheduler+0x24>
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	e7fe      	b.n	8007da2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007da4:	4b3c      	ldr	r3, [pc, #240]	; (8007e98 <xPortStartScheduler+0x118>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a3d      	ldr	r2, [pc, #244]	; (8007ea0 <xPortStartScheduler+0x120>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d109      	bne.n	8007dc2 <xPortStartScheduler+0x42>
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e7fe      	b.n	8007dc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dc2:	4b38      	ldr	r3, [pc, #224]	; (8007ea4 <xPortStartScheduler+0x124>)
 8007dc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	22ff      	movs	r2, #255	; 0xff
 8007dd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	4b30      	ldr	r3, [pc, #192]	; (8007ea8 <xPortStartScheduler+0x128>)
 8007de8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dea:	4b30      	ldr	r3, [pc, #192]	; (8007eac <xPortStartScheduler+0x12c>)
 8007dec:	2207      	movs	r2, #7
 8007dee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007df0:	e009      	b.n	8007e06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <xPortStartScheduler+0x12c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	4a2c      	ldr	r2, [pc, #176]	; (8007eac <xPortStartScheduler+0x12c>)
 8007dfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b80      	cmp	r3, #128	; 0x80
 8007e10:	d0ef      	beq.n	8007df2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e12:	4b26      	ldr	r3, [pc, #152]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1c3 0307 	rsb	r3, r3, #7
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d009      	beq.n	8007e32 <xPortStartScheduler+0xb2>
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	e7fe      	b.n	8007e30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e32:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e3c:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e44:	4a19      	ldr	r2, [pc, #100]	; (8007eac <xPortStartScheduler+0x12c>)
 8007e46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e50:	4a17      	ldr	r2, [pc, #92]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e52:	4b17      	ldr	r3, [pc, #92]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e5c:	4a14      	ldr	r2, [pc, #80]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e68:	f000 f8d6 	bl	8008018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e6c:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e72:	f000 f8f5 	bl	8008060 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e76:	4a10      	ldr	r2, [pc, #64]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e78:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e82:	f7ff ff69 	bl	8007d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e86:	f001 fcdd 	bl	8009844 <vTaskSwitchContext>
	prvTaskExitError();
 8007e8a:	f7ff ff21 	bl	8007cd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed00 	.word	0xe000ed00
 8007e9c:	410fc271 	.word	0x410fc271
 8007ea0:	410fc270 	.word	0x410fc270
 8007ea4:	e000e400 	.word	0xe000e400
 8007ea8:	200000e8 	.word	0x200000e8
 8007eac:	200000ec 	.word	0x200000ec
 8007eb0:	e000ed20 	.word	0xe000ed20
 8007eb4:	20000008 	.word	0x20000008
 8007eb8:	e000ef34 	.word	0xe000ef34

08007ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <vPortEnterCritical+0x54>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	4a0d      	ldr	r2, [pc, #52]	; (8007f10 <vPortEnterCritical+0x54>)
 8007edc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ede:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <vPortEnterCritical+0x54>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d10e      	bne.n	8007f04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <vPortEnterCritical+0x58>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <vPortEnterCritical+0x48>
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	e7fe      	b.n	8007f02 <vPortEnterCritical+0x46>
	}
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	20000008 	.word	0x20000008
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <vPortExitCritical+0x22>
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	607b      	str	r3, [r7, #4]
 8007f38:	e7fe      	b.n	8007f38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4a08      	ldr	r2, [pc, #32]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f44:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <vPortExitCritical+0x4c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <vPortExitCritical+0x3e>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000008 	.word	0x20000008
	...

08007f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f70:	f3ef 8009 	mrs	r0, PSP
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <pxCurrentTCBConst>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	f01e 0f10 	tst.w	lr, #16
 8007f80:	bf08      	it	eq
 8007f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	6010      	str	r0, [r2, #0]
 8007f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f94:	f380 8811 	msr	BASEPRI, r0
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f001 fc50 	bl	8009844 <vTaskSwitchContext>
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f380 8811 	msr	BASEPRI, r0
 8007fac:	bc09      	pop	{r0, r3}
 8007fae:	6819      	ldr	r1, [r3, #0]
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb6:	f01e 0f10 	tst.w	lr, #16
 8007fba:	bf08      	it	eq
 8007fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fc0:	f380 8809 	msr	PSP, r0
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	f3af 8000 	nop.w

08007fd0 <pxCurrentTCBConst>:
 8007fd0:	20003d08 	.word	0x20003d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop

08007fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ff0:	f001 fb6c 	bl	80096cc <xTaskIncrementTick>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ffa:	4b06      	ldr	r3, [pc, #24]	; (8008014 <xPortSysTickHandler+0x3c>)
 8007ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <vPortSetupTimerInterrupt+0x34>)
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008022:	4b0b      	ldr	r3, [pc, #44]	; (8008050 <vPortSetupTimerInterrupt+0x38>)
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <vPortSetupTimerInterrupt+0x3c>)
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <vPortSetupTimerInterrupt+0x40>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	490b      	ldr	r1, [pc, #44]	; (800805c <vPortSetupTimerInterrupt+0x44>)
 8008030:	fba1 1303 	umull	r1, r3, r1, r3
 8008034:	099b      	lsrs	r3, r3, #6
 8008036:	3b01      	subs	r3, #1
 8008038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800803a:	4b04      	ldr	r3, [pc, #16]	; (800804c <vPortSetupTimerInterrupt+0x34>)
 800803c:	2207      	movs	r2, #7
 800803e:	601a      	str	r2, [r3, #0]
}
 8008040:	bf00      	nop
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	e000e010 	.word	0xe000e010
 8008050:	e000e018 	.word	0xe000e018
 8008054:	e000e014 	.word	0xe000e014
 8008058:	20000030 	.word	0x20000030
 800805c:	10624dd3 	.word	0x10624dd3

08008060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008070 <vPortEnableVFP+0x10>
 8008064:	6801      	ldr	r1, [r0, #0]
 8008066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800806a:	6001      	str	r1, [r0, #0]
 800806c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800806e:	bf00      	nop
 8008070:	e000ed88 	.word	0xe000ed88

08008074 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800807a:	f3ef 8305 	mrs	r3, IPSR
 800807e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b0f      	cmp	r3, #15
 8008084:	d913      	bls.n	80080ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008086:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <vPortValidateInterruptPriority+0x6c>)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008090:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <vPortValidateInterruptPriority+0x70>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	7afa      	ldrb	r2, [r7, #11]
 8008096:	429a      	cmp	r2, r3
 8008098:	d209      	bcs.n	80080ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	e7fe      	b.n	80080ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080ae:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <vPortValidateInterruptPriority+0x74>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080b6:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <vPortValidateInterruptPriority+0x78>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d909      	bls.n	80080d2 <vPortValidateInterruptPriority+0x5e>
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	e7fe      	b.n	80080d0 <vPortValidateInterruptPriority+0x5c>
	}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	e000e3f0 	.word	0xe000e3f0
 80080e4:	200000e8 	.word	0x200000e8
 80080e8:	e000ed0c 	.word	0xe000ed0c
 80080ec:	200000ec 	.word	0x200000ec

080080f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08a      	sub	sp, #40	; 0x28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080fc:	f001 fa1a 	bl	8009534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008100:	4b57      	ldr	r3, [pc, #348]	; (8008260 <pvPortMalloc+0x170>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008108:	f000 f90c 	bl	8008324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800810c:	4b55      	ldr	r3, [pc, #340]	; (8008264 <pvPortMalloc+0x174>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 808c 	bne.w	8008232 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01c      	beq.n	800815a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008120:	2208      	movs	r2, #8
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4413      	add	r3, r2
 8008126:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f023 0307 	bic.w	r3, r3, #7
 8008138:	3308      	adds	r3, #8
 800813a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <pvPortMalloc+0x6a>
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e7fe      	b.n	8008158 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d068      	beq.n	8008232 <pvPortMalloc+0x142>
 8008160:	4b41      	ldr	r3, [pc, #260]	; (8008268 <pvPortMalloc+0x178>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d863      	bhi.n	8008232 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800816a:	4b40      	ldr	r3, [pc, #256]	; (800826c <pvPortMalloc+0x17c>)
 800816c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800816e:	4b3f      	ldr	r3, [pc, #252]	; (800826c <pvPortMalloc+0x17c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008174:	e004      	b.n	8008180 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d203      	bcs.n	8008192 <pvPortMalloc+0xa2>
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f1      	bne.n	8008176 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008192:	4b33      	ldr	r3, [pc, #204]	; (8008260 <pvPortMalloc+0x170>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008198:	429a      	cmp	r2, r3
 800819a:	d04a      	beq.n	8008232 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2208      	movs	r2, #8
 80081a2:	4413      	add	r3, r2
 80081a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	2308      	movs	r3, #8
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d91e      	bls.n	80081fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d009      	beq.n	80081e4 <pvPortMalloc+0xf4>
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e7fe      	b.n	80081e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	1ad2      	subs	r2, r2, r3
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081f6:	69b8      	ldr	r0, [r7, #24]
 80081f8:	f000 f8f6 	bl	80083e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <pvPortMalloc+0x178>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	4a18      	ldr	r2, [pc, #96]	; (8008268 <pvPortMalloc+0x178>)
 8008208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800820a:	4b17      	ldr	r3, [pc, #92]	; (8008268 <pvPortMalloc+0x178>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4b18      	ldr	r3, [pc, #96]	; (8008270 <pvPortMalloc+0x180>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d203      	bcs.n	800821e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008216:	4b14      	ldr	r3, [pc, #80]	; (8008268 <pvPortMalloc+0x178>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a15      	ldr	r2, [pc, #84]	; (8008270 <pvPortMalloc+0x180>)
 800821c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <pvPortMalloc+0x174>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	431a      	orrs	r2, r3
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008232:	f001 f98d 	bl	8009550 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <pvPortMalloc+0x164>
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e7fe      	b.n	8008252 <pvPortMalloc+0x162>
	return pvReturn;
 8008254:	69fb      	ldr	r3, [r7, #28]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3728      	adds	r7, #40	; 0x28
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20003cf8 	.word	0x20003cf8
 8008264:	20003d04 	.word	0x20003d04
 8008268:	20003cfc 	.word	0x20003cfc
 800826c:	20003cf0 	.word	0x20003cf0
 8008270:	20003d00 	.word	0x20003d00

08008274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d046      	beq.n	8008314 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008286:	2308      	movs	r3, #8
 8008288:	425b      	negs	r3, r3
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	4b20      	ldr	r3, [pc, #128]	; (800831c <vPortFree+0xa8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4013      	ands	r3, r2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <vPortFree+0x42>
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e7fe      	b.n	80082b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <vPortFree+0x5e>
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	60bb      	str	r3, [r7, #8]
 80082d0:	e7fe      	b.n	80082d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <vPortFree+0xa8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d019      	beq.n	8008314 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d115      	bne.n	8008314 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	4b0b      	ldr	r3, [pc, #44]	; (800831c <vPortFree+0xa8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082f8:	f001 f91c 	bl	8009534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <vPortFree+0xac>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4413      	add	r3, r2
 8008306:	4a06      	ldr	r2, [pc, #24]	; (8008320 <vPortFree+0xac>)
 8008308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f000 f86c 	bl	80083e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008310:	f001 f91e 	bl	8009550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008314:	bf00      	nop
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20003d04 	.word	0x20003d04
 8008320:	20003cfc 	.word	0x20003cfc

08008324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800832a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800832e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008330:	4b27      	ldr	r3, [pc, #156]	; (80083d0 <prvHeapInit+0xac>)
 8008332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3307      	adds	r3, #7
 8008342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <prvHeapInit+0xac>)
 8008354:	4413      	add	r3, r2
 8008356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800835c:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <prvHeapInit+0xb0>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <prvHeapInit+0xb0>)
 8008364:	2200      	movs	r2, #0
 8008366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4413      	add	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008370:	2208      	movs	r2, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <prvHeapInit+0xb4>)
 8008384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <prvHeapInit+0xb4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <prvHeapInit+0xb4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <prvHeapInit+0xb4>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <prvHeapInit+0xb8>)
 80083b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <prvHeapInit+0xbc>)
 80083ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <prvHeapInit+0xc0>)
 80083be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	200000f0 	.word	0x200000f0
 80083d4:	20003cf0 	.word	0x20003cf0
 80083d8:	20003cf8 	.word	0x20003cf8
 80083dc:	20003d00 	.word	0x20003d00
 80083e0:	20003cfc 	.word	0x20003cfc
 80083e4:	20003d04 	.word	0x20003d04

080083e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083f0:	4b28      	ldr	r3, [pc, #160]	; (8008494 <prvInsertBlockIntoFreeList+0xac>)
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e002      	b.n	80083fc <prvInsertBlockIntoFreeList+0x14>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d3f7      	bcc.n	80083f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	441a      	add	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d108      	bne.n	800842a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	441a      	add	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d118      	bne.n	8008470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d00d      	beq.n	8008466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e008      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <prvInsertBlockIntoFreeList+0xb0>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e003      	b.n	8008478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d002      	beq.n	8008486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20003cf0 	.word	0x20003cf0
 8008498:	20003cf8 	.word	0x20003cf8

0800849c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d109      	bne.n	80084c4 <xQueueGenericReset+0x28>
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60bb      	str	r3, [r7, #8]
 80084c2:	e7fe      	b.n	80084c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80084c4:	f7ff fcfa 	bl	8007ebc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	441a      	add	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f4:	3b01      	subs	r3, #1
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	441a      	add	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	22ff      	movs	r2, #255	; 0xff
 8008508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	22ff      	movs	r2, #255	; 0xff
 8008510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d114      	bne.n	8008544 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01a      	beq.n	8008558 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3310      	adds	r3, #16
 8008526:	4618      	mov	r0, r3
 8008528:	f001 fa0a 	bl	8009940 <xTaskRemoveFromEventList>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008532:	4b0d      	ldr	r3, [pc, #52]	; (8008568 <xQueueGenericReset+0xcc>)
 8008534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	e009      	b.n	8008558 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3310      	adds	r3, #16
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fad8 	bl	8007afe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3324      	adds	r3, #36	; 0x24
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff fad3 	bl	8007afe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008558:	f7ff fcde 	bl	8007f18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800855c:	2301      	movs	r3, #1
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	; 0x28
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d109      	bne.n	8008594 <xQueueGenericCreate+0x28>
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	e7fe      	b.n	8008592 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	e004      	b.n	80085aa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	fb02 f303 	mul.w	r3, r2, r3
 80085a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	3348      	adds	r3, #72	; 0x48
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff fd9e 	bl	80080f0 <pvPortMalloc>
 80085b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	3348      	adds	r3, #72	; 0x48
 80085c0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085c2:	79fa      	ldrb	r2, [r7, #7]
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f805 	bl	80085de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80085d4:	69bb      	ldr	r3, [r7, #24]
	}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3720      	adds	r7, #32
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d103      	bne.n	80085fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	e002      	b.n	8008600 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800860c:	2101      	movs	r1, #1
 800860e:	69b8      	ldr	r0, [r7, #24]
 8008610:	f7ff ff44 	bl	800849c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08e      	sub	sp, #56	; 0x38
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800862a:	2300      	movs	r3, #0
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	2b00      	cmp	r3, #0
 8008636:	d109      	bne.n	800864c <xQueueGenericSend+0x30>
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	62bb      	str	r3, [r7, #40]	; 0x28
 800864a:	e7fe      	b.n	800864a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <xQueueGenericSend+0x3e>
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <xQueueGenericSend+0x42>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <xQueueGenericSend+0x44>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d109      	bne.n	8008678 <xQueueGenericSend+0x5c>
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
 8008676:	e7fe      	b.n	8008676 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d103      	bne.n	8008686 <xQueueGenericSend+0x6a>
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <xQueueGenericSend+0x6e>
 8008686:	2301      	movs	r3, #1
 8008688:	e000      	b.n	800868c <xQueueGenericSend+0x70>
 800868a:	2300      	movs	r3, #0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d109      	bne.n	80086a4 <xQueueGenericSend+0x88>
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	e7fe      	b.n	80086a2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086a4:	f001 faea 	bl	8009c7c <xTaskGetSchedulerState>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <xQueueGenericSend+0x98>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <xQueueGenericSend+0x9c>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <xQueueGenericSend+0x9e>
 80086b8:	2300      	movs	r3, #0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <xQueueGenericSend+0xb6>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e7fe      	b.n	80086d0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086d2:	f7ff fbf3 	bl	8007ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	429a      	cmp	r2, r3
 80086e0:	d302      	bcc.n	80086e8 <xQueueGenericSend+0xcc>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d129      	bne.n	800873c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ee:	f000 fc43 	bl	8008f78 <prvCopyDataToQueue>
 80086f2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d010      	beq.n	800871e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	3324      	adds	r3, #36	; 0x24
 8008700:	4618      	mov	r0, r3
 8008702:	f001 f91d 	bl	8009940 <xTaskRemoveFromEventList>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d013      	beq.n	8008734 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800870c:	4b3f      	ldr	r3, [pc, #252]	; (800880c <xQueueGenericSend+0x1f0>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	e00a      	b.n	8008734 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d007      	beq.n	8008734 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008724:	4b39      	ldr	r3, [pc, #228]	; (800880c <xQueueGenericSend+0x1f0>)
 8008726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008734:	f7ff fbf0 	bl	8007f18 <vPortExitCritical>
				return pdPASS;
 8008738:	2301      	movs	r3, #1
 800873a:	e063      	b.n	8008804 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008742:	f7ff fbe9 	bl	8007f18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008746:	2300      	movs	r3, #0
 8008748:	e05c      	b.n	8008804 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008750:	f107 0314 	add.w	r3, r7, #20
 8008754:	4618      	mov	r0, r3
 8008756:	f001 f955 	bl	8009a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800875a:	2301      	movs	r3, #1
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800875e:	f7ff fbdb 	bl	8007f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008762:	f000 fee7 	bl	8009534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008766:	f7ff fba9 	bl	8007ebc <vPortEnterCritical>
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008770:	b25b      	sxtb	r3, r3
 8008772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008776:	d103      	bne.n	8008780 <xQueueGenericSend+0x164>
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008786:	b25b      	sxtb	r3, r3
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878c:	d103      	bne.n	8008796 <xQueueGenericSend+0x17a>
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008796:	f7ff fbbf 	bl	8007f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800879a:	1d3a      	adds	r2, r7, #4
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 f944 	bl	8009a30 <xTaskCheckForTimeOut>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d124      	bne.n	80087f8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087b0:	f000 fcda 	bl	8009168 <prvIsQueueFull>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d018      	beq.n	80087ec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	3310      	adds	r3, #16
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 f898 	bl	80098f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ca:	f000 fc65 	bl	8009098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087ce:	f000 febf 	bl	8009550 <xTaskResumeAll>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f47f af7c 	bne.w	80086d2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80087da:	4b0c      	ldr	r3, [pc, #48]	; (800880c <xQueueGenericSend+0x1f0>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	e772      	b.n	80086d2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ee:	f000 fc53 	bl	8009098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087f2:	f000 fead 	bl	8009550 <xTaskResumeAll>
 80087f6:	e76c      	b.n	80086d2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087fa:	f000 fc4d 	bl	8009098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087fe:	f000 fea7 	bl	8009550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008802:	2300      	movs	r3, #0
		}
	}
}
 8008804:	4618      	mov	r0, r3
 8008806:	3738      	adds	r7, #56	; 0x38
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08e      	sub	sp, #56	; 0x38
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <xQueueGenericSendFromISR+0x2c>
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
 800883a:	e7fe      	b.n	800883a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d103      	bne.n	800884a <xQueueGenericSendFromISR+0x3a>
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <xQueueGenericSendFromISR+0x3e>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <xQueueGenericSendFromISR+0x40>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d109      	bne.n	8008868 <xQueueGenericSendFromISR+0x58>
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	623b      	str	r3, [r7, #32]
 8008866:	e7fe      	b.n	8008866 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d103      	bne.n	8008876 <xQueueGenericSendFromISR+0x66>
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008872:	2b01      	cmp	r3, #1
 8008874:	d101      	bne.n	800887a <xQueueGenericSendFromISR+0x6a>
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <xQueueGenericSendFromISR+0x6c>
 800887a:	2300      	movs	r3, #0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d109      	bne.n	8008894 <xQueueGenericSendFromISR+0x84>
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	61fb      	str	r3, [r7, #28]
 8008892:	e7fe      	b.n	8008892 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008894:	f7ff fbee 	bl	8008074 <vPortValidateInterruptPriority>
	__asm volatile
 8008898:	f3ef 8211 	mrs	r2, BASEPRI
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	61ba      	str	r2, [r7, #24]
 80088ae:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80088b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	429a      	cmp	r2, r3
 80088be:	d302      	bcc.n	80088c6 <xQueueGenericSendFromISR+0xb6>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d12c      	bne.n	8008920 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088d6:	f000 fb4f 	bl	8008f78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d112      	bne.n	800890a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d016      	beq.n	800891a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	3324      	adds	r3, #36	; 0x24
 80088f0:	4618      	mov	r0, r3
 80088f2:	f001 f825 	bl	8009940 <xTaskRemoveFromEventList>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00e      	beq.n	800891a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00b      	beq.n	800891a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	e007      	b.n	800891a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800890a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800890e:	3301      	adds	r3, #1
 8008910:	b2db      	uxtb	r3, r3
 8008912:	b25a      	sxtb	r2, r3
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800891a:	2301      	movs	r3, #1
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800891e:	e001      	b.n	8008924 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008930:	4618      	mov	r0, r3
 8008932:	3738      	adds	r7, #56	; 0x38
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08e      	sub	sp, #56	; 0x38
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	2b00      	cmp	r3, #0
 800894a:	d109      	bne.n	8008960 <xQueueGiveFromISR+0x28>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	623b      	str	r3, [r7, #32]
 800895e:	e7fe      	b.n	800895e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d009      	beq.n	800897c <xQueueGiveFromISR+0x44>
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	e7fe      	b.n	800897a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d103      	bne.n	800898c <xQueueGiveFromISR+0x54>
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <xQueueGiveFromISR+0x58>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <xQueueGiveFromISR+0x5a>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <xQueueGiveFromISR+0x72>
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	e7fe      	b.n	80089a8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089aa:	f7ff fb63 	bl	8008074 <vPortValidateInterruptPriority>
	__asm volatile
 80089ae:	f3ef 8211 	mrs	r2, BASEPRI
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	617a      	str	r2, [r7, #20]
 80089c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80089c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d92b      	bls.n	8008a32 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f4:	d112      	bne.n	8008a1c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	3324      	adds	r3, #36	; 0x24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 ff9c 	bl	8009940 <xTaskRemoveFromEventList>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00e      	beq.n	8008a2c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e007      	b.n	8008a2c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a20:	3301      	adds	r3, #1
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	b25a      	sxtb	r2, r3
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a30:	e001      	b.n	8008a36 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3738      	adds	r7, #56	; 0x38
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08c      	sub	sp, #48	; 0x30
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d109      	bne.n	8008a7a <xQueueReceive+0x2e>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	623b      	str	r3, [r7, #32]
 8008a78:	e7fe      	b.n	8008a78 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <xQueueReceive+0x3c>
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <xQueueReceive+0x40>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <xQueueReceive+0x42>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <xQueueReceive+0x5a>
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	e7fe      	b.n	8008aa4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aa6:	f001 f8e9 	bl	8009c7c <xTaskGetSchedulerState>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <xQueueReceive+0x6a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <xQueueReceive+0x6e>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e000      	b.n	8008abc <xQueueReceive+0x70>
 8008aba:	2300      	movs	r3, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <xQueueReceive+0x88>
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	61bb      	str	r3, [r7, #24]
 8008ad2:	e7fe      	b.n	8008ad2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ad4:	f7ff f9f2 	bl	8007ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01f      	beq.n	8008b24 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ae8:	f000 fab0 	bl	800904c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	1e5a      	subs	r2, r3, #1
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00f      	beq.n	8008b1c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	3310      	adds	r3, #16
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 ff1d 	bl	8009940 <xTaskRemoveFromEventList>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b0c:	4b3c      	ldr	r3, [pc, #240]	; (8008c00 <xQueueReceive+0x1b4>)
 8008b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b1c:	f7ff f9fc 	bl	8007f18 <vPortExitCritical>
				return pdPASS;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e069      	b.n	8008bf8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d103      	bne.n	8008b32 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b2a:	f7ff f9f5 	bl	8007f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e062      	b.n	8008bf8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d106      	bne.n	8008b46 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b38:	f107 0310 	add.w	r3, r7, #16
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 ff61 	bl	8009a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b42:	2301      	movs	r3, #1
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b46:	f7ff f9e7 	bl	8007f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b4a:	f000 fcf3 	bl	8009534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b4e:	f7ff f9b5 	bl	8007ebc <vPortEnterCritical>
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d103      	bne.n	8008b68 <xQueueReceive+0x11c>
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b6e:	b25b      	sxtb	r3, r3
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d103      	bne.n	8008b7e <xQueueReceive+0x132>
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b7e:	f7ff f9cb 	bl	8007f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b82:	1d3a      	adds	r2, r7, #4
 8008b84:	f107 0310 	add.w	r3, r7, #16
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 ff50 	bl	8009a30 <xTaskCheckForTimeOut>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d123      	bne.n	8008bde <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b98:	f000 fad0 	bl	800913c <prvIsQueueEmpty>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d017      	beq.n	8008bd2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	3324      	adds	r3, #36	; 0x24
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fea4 	bl	80098f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb2:	f000 fa71 	bl	8009098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bb6:	f000 fccb 	bl	8009550 <xTaskResumeAll>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d189      	bne.n	8008ad4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008bc0:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <xQueueReceive+0x1b4>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	e780      	b.n	8008ad4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd4:	f000 fa60 	bl	8009098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bd8:	f000 fcba 	bl	8009550 <xTaskResumeAll>
 8008bdc:	e77a      	b.n	8008ad4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be0:	f000 fa5a 	bl	8009098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008be4:	f000 fcb4 	bl	8009550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bea:	f000 faa7 	bl	800913c <prvIsQueueEmpty>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f43f af6f 	beq.w	8008ad4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bf6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3730      	adds	r7, #48	; 0x30
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08e      	sub	sp, #56	; 0x38
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <xQueueSemaphoreTake+0x30>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	623b      	str	r3, [r7, #32]
 8008c32:	e7fe      	b.n	8008c32 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <xQueueSemaphoreTake+0x4c>
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	61fb      	str	r3, [r7, #28]
 8008c4e:	e7fe      	b.n	8008c4e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c50:	f001 f814 	bl	8009c7c <xTaskGetSchedulerState>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <xQueueSemaphoreTake+0x5c>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <xQueueSemaphoreTake+0x60>
 8008c60:	2301      	movs	r3, #1
 8008c62:	e000      	b.n	8008c66 <xQueueSemaphoreTake+0x62>
 8008c64:	2300      	movs	r3, #0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <xQueueSemaphoreTake+0x7a>
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	e7fe      	b.n	8008c7c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c7e:	f7ff f91d 	bl	8007ebc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d024      	beq.n	8008cd8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	1e5a      	subs	r2, r3, #1
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d104      	bne.n	8008ca8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008c9e:	f001 f9b3 	bl	800a008 <pvTaskIncrementMutexHeldCount>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00f      	beq.n	8008cd0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	3310      	adds	r3, #16
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fe43 	bl	8009940 <xTaskRemoveFromEventList>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cc0:	4b53      	ldr	r3, [pc, #332]	; (8008e10 <xQueueSemaphoreTake+0x20c>)
 8008cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cd0:	f7ff f922 	bl	8007f18 <vPortExitCritical>
				return pdPASS;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e096      	b.n	8008e06 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d110      	bne.n	8008d00 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d009      	beq.n	8008cf8 <xQueueSemaphoreTake+0xf4>
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	e7fe      	b.n	8008cf6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008cf8:	f7ff f90e 	bl	8007f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e082      	b.n	8008e06 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d06:	f107 030c 	add.w	r3, r7, #12
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fe7a 	bl	8009a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d14:	f7ff f900 	bl	8007f18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d18:	f000 fc0c 	bl	8009534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d1c:	f7ff f8ce 	bl	8007ebc <vPortEnterCritical>
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d26:	b25b      	sxtb	r3, r3
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d103      	bne.n	8008d36 <xQueueSemaphoreTake+0x132>
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d103      	bne.n	8008d4c <xQueueSemaphoreTake+0x148>
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d4c:	f7ff f8e4 	bl	8007f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d50:	463a      	mov	r2, r7
 8008d52:	f107 030c 	add.w	r3, r7, #12
 8008d56:	4611      	mov	r1, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fe69 	bl	8009a30 <xTaskCheckForTimeOut>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d132      	bne.n	8008dca <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d66:	f000 f9e9 	bl	800913c <prvIsQueueEmpty>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d026      	beq.n	8008dbe <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008d78:	f7ff f8a0 	bl	8007ebc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 ff99 	bl	8009cb8 <xTaskPriorityInherit>
 8008d86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d88:	f7ff f8c6 	bl	8007f18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	3324      	adds	r3, #36	; 0x24
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 fdaf 	bl	80098f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d9c:	f000 f97c 	bl	8009098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008da0:	f000 fbd6 	bl	8009550 <xTaskResumeAll>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f47f af69 	bne.w	8008c7e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008dac:	4b18      	ldr	r3, [pc, #96]	; (8008e10 <xQueueSemaphoreTake+0x20c>)
 8008dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	e75f      	b.n	8008c7e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dc0:	f000 f96a 	bl	8009098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dc4:	f000 fbc4 	bl	8009550 <xTaskResumeAll>
 8008dc8:	e759      	b.n	8008c7e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008dca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dcc:	f000 f964 	bl	8009098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dd0:	f000 fbbe 	bl	8009550 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dd6:	f000 f9b1 	bl	800913c <prvIsQueueEmpty>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f43f af4e 	beq.w	8008c7e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00d      	beq.n	8008e04 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008de8:	f7ff f868 	bl	8007ebc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008dec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dee:	f000 f8ab 	bl	8008f48 <prvGetDisinheritPriorityAfterTimeout>
 8008df2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 f866 	bl	8009ecc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e00:	f7ff f88a 	bl	8007f18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3738      	adds	r7, #56	; 0x38
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08e      	sub	sp, #56	; 0x38
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <xQueueReceiveFromISR+0x2a>
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	623b      	str	r3, [r7, #32]
 8008e3c:	e7fe      	b.n	8008e3c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d103      	bne.n	8008e4c <xQueueReceiveFromISR+0x38>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <xQueueReceiveFromISR+0x3c>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <xQueueReceiveFromISR+0x3e>
 8008e50:	2300      	movs	r3, #0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <xQueueReceiveFromISR+0x56>
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	61fb      	str	r3, [r7, #28]
 8008e68:	e7fe      	b.n	8008e68 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e6a:	f7ff f903 	bl	8008074 <vPortValidateInterruptPriority>
	__asm volatile
 8008e6e:	f3ef 8211 	mrs	r2, BASEPRI
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	61ba      	str	r2, [r7, #24]
 8008e84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d02f      	beq.n	8008ef6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ea0:	68b9      	ldr	r1, [r7, #8]
 8008ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea4:	f000 f8d2 	bl	800904c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eaa:	1e5a      	subs	r2, r3, #1
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008eb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb8:	d112      	bne.n	8008ee0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d016      	beq.n	8008ef0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	3310      	adds	r3, #16
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fd3a 	bl	8009940 <xTaskRemoveFromEventList>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00e      	beq.n	8008ef0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e007      	b.n	8008ef0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	b25a      	sxtb	r2, r3
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef4:	e001      	b.n	8008efa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3738      	adds	r7, #56	; 0x38
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <vQueueDelete+0x26>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	60bb      	str	r3, [r7, #8]
 8008f32:	e7fe      	b.n	8008f32 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f92f 	bl	8009198 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7ff f99a 	bl	8008274 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f1c3 0307 	rsb	r3, r3, #7
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e001      	b.n	8008f6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
	}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d14d      	bne.n	800903a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 ff0e 	bl	8009dc4 <xTaskPriorityDisinherit>
 8008fa8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	605a      	str	r2, [r3, #4]
 8008fb0:	e043      	b.n	800903a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d119      	bne.n	8008fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6898      	ldr	r0, [r3, #8]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	f002 f846 	bl	800b054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d32b      	bcc.n	800903a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	609a      	str	r2, [r3, #8]
 8008fea:	e026      	b.n	800903a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68d8      	ldr	r0, [r3, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	f002 f82c 	bl	800b054 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	425b      	negs	r3, r3
 8009006:	441a      	add	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d207      	bcs.n	8009028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	425b      	negs	r3, r3
 8009022:	441a      	add	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d105      	bne.n	800903a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	3b01      	subs	r3, #1
 8009038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009042:	697b      	ldr	r3, [r7, #20]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d018      	beq.n	8009090 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	441a      	add	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d303      	bcc.n	8009080 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68d9      	ldr	r1, [r3, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	461a      	mov	r2, r3
 800908a:	6838      	ldr	r0, [r7, #0]
 800908c:	f001 ffe2 	bl	800b054 <memcpy>
	}
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090a0:	f7fe ff0c 	bl	8007ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090ac:	e011      	b.n	80090d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d012      	beq.n	80090dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3324      	adds	r3, #36	; 0x24
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 fc40 	bl	8009940 <xTaskRemoveFromEventList>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090c6:	f000 fd13 	bl	8009af0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dce9      	bgt.n	80090ae <prvUnlockQueue+0x16>
 80090da:	e000      	b.n	80090de <prvUnlockQueue+0x46>
					break;
 80090dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	22ff      	movs	r2, #255	; 0xff
 80090e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090e6:	f7fe ff17 	bl	8007f18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090ea:	f7fe fee7 	bl	8007ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090f6:	e011      	b.n	800911c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d012      	beq.n	8009126 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3310      	adds	r3, #16
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fc1b 	bl	8009940 <xTaskRemoveFromEventList>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009110:	f000 fcee 	bl	8009af0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	3b01      	subs	r3, #1
 8009118:	b2db      	uxtb	r3, r3
 800911a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800911c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009120:	2b00      	cmp	r3, #0
 8009122:	dce9      	bgt.n	80090f8 <prvUnlockQueue+0x60>
 8009124:	e000      	b.n	8009128 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009126:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	22ff      	movs	r2, #255	; 0xff
 800912c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009130:	f7fe fef2 	bl	8007f18 <vPortExitCritical>
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009144:	f7fe feba 	bl	8007ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009150:	2301      	movs	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e001      	b.n	800915a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800915a:	f7fe fedd 	bl	8007f18 <vPortExitCritical>

	return xReturn;
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009170:	f7fe fea4 	bl	8007ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917c:	429a      	cmp	r2, r3
 800917e:	d102      	bne.n	8009186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009180:	2301      	movs	r3, #1
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e001      	b.n	800918a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800918a:	f7fe fec5 	bl	8007f18 <vPortExitCritical>

	return xReturn;
 800918e:	68fb      	ldr	r3, [r7, #12]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e016      	b.n	80091d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80091a6:	4a10      	ldr	r2, [pc, #64]	; (80091e8 <vQueueUnregisterQueue+0x50>)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	4413      	add	r3, r2
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d10b      	bne.n	80091ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80091b6:	4a0c      	ldr	r2, [pc, #48]	; (80091e8 <vQueueUnregisterQueue+0x50>)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2100      	movs	r1, #0
 80091bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80091c0:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <vQueueUnregisterQueue+0x50>)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	4413      	add	r3, r2
 80091c8:	2200      	movs	r2, #0
 80091ca:	605a      	str	r2, [r3, #4]
				break;
 80091cc:	e005      	b.n	80091da <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3301      	adds	r3, #1
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b07      	cmp	r3, #7
 80091d8:	d9e5      	bls.n	80091a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20004048 	.word	0x20004048

080091ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08c      	sub	sp, #48	; 0x30
 80091f0:	af04      	add	r7, sp, #16
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4618      	mov	r0, r3
 8009202:	f7fe ff75 	bl	80080f0 <pvPortMalloc>
 8009206:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00e      	beq.n	800922c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800920e:	2054      	movs	r0, #84	; 0x54
 8009210:	f7fe ff6e 	bl	80080f0 <pvPortMalloc>
 8009214:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	631a      	str	r2, [r3, #48]	; 0x30
 8009222:	e005      	b.n	8009230 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009224:	6978      	ldr	r0, [r7, #20]
 8009226:	f7ff f825 	bl	8008274 <vPortFree>
 800922a:	e001      	b.n	8009230 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d013      	beq.n	800925e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009236:	88fa      	ldrh	r2, [r7, #6]
 8009238:	2300      	movs	r3, #0
 800923a:	9303      	str	r3, [sp, #12]
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f80e 	bl	800926e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009252:	69f8      	ldr	r0, [r7, #28]
 8009254:	f000 f88a 	bl	800936c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009258:	2301      	movs	r3, #1
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	e002      	b.n	8009264 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800925e:	f04f 33ff 	mov.w	r3, #4294967295
 8009262:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009264:	69bb      	ldr	r3, [r7, #24]
	}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b088      	sub	sp, #32
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009286:	3b01      	subs	r3, #1
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	f023 0307 	bic.w	r3, r3, #7
 8009294:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	f003 0307 	and.w	r3, r3, #7
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <prvInitialiseNewTask+0x46>
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	e7fe      	b.n	80092b2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	e012      	b.n	80092e0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	4413      	add	r3, r2
 80092c0:	7819      	ldrb	r1, [r3, #0]
 80092c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	4413      	add	r3, r2
 80092c8:	3334      	adds	r3, #52	; 0x34
 80092ca:	460a      	mov	r2, r1
 80092cc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	4413      	add	r3, r2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	3301      	adds	r3, #1
 80092de:	61fb      	str	r3, [r7, #28]
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	2b0f      	cmp	r3, #15
 80092e4:	d9e9      	bls.n	80092ba <prvInitialiseNewTask+0x4c>
 80092e6:	e000      	b.n	80092ea <prvInitialiseNewTask+0x7c>
		{
			break;
 80092e8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	2b06      	cmp	r3, #6
 80092f6:	d901      	bls.n	80092fc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092f8:	2306      	movs	r3, #6
 80092fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009306:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	2200      	movs	r2, #0
 800930c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	3304      	adds	r3, #4
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fc13 	bl	8007b3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	3318      	adds	r3, #24
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe fc0e 	bl	8007b3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	f1c3 0207 	rsb	r2, r3, #7
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933a:	2200      	movs	r2, #0
 800933c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	68f9      	ldr	r1, [r7, #12]
 800934a:	69b8      	ldr	r0, [r7, #24]
 800934c:	f7fe fc8c 	bl	8007c68 <pxPortInitialiseStack>
 8009350:	4602      	mov	r2, r0
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009362:	bf00      	nop
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009374:	f7fe fda2 	bl	8007ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009378:	4b2a      	ldr	r3, [pc, #168]	; (8009424 <prvAddNewTaskToReadyList+0xb8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3301      	adds	r3, #1
 800937e:	4a29      	ldr	r2, [pc, #164]	; (8009424 <prvAddNewTaskToReadyList+0xb8>)
 8009380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009382:	4b29      	ldr	r3, [pc, #164]	; (8009428 <prvAddNewTaskToReadyList+0xbc>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800938a:	4a27      	ldr	r2, [pc, #156]	; (8009428 <prvAddNewTaskToReadyList+0xbc>)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009390:	4b24      	ldr	r3, [pc, #144]	; (8009424 <prvAddNewTaskToReadyList+0xb8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d110      	bne.n	80093ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009398:	f000 fbce 	bl	8009b38 <prvInitialiseTaskLists>
 800939c:	e00d      	b.n	80093ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800939e:	4b23      	ldr	r3, [pc, #140]	; (800942c <prvAddNewTaskToReadyList+0xc0>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093a6:	4b20      	ldr	r3, [pc, #128]	; (8009428 <prvAddNewTaskToReadyList+0xbc>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d802      	bhi.n	80093ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <prvAddNewTaskToReadyList+0xbc>)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093ba:	4b1d      	ldr	r3, [pc, #116]	; (8009430 <prvAddNewTaskToReadyList+0xc4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3301      	adds	r3, #1
 80093c0:	4a1b      	ldr	r2, [pc, #108]	; (8009430 <prvAddNewTaskToReadyList+0xc4>)
 80093c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	2201      	movs	r2, #1
 80093ca:	409a      	lsls	r2, r3
 80093cc:	4b19      	ldr	r3, [pc, #100]	; (8009434 <prvAddNewTaskToReadyList+0xc8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	4a18      	ldr	r2, [pc, #96]	; (8009434 <prvAddNewTaskToReadyList+0xc8>)
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4a15      	ldr	r2, [pc, #84]	; (8009438 <prvAddNewTaskToReadyList+0xcc>)
 80093e4:	441a      	add	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f7fe fbb3 	bl	8007b58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093f2:	f7fe fd91 	bl	8007f18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093f6:	4b0d      	ldr	r3, [pc, #52]	; (800942c <prvAddNewTaskToReadyList+0xc0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00e      	beq.n	800941c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093fe:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <prvAddNewTaskToReadyList+0xbc>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	429a      	cmp	r2, r3
 800940a:	d207      	bcs.n	800941c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800940c:	4b0b      	ldr	r3, [pc, #44]	; (800943c <prvAddNewTaskToReadyList+0xd0>)
 800940e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20003e08 	.word	0x20003e08
 8009428:	20003d08 	.word	0x20003d08
 800942c:	20003e14 	.word	0x20003e14
 8009430:	20003e24 	.word	0x20003e24
 8009434:	20003e10 	.word	0x20003e10
 8009438:	20003d0c 	.word	0x20003d0c
 800943c:	e000ed04 	.word	0xe000ed04

08009440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d016      	beq.n	8009480 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009452:	4b13      	ldr	r3, [pc, #76]	; (80094a0 <vTaskDelay+0x60>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d009      	beq.n	800946e <vTaskDelay+0x2e>
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	60bb      	str	r3, [r7, #8]
 800946c:	e7fe      	b.n	800946c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800946e:	f000 f861 	bl	8009534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fddb 	bl	800a030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800947a:	f000 f869 	bl	8009550 <xTaskResumeAll>
 800947e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d107      	bne.n	8009496 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009486:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <vTaskDelay+0x64>)
 8009488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009496:	bf00      	nop
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20003e30 	.word	0x20003e30
 80094a4:	e000ed04 	.word	0xe000ed04

080094a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80094ae:	4b1b      	ldr	r3, [pc, #108]	; (800951c <vTaskStartScheduler+0x74>)
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	2300      	movs	r3, #0
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	2300      	movs	r3, #0
 80094b8:	2280      	movs	r2, #128	; 0x80
 80094ba:	4919      	ldr	r1, [pc, #100]	; (8009520 <vTaskStartScheduler+0x78>)
 80094bc:	4819      	ldr	r0, [pc, #100]	; (8009524 <vTaskStartScheduler+0x7c>)
 80094be:	f7ff fe95 	bl	80091ec <xTaskCreate>
 80094c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d115      	bne.n	80094f6 <vTaskStartScheduler+0x4e>
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094dc:	4b12      	ldr	r3, [pc, #72]	; (8009528 <vTaskStartScheduler+0x80>)
 80094de:	f04f 32ff 	mov.w	r2, #4294967295
 80094e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094e4:	4b11      	ldr	r3, [pc, #68]	; (800952c <vTaskStartScheduler+0x84>)
 80094e6:	2201      	movs	r2, #1
 80094e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80094ea:	4b11      	ldr	r3, [pc, #68]	; (8009530 <vTaskStartScheduler+0x88>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094f0:	f7fe fc46 	bl	8007d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094f4:	e00d      	b.n	8009512 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fc:	d109      	bne.n	8009512 <vTaskStartScheduler+0x6a>
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	607b      	str	r3, [r7, #4]
 8009510:	e7fe      	b.n	8009510 <vTaskStartScheduler+0x68>
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20003e2c 	.word	0x20003e2c
 8009520:	0800b258 	.word	0x0800b258
 8009524:	08009b09 	.word	0x08009b09
 8009528:	20003e28 	.word	0x20003e28
 800952c:	20003e14 	.word	0x20003e14
 8009530:	20003e0c 	.word	0x20003e0c

08009534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009538:	4b04      	ldr	r3, [pc, #16]	; (800954c <vTaskSuspendAll+0x18>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3301      	adds	r3, #1
 800953e:	4a03      	ldr	r2, [pc, #12]	; (800954c <vTaskSuspendAll+0x18>)
 8009540:	6013      	str	r3, [r2, #0]
}
 8009542:	bf00      	nop
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	20003e30 	.word	0x20003e30

08009550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009556:	2300      	movs	r3, #0
 8009558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800955e:	4b41      	ldr	r3, [pc, #260]	; (8009664 <xTaskResumeAll+0x114>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <xTaskResumeAll+0x2a>
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	e7fe      	b.n	8009578 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800957a:	f7fe fc9f 	bl	8007ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800957e:	4b39      	ldr	r3, [pc, #228]	; (8009664 <xTaskResumeAll+0x114>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3b01      	subs	r3, #1
 8009584:	4a37      	ldr	r2, [pc, #220]	; (8009664 <xTaskResumeAll+0x114>)
 8009586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009588:	4b36      	ldr	r3, [pc, #216]	; (8009664 <xTaskResumeAll+0x114>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d161      	bne.n	8009654 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009590:	4b35      	ldr	r3, [pc, #212]	; (8009668 <xTaskResumeAll+0x118>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d05d      	beq.n	8009654 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009598:	e02e      	b.n	80095f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800959a:	4b34      	ldr	r3, [pc, #208]	; (800966c <xTaskResumeAll+0x11c>)
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3318      	adds	r3, #24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fb33 	bl	8007c12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fb2e 	bl	8007c12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ba:	2201      	movs	r2, #1
 80095bc:	409a      	lsls	r2, r3
 80095be:	4b2c      	ldr	r3, [pc, #176]	; (8009670 <xTaskResumeAll+0x120>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	4a2a      	ldr	r2, [pc, #168]	; (8009670 <xTaskResumeAll+0x120>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095cc:	4613      	mov	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4a27      	ldr	r2, [pc, #156]	; (8009674 <xTaskResumeAll+0x124>)
 80095d6:	441a      	add	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3304      	adds	r3, #4
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fe faba 	bl	8007b58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e8:	4b23      	ldr	r3, [pc, #140]	; (8009678 <xTaskResumeAll+0x128>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d302      	bcc.n	80095f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80095f2:	4b22      	ldr	r3, [pc, #136]	; (800967c <xTaskResumeAll+0x12c>)
 80095f4:	2201      	movs	r2, #1
 80095f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095f8:	4b1c      	ldr	r3, [pc, #112]	; (800966c <xTaskResumeAll+0x11c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1cc      	bne.n	800959a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009606:	f000 fb13 	bl	8009c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800960a:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <xTaskResumeAll+0x130>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d010      	beq.n	8009638 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009616:	f000 f859 	bl	80096cc <xTaskIncrementTick>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009620:	4b16      	ldr	r3, [pc, #88]	; (800967c <xTaskResumeAll+0x12c>)
 8009622:	2201      	movs	r2, #1
 8009624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3b01      	subs	r3, #1
 800962a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f1      	bne.n	8009616 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <xTaskResumeAll+0x130>)
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009638:	4b10      	ldr	r3, [pc, #64]	; (800967c <xTaskResumeAll+0x12c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d009      	beq.n	8009654 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009640:	2301      	movs	r3, #1
 8009642:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009644:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <xTaskResumeAll+0x134>)
 8009646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009654:	f7fe fc60 	bl	8007f18 <vPortExitCritical>

	return xAlreadyYielded;
 8009658:	68bb      	ldr	r3, [r7, #8]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20003e30 	.word	0x20003e30
 8009668:	20003e08 	.word	0x20003e08
 800966c:	20003dc8 	.word	0x20003dc8
 8009670:	20003e10 	.word	0x20003e10
 8009674:	20003d0c 	.word	0x20003d0c
 8009678:	20003d08 	.word	0x20003d08
 800967c:	20003e1c 	.word	0x20003e1c
 8009680:	20003e18 	.word	0x20003e18
 8009684:	e000ed04 	.word	0xe000ed04

08009688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800968e:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <xTaskGetTickCount+0x1c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009694:	687b      	ldr	r3, [r7, #4]
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20003e0c 	.word	0x20003e0c

080096a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096ae:	f7fe fce1 	bl	8008074 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80096b2:	2300      	movs	r3, #0
 80096b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80096b6:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <xTaskGetTickCountFromISR+0x20>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096bc:	683b      	ldr	r3, [r7, #0]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20003e0c 	.word	0x20003e0c

080096cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d6:	4b50      	ldr	r3, [pc, #320]	; (8009818 <xTaskIncrementTick+0x14c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f040 808c 	bne.w	80097f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096e0:	4b4e      	ldr	r3, [pc, #312]	; (800981c <xTaskIncrementTick+0x150>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096e8:	4a4c      	ldr	r2, [pc, #304]	; (800981c <xTaskIncrementTick+0x150>)
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d11f      	bne.n	8009734 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80096f4:	4b4a      	ldr	r3, [pc, #296]	; (8009820 <xTaskIncrementTick+0x154>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <xTaskIncrementTick+0x46>
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	e7fe      	b.n	8009710 <xTaskIncrementTick+0x44>
 8009712:	4b43      	ldr	r3, [pc, #268]	; (8009820 <xTaskIncrementTick+0x154>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	4b42      	ldr	r3, [pc, #264]	; (8009824 <xTaskIncrementTick+0x158>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a40      	ldr	r2, [pc, #256]	; (8009820 <xTaskIncrementTick+0x154>)
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	4a40      	ldr	r2, [pc, #256]	; (8009824 <xTaskIncrementTick+0x158>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	4b40      	ldr	r3, [pc, #256]	; (8009828 <xTaskIncrementTick+0x15c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3301      	adds	r3, #1
 800972c:	4a3e      	ldr	r2, [pc, #248]	; (8009828 <xTaskIncrementTick+0x15c>)
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	f000 fa7e 	bl	8009c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009734:	4b3d      	ldr	r3, [pc, #244]	; (800982c <xTaskIncrementTick+0x160>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	429a      	cmp	r2, r3
 800973c:	d34d      	bcc.n	80097da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800973e:	4b38      	ldr	r3, [pc, #224]	; (8009820 <xTaskIncrementTick+0x154>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <xTaskIncrementTick+0x80>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <xTaskIncrementTick+0x82>
 800974c:	2300      	movs	r3, #0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d004      	beq.n	800975c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009752:	4b36      	ldr	r3, [pc, #216]	; (800982c <xTaskIncrementTick+0x160>)
 8009754:	f04f 32ff 	mov.w	r2, #4294967295
 8009758:	601a      	str	r2, [r3, #0]
					break;
 800975a:	e03e      	b.n	80097da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800975c:	4b30      	ldr	r3, [pc, #192]	; (8009820 <xTaskIncrementTick+0x154>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d203      	bcs.n	800977c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009774:	4a2d      	ldr	r2, [pc, #180]	; (800982c <xTaskIncrementTick+0x160>)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6013      	str	r3, [r2, #0]
						break;
 800977a:	e02e      	b.n	80097da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fa46 	bl	8007c12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	3318      	adds	r3, #24
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fa3d 	bl	8007c12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	2201      	movs	r2, #1
 800979e:	409a      	lsls	r2, r3
 80097a0:	4b23      	ldr	r3, [pc, #140]	; (8009830 <xTaskIncrementTick+0x164>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	4a22      	ldr	r2, [pc, #136]	; (8009830 <xTaskIncrementTick+0x164>)
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4a1f      	ldr	r2, [pc, #124]	; (8009834 <xTaskIncrementTick+0x168>)
 80097b8:	441a      	add	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	3304      	adds	r3, #4
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fe f9c9 	bl	8007b58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ca:	4b1b      	ldr	r3, [pc, #108]	; (8009838 <xTaskIncrementTick+0x16c>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d3b4      	bcc.n	800973e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80097d4:	2301      	movs	r3, #1
 80097d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097d8:	e7b1      	b.n	800973e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097da:	4b17      	ldr	r3, [pc, #92]	; (8009838 <xTaskIncrementTick+0x16c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e0:	4914      	ldr	r1, [pc, #80]	; (8009834 <xTaskIncrementTick+0x168>)
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	440b      	add	r3, r1
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d907      	bls.n	8009802 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80097f2:	2301      	movs	r3, #1
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	e004      	b.n	8009802 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80097f8:	4b10      	ldr	r3, [pc, #64]	; (800983c <xTaskIncrementTick+0x170>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	4a0f      	ldr	r2, [pc, #60]	; (800983c <xTaskIncrementTick+0x170>)
 8009800:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009802:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <xTaskIncrementTick+0x174>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800980a:	2301      	movs	r3, #1
 800980c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800980e:	697b      	ldr	r3, [r7, #20]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20003e30 	.word	0x20003e30
 800981c:	20003e0c 	.word	0x20003e0c
 8009820:	20003dc0 	.word	0x20003dc0
 8009824:	20003dc4 	.word	0x20003dc4
 8009828:	20003e20 	.word	0x20003e20
 800982c:	20003e28 	.word	0x20003e28
 8009830:	20003e10 	.word	0x20003e10
 8009834:	20003d0c 	.word	0x20003d0c
 8009838:	20003d08 	.word	0x20003d08
 800983c:	20003e18 	.word	0x20003e18
 8009840:	20003e1c 	.word	0x20003e1c

08009844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800984a:	4b26      	ldr	r3, [pc, #152]	; (80098e4 <vTaskSwitchContext+0xa0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009852:	4b25      	ldr	r3, [pc, #148]	; (80098e8 <vTaskSwitchContext+0xa4>)
 8009854:	2201      	movs	r2, #1
 8009856:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009858:	e03e      	b.n	80098d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800985a:	4b23      	ldr	r3, [pc, #140]	; (80098e8 <vTaskSwitchContext+0xa4>)
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009860:	4b22      	ldr	r3, [pc, #136]	; (80098ec <vTaskSwitchContext+0xa8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	fab3 f383 	clz	r3, r3
 800986c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	f1c3 031f 	rsb	r3, r3, #31
 8009874:	617b      	str	r3, [r7, #20]
 8009876:	491e      	ldr	r1, [pc, #120]	; (80098f0 <vTaskSwitchContext+0xac>)
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <vTaskSwitchContext+0x5a>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	607b      	str	r3, [r7, #4]
 800989c:	e7fe      	b.n	800989c <vTaskSwitchContext+0x58>
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4a11      	ldr	r2, [pc, #68]	; (80098f0 <vTaskSwitchContext+0xac>)
 80098aa:	4413      	add	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	605a      	str	r2, [r3, #4]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3308      	adds	r3, #8
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d104      	bne.n	80098ce <vTaskSwitchContext+0x8a>
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	605a      	str	r2, [r3, #4]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <vTaskSwitchContext+0xb0>)
 80098d6:	6013      	str	r3, [r2, #0]
}
 80098d8:	bf00      	nop
 80098da:	371c      	adds	r7, #28
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	20003e30 	.word	0x20003e30
 80098e8:	20003e1c 	.word	0x20003e1c
 80098ec:	20003e10 	.word	0x20003e10
 80098f0:	20003d0c 	.word	0x20003d0c
 80098f4:	20003d08 	.word	0x20003d08

080098f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <vTaskPlaceOnEventList+0x24>
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	e7fe      	b.n	800991a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800991c:	4b07      	ldr	r3, [pc, #28]	; (800993c <vTaskPlaceOnEventList+0x44>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3318      	adds	r3, #24
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fe f93b 	bl	8007ba0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800992a:	2101      	movs	r1, #1
 800992c:	6838      	ldr	r0, [r7, #0]
 800992e:	f000 fb7f 	bl	800a030 <prvAddCurrentTaskToDelayedList>
}
 8009932:	bf00      	nop
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20003d08 	.word	0x20003d08

08009940 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d109      	bne.n	800996a <xTaskRemoveFromEventList+0x2a>
 8009956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	e7fe      	b.n	8009968 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3318      	adds	r3, #24
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe f94f 	bl	8007c12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009974:	4b1d      	ldr	r3, [pc, #116]	; (80099ec <xTaskRemoveFromEventList+0xac>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d11c      	bne.n	80099b6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	3304      	adds	r3, #4
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe f946 	bl	8007c12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998a:	2201      	movs	r2, #1
 800998c:	409a      	lsls	r2, r3
 800998e:	4b18      	ldr	r3, [pc, #96]	; (80099f0 <xTaskRemoveFromEventList+0xb0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4313      	orrs	r3, r2
 8009994:	4a16      	ldr	r2, [pc, #88]	; (80099f0 <xTaskRemoveFromEventList+0xb0>)
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4a13      	ldr	r2, [pc, #76]	; (80099f4 <xTaskRemoveFromEventList+0xb4>)
 80099a6:	441a      	add	r2, r3
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f7fe f8d2 	bl	8007b58 <vListInsertEnd>
 80099b4:	e005      	b.n	80099c2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	3318      	adds	r3, #24
 80099ba:	4619      	mov	r1, r3
 80099bc:	480e      	ldr	r0, [pc, #56]	; (80099f8 <xTaskRemoveFromEventList+0xb8>)
 80099be:	f7fe f8cb 	bl	8007b58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c6:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <xTaskRemoveFromEventList+0xbc>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d905      	bls.n	80099dc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099d0:	2301      	movs	r3, #1
 80099d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099d4:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <xTaskRemoveFromEventList+0xc0>)
 80099d6:	2201      	movs	r2, #1
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	e001      	b.n	80099e0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80099e0:	697b      	ldr	r3, [r7, #20]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20003e30 	.word	0x20003e30
 80099f0:	20003e10 	.word	0x20003e10
 80099f4:	20003d0c 	.word	0x20003d0c
 80099f8:	20003dc8 	.word	0x20003dc8
 80099fc:	20003d08 	.word	0x20003d08
 8009a00:	20003e1c 	.word	0x20003e1c

08009a04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a0c:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <vTaskInternalSetTimeOutState+0x24>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <vTaskInternalSetTimeOutState+0x28>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	605a      	str	r2, [r3, #4]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	20003e20 	.word	0x20003e20
 8009a2c:	20003e0c 	.word	0x20003e0c

08009a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d109      	bne.n	8009a54 <xTaskCheckForTimeOut+0x24>
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	e7fe      	b.n	8009a52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <xTaskCheckForTimeOut+0x3e>
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	e7fe      	b.n	8009a6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009a6e:	f7fe fa25 	bl	8007ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a72:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <xTaskCheckForTimeOut+0xb8>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8a:	d102      	bne.n	8009a92 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
 8009a90:	e023      	b.n	8009ada <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	4b15      	ldr	r3, [pc, #84]	; (8009aec <xTaskCheckForTimeOut+0xbc>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d007      	beq.n	8009aae <xTaskCheckForTimeOut+0x7e>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d802      	bhi.n	8009aae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	61fb      	str	r3, [r7, #28]
 8009aac:	e015      	b.n	8009ada <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d90b      	bls.n	8009ad0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	1ad2      	subs	r2, r2, r3
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff ff9d 	bl	8009a04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	e004      	b.n	8009ada <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ada:	f7fe fa1d 	bl	8007f18 <vPortExitCritical>

	return xReturn;
 8009ade:	69fb      	ldr	r3, [r7, #28]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20003e0c 	.word	0x20003e0c
 8009aec:	20003e20 	.word	0x20003e20

08009af0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009af4:	4b03      	ldr	r3, [pc, #12]	; (8009b04 <vTaskMissedYield+0x14>)
 8009af6:	2201      	movs	r2, #1
 8009af8:	601a      	str	r2, [r3, #0]
}
 8009afa:	bf00      	nop
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	20003e1c 	.word	0x20003e1c

08009b08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b10:	f000 f852 	bl	8009bb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b14:	4b06      	ldr	r3, [pc, #24]	; (8009b30 <prvIdleTask+0x28>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d9f9      	bls.n	8009b10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <prvIdleTask+0x2c>)
 8009b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b2c:	e7f0      	b.n	8009b10 <prvIdleTask+0x8>
 8009b2e:	bf00      	nop
 8009b30:	20003d0c 	.word	0x20003d0c
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b3e:	2300      	movs	r3, #0
 8009b40:	607b      	str	r3, [r7, #4]
 8009b42:	e00c      	b.n	8009b5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4a12      	ldr	r2, [pc, #72]	; (8009b98 <prvInitialiseTaskLists+0x60>)
 8009b50:	4413      	add	r3, r2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fd ffd3 	bl	8007afe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	607b      	str	r3, [r7, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b06      	cmp	r3, #6
 8009b62:	d9ef      	bls.n	8009b44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b64:	480d      	ldr	r0, [pc, #52]	; (8009b9c <prvInitialiseTaskLists+0x64>)
 8009b66:	f7fd ffca 	bl	8007afe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b6a:	480d      	ldr	r0, [pc, #52]	; (8009ba0 <prvInitialiseTaskLists+0x68>)
 8009b6c:	f7fd ffc7 	bl	8007afe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b70:	480c      	ldr	r0, [pc, #48]	; (8009ba4 <prvInitialiseTaskLists+0x6c>)
 8009b72:	f7fd ffc4 	bl	8007afe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b76:	480c      	ldr	r0, [pc, #48]	; (8009ba8 <prvInitialiseTaskLists+0x70>)
 8009b78:	f7fd ffc1 	bl	8007afe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b7c:	480b      	ldr	r0, [pc, #44]	; (8009bac <prvInitialiseTaskLists+0x74>)
 8009b7e:	f7fd ffbe 	bl	8007afe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b82:	4b0b      	ldr	r3, [pc, #44]	; (8009bb0 <prvInitialiseTaskLists+0x78>)
 8009b84:	4a05      	ldr	r2, [pc, #20]	; (8009b9c <prvInitialiseTaskLists+0x64>)
 8009b86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b88:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <prvInitialiseTaskLists+0x7c>)
 8009b8a:	4a05      	ldr	r2, [pc, #20]	; (8009ba0 <prvInitialiseTaskLists+0x68>)
 8009b8c:	601a      	str	r2, [r3, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20003d0c 	.word	0x20003d0c
 8009b9c:	20003d98 	.word	0x20003d98
 8009ba0:	20003dac 	.word	0x20003dac
 8009ba4:	20003dc8 	.word	0x20003dc8
 8009ba8:	20003ddc 	.word	0x20003ddc
 8009bac:	20003df4 	.word	0x20003df4
 8009bb0:	20003dc0 	.word	0x20003dc0
 8009bb4:	20003dc4 	.word	0x20003dc4

08009bb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bbe:	e019      	b.n	8009bf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009bc0:	f7fe f97c 	bl	8007ebc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009bc4:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <prvCheckTasksWaitingTermination+0x4c>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe f81e 	bl	8007c12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bd6:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <prvCheckTasksWaitingTermination+0x50>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	4a0a      	ldr	r2, [pc, #40]	; (8009c08 <prvCheckTasksWaitingTermination+0x50>)
 8009bde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <prvCheckTasksWaitingTermination+0x54>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	4a09      	ldr	r2, [pc, #36]	; (8009c0c <prvCheckTasksWaitingTermination+0x54>)
 8009be8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bea:	f7fe f995 	bl	8007f18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f80e 	bl	8009c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bf4:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <prvCheckTasksWaitingTermination+0x54>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e1      	bne.n	8009bc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20003ddc 	.word	0x20003ddc
 8009c08:	20003e08 	.word	0x20003e08
 8009c0c:	20003df0 	.word	0x20003df0

08009c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fb29 	bl	8008274 <vPortFree>
			vPortFree( pxTCB );
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7fe fb26 	bl	8008274 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c36:	4b0f      	ldr	r3, [pc, #60]	; (8009c74 <prvResetNextTaskUnblockTime+0x44>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <prvResetNextTaskUnblockTime+0x14>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e000      	b.n	8009c46 <prvResetNextTaskUnblockTime+0x16>
 8009c44:	2300      	movs	r3, #0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <prvResetNextTaskUnblockTime+0x48>)
 8009c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c52:	e008      	b.n	8009c66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c54:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <prvResetNextTaskUnblockTime+0x44>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <prvResetNextTaskUnblockTime+0x48>)
 8009c64:	6013      	str	r3, [r2, #0]
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20003dc0 	.word	0x20003dc0
 8009c78:	20003e28 	.word	0x20003e28

08009c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c82:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <xTaskGetSchedulerState+0x34>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	e008      	b.n	8009ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c90:	4b08      	ldr	r3, [pc, #32]	; (8009cb4 <xTaskGetSchedulerState+0x38>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	607b      	str	r3, [r7, #4]
 8009c9c:	e001      	b.n	8009ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ca2:	687b      	ldr	r3, [r7, #4]
	}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20003e14 	.word	0x20003e14
 8009cb4:	20003e30 	.word	0x20003e30

08009cb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d06e      	beq.n	8009dac <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd2:	4b39      	ldr	r3, [pc, #228]	; (8009db8 <xTaskPriorityInherit+0x100>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d25e      	bcs.n	8009d9a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db06      	blt.n	8009cf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ce4:	4b34      	ldr	r3, [pc, #208]	; (8009db8 <xTaskPriorityInherit+0x100>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cea:	f1c3 0207 	rsb	r2, r3, #7
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6959      	ldr	r1, [r3, #20]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4a2e      	ldr	r2, [pc, #184]	; (8009dbc <xTaskPriorityInherit+0x104>)
 8009d04:	4413      	add	r3, r2
 8009d06:	4299      	cmp	r1, r3
 8009d08:	d101      	bne.n	8009d0e <xTaskPriorityInherit+0x56>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e000      	b.n	8009d10 <xTaskPriorityInherit+0x58>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d03a      	beq.n	8009d8a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fd ff7a 	bl	8007c12 <uxListRemove>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d115      	bne.n	8009d50 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d28:	4924      	ldr	r1, [pc, #144]	; (8009dbc <xTaskPriorityInherit+0x104>)
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	440b      	add	r3, r1
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <xTaskPriorityInherit+0x98>
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	2201      	movs	r2, #1
 8009d40:	fa02 f303 	lsl.w	r3, r2, r3
 8009d44:	43da      	mvns	r2, r3
 8009d46:	4b1e      	ldr	r3, [pc, #120]	; (8009dc0 <xTaskPriorityInherit+0x108>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	4a1c      	ldr	r2, [pc, #112]	; (8009dc0 <xTaskPriorityInherit+0x108>)
 8009d4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d50:	4b19      	ldr	r3, [pc, #100]	; (8009db8 <xTaskPriorityInherit+0x100>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	2201      	movs	r2, #1
 8009d60:	409a      	lsls	r2, r3
 8009d62:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <xTaskPriorityInherit+0x108>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	4a15      	ldr	r2, [pc, #84]	; (8009dc0 <xTaskPriorityInherit+0x108>)
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d70:	4613      	mov	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4a10      	ldr	r2, [pc, #64]	; (8009dbc <xTaskPriorityInherit+0x104>)
 8009d7a:	441a      	add	r2, r3
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	4619      	mov	r1, r3
 8009d82:	4610      	mov	r0, r2
 8009d84:	f7fd fee8 	bl	8007b58 <vListInsertEnd>
 8009d88:	e004      	b.n	8009d94 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d8a:	4b0b      	ldr	r3, [pc, #44]	; (8009db8 <xTaskPriorityInherit+0x100>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d94:	2301      	movs	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	e008      	b.n	8009dac <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d9e:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <xTaskPriorityInherit+0x100>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d201      	bcs.n	8009dac <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009da8:	2301      	movs	r3, #1
 8009daa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dac:	68fb      	ldr	r3, [r7, #12]
	}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20003d08 	.word	0x20003d08
 8009dbc:	20003d0c 	.word	0x20003d0c
 8009dc0:	20003e10 	.word	0x20003e10

08009dc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d06c      	beq.n	8009eb4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dda:	4b39      	ldr	r3, [pc, #228]	; (8009ec0 <xTaskPriorityDisinherit+0xfc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d009      	beq.n	8009df8 <xTaskPriorityDisinherit+0x34>
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	e7fe      	b.n	8009df6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d109      	bne.n	8009e14 <xTaskPriorityDisinherit+0x50>
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	60bb      	str	r3, [r7, #8]
 8009e12:	e7fe      	b.n	8009e12 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e18:	1e5a      	subs	r2, r3, #1
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d044      	beq.n	8009eb4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d140      	bne.n	8009eb4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fd feeb 	bl	8007c12 <uxListRemove>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d115      	bne.n	8009e6e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e46:	491f      	ldr	r1, [pc, #124]	; (8009ec4 <xTaskPriorityDisinherit+0x100>)
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	440b      	add	r3, r1
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <xTaskPriorityDisinherit+0xaa>
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e62:	43da      	mvns	r2, r3
 8009e64:	4b18      	ldr	r3, [pc, #96]	; (8009ec8 <xTaskPriorityDisinherit+0x104>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4013      	ands	r3, r2
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <xTaskPriorityDisinherit+0x104>)
 8009e6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	f1c3 0207 	rsb	r2, r3, #7
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e86:	2201      	movs	r2, #1
 8009e88:	409a      	lsls	r2, r3
 8009e8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <xTaskPriorityDisinherit+0x104>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	4a0d      	ldr	r2, [pc, #52]	; (8009ec8 <xTaskPriorityDisinherit+0x104>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a08      	ldr	r2, [pc, #32]	; (8009ec4 <xTaskPriorityDisinherit+0x100>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fd fe54 	bl	8007b58 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009eb4:	697b      	ldr	r3, [r7, #20]
	}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20003d08 	.word	0x20003d08
 8009ec4:	20003d0c 	.word	0x20003d0c
 8009ec8:	20003e10 	.word	0x20003e10

08009ecc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b088      	sub	sp, #32
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009eda:	2301      	movs	r3, #1
 8009edc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 8086 	beq.w	8009ff2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d109      	bne.n	8009f02 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e7fe      	b.n	8009f00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d202      	bcs.n	8009f12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	e002      	b.n	8009f18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d067      	beq.n	8009ff2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d162      	bne.n	8009ff2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f2c:	4b33      	ldr	r3, [pc, #204]	; (8009ffc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d109      	bne.n	8009f4a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60bb      	str	r3, [r7, #8]
 8009f48:	e7fe      	b.n	8009f48 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	69fa      	ldr	r2, [r7, #28]
 8009f54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	db04      	blt.n	8009f68 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	f1c3 0207 	rsb	r2, r3, #7
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	6959      	ldr	r1, [r3, #20]
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4a22      	ldr	r2, [pc, #136]	; (800a000 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009f78:	4413      	add	r3, r2
 8009f7a:	4299      	cmp	r1, r3
 8009f7c:	d101      	bne.n	8009f82 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009f82:	2300      	movs	r3, #0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d034      	beq.n	8009ff2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fd fe40 	bl	8007c12 <uxListRemove>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d115      	bne.n	8009fc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	4918      	ldr	r1, [pc, #96]	; (800a000 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	440b      	add	r3, r1
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb8:	43da      	mvns	r2, r3
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	4a10      	ldr	r2, [pc, #64]	; (800a004 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009fc2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	2201      	movs	r2, #1
 8009fca:	409a      	lsls	r2, r3
 8009fcc:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	4a0c      	ldr	r2, [pc, #48]	; (800a004 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4a07      	ldr	r2, [pc, #28]	; (800a000 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009fe4:	441a      	add	r2, r3
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7fd fdb3 	bl	8007b58 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ff2:	bf00      	nop
 8009ff4:	3720      	adds	r7, #32
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20003d08 	.word	0x20003d08
 800a000:	20003d0c 	.word	0x20003d0c
 800a004:	20003e10 	.word	0x20003e10

0800a008 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a00c:	4b07      	ldr	r3, [pc, #28]	; (800a02c <pvTaskIncrementMutexHeldCount+0x24>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <pvTaskIncrementMutexHeldCount+0x24>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a01a:	3201      	adds	r2, #1
 800a01c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a01e:	4b03      	ldr	r3, [pc, #12]	; (800a02c <pvTaskIncrementMutexHeldCount+0x24>)
 800a020:	681b      	ldr	r3, [r3, #0]
	}
 800a022:	4618      	mov	r0, r3
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20003d08 	.word	0x20003d08

0800a030 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a03a:	4b29      	ldr	r3, [pc, #164]	; (800a0e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a040:	4b28      	ldr	r3, [pc, #160]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3304      	adds	r3, #4
 800a046:	4618      	mov	r0, r3
 800a048:	f7fd fde3 	bl	8007c12 <uxListRemove>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10b      	bne.n	800a06a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a052:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	2201      	movs	r2, #1
 800a05a:	fa02 f303 	lsl.w	r3, r2, r3
 800a05e:	43da      	mvns	r2, r3
 800a060:	4b21      	ldr	r3, [pc, #132]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4013      	ands	r3, r2
 800a066:	4a20      	ldr	r2, [pc, #128]	; (800a0e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a068:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a070:	d10a      	bne.n	800a088 <prvAddCurrentTaskToDelayedList+0x58>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d007      	beq.n	800a088 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a078:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	481a      	ldr	r0, [pc, #104]	; (800a0ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800a082:	f7fd fd69 	bl	8007b58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a086:	e026      	b.n	800a0d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4413      	add	r3, r2
 800a08e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a090:	4b14      	ldr	r3, [pc, #80]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d209      	bcs.n	800a0b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a0:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	f7fd fd77 	bl	8007ba0 <vListInsert>
}
 800a0b2:	e010      	b.n	800a0d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0b4:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fd fd6d 	bl	8007ba0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d202      	bcs.n	800a0d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a0d0:	4a09      	ldr	r2, [pc, #36]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	6013      	str	r3, [r2, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20003e0c 	.word	0x20003e0c
 800a0e4:	20003d08 	.word	0x20003d08
 800a0e8:	20003e10 	.word	0x20003e10
 800a0ec:	20003df4 	.word	0x20003df4
 800a0f0:	20003dc4 	.word	0x20003dc4
 800a0f4:	20003dc0 	.word	0x20003dc0
 800a0f8:	20003e28 	.word	0x20003e28

0800a0fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a106:	f000 f896 	bl	800a236 <BSP_SD_IsDetected>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d001      	beq.n	800a114 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e012      	b.n	800a13a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a114:	480b      	ldr	r0, [pc, #44]	; (800a144 <BSP_SD_Init+0x48>)
 800a116:	f7f7 fce9 	bl	8001aec <HAL_SD_Init>
 800a11a:	4603      	mov	r3, r0
 800a11c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d109      	bne.n	800a138 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a124:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a128:	4806      	ldr	r0, [pc, #24]	; (800a144 <BSP_SD_Init+0x48>)
 800a12a:	f7f8 fac2 	bl	80026b2 <HAL_SD_ConfigWideBusOperation>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a138:	79fb      	ldrb	r3, [r7, #7]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	2000462c 	.word	0x2000462c

0800a148 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	4806      	ldr	r0, [pc, #24]	; (800a178 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a160:	f7f7 fd4c 	bl	8001bfc <HAL_SD_ReadBlocks_DMA>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	2000462c 	.word	0x2000462c

0800a17c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	68f9      	ldr	r1, [r7, #12]
 800a192:	4806      	ldr	r0, [pc, #24]	; (800a1ac <BSP_SD_WriteBlocks_DMA+0x30>)
 800a194:	f7f7 fdfc 	bl	8001d90 <HAL_SD_WriteBlocks_DMA>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	2000462c 	.word	0x2000462c

0800a1b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a1b4:	4805      	ldr	r0, [pc, #20]	; (800a1cc <BSP_SD_GetCardState+0x1c>)
 800a1b6:	f7f8 faf8 	bl	80027aa <HAL_SD_GetCardState>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	bf14      	ite	ne
 800a1c0:	2301      	movne	r3, #1
 800a1c2:	2300      	moveq	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	2000462c 	.word	0x2000462c

0800a1d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	4803      	ldr	r0, [pc, #12]	; (800a1e8 <BSP_SD_GetCardInfo+0x18>)
 800a1dc:	f7f8 fa3d 	bl	800265a <HAL_SD_GetCardInfo>
}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	2000462c 	.word	0x2000462c

0800a1ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a1f4:	f000 f818 	bl	800a228 <BSP_SD_AbortCallback>
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a208:	f000 fbc6 	bl	800a998 <BSP_SD_WriteCpltCallback>
}
 800a20c:	bf00      	nop
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a21c:	f000 fbca 	bl	800a9b4 <BSP_SD_ReadCpltCallback>
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a228:	b480      	push	{r7}
 800a22a:	af00      	add	r7, sp, #0

}
 800a22c:	bf00      	nop
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a23c:	2301      	movs	r3, #1
 800a23e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	b2db      	uxtb	r3, r3
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a256:	2300      	movs	r3, #0
 800a258:	607b      	str	r3, [r7, #4]
 800a25a:	4a18      	ldr	r2, [pc, #96]	; (800a2bc <MX_DMA_Init+0x6c>)
 800a25c:	4b17      	ldr	r3, [pc, #92]	; (800a2bc <MX_DMA_Init+0x6c>)
 800a25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a264:	6313      	str	r3, [r2, #48]	; 0x30
 800a266:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <MX_DMA_Init+0x6c>)
 800a268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a26e:	607b      	str	r3, [r7, #4]
 800a270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800a272:	2200      	movs	r2, #0
 800a274:	2105      	movs	r1, #5
 800a276:	203a      	movs	r0, #58	; 0x3a
 800a278:	f7f6 fa9f 	bl	80007ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800a27c:	203a      	movs	r0, #58	; 0x3a
 800a27e:	f7f6 fab8 	bl	80007f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800a282:	2200      	movs	r2, #0
 800a284:	2106      	movs	r1, #6
 800a286:	203b      	movs	r0, #59	; 0x3b
 800a288:	f7f6 fa97 	bl	80007ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800a28c:	203b      	movs	r0, #59	; 0x3b
 800a28e:	f7f6 fab0 	bl	80007f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 800a292:	2200      	movs	r2, #0
 800a294:	2106      	movs	r1, #6
 800a296:	2045      	movs	r0, #69	; 0x45
 800a298:	f7f6 fa8f 	bl	80007ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800a29c:	2045      	movs	r0, #69	; 0x45
 800a29e:	f7f6 faa8 	bl	80007f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2105      	movs	r1, #5
 800a2a6:	2046      	movs	r0, #70	; 0x46
 800a2a8:	f7f6 fa87 	bl	80007ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800a2ac:	2046      	movs	r0, #70	; 0x46
 800a2ae:	f7f6 faa0 	bl	80007f2 <HAL_NVIC_EnableIRQ>

}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	40023800 	.word	0x40023800

0800a2c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a2c4:	4904      	ldr	r1, [pc, #16]	; (800a2d8 <MX_FATFS_Init+0x18>)
 800a2c6:	4805      	ldr	r0, [pc, #20]	; (800a2dc <MX_FATFS_Init+0x1c>)
 800a2c8:	f7fd f8ae 	bl	8007428 <FATFS_LinkDriver>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	4b03      	ldr	r3, [pc, #12]	; (800a2e0 <MX_FATFS_Init+0x20>)
 800a2d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a2d4:	bf00      	nop
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	2000408c 	.word	0x2000408c
 800a2dc:	08035e64 	.word	0x08035e64
 800a2e0:	20004088 	.word	0x20004088

0800a2e4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a2e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800a2f4:	b5b0      	push	{r4, r5, r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800a2fa:	4b09      	ldr	r3, [pc, #36]	; (800a320 <MX_FREERTOS_Init+0x2c>)
 800a2fc:	1d3c      	adds	r4, r7, #4
 800a2fe:	461d      	mov	r5, r3
 800a300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a308:	1d3b      	adds	r3, r7, #4
 800a30a:	2100      	movs	r1, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fd fa33 	bl	8007778 <osThreadCreate>
 800a312:	4602      	mov	r2, r0
 800a314:	4b03      	ldr	r3, [pc, #12]	; (800a324 <MX_FREERTOS_Init+0x30>)
 800a316:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800a318:	bf00      	nop
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bdb0      	pop	{r4, r5, r7, pc}
 800a320:	0800b26c 	.word	0x0800b26c
 800a324:	200044f8 	.word	0x200044f8

0800a328 <StartDefaultTask>:
uint32_t byteswritten, bytesread;
uint8_t wtext[]="this is stm32 working with fatfa";
uint8_t rtext[100];
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 800a330:	f7ff ffc6 	bl	800a2c0 <MX_FATFS_Init>

  /* USER CODE BEGIN StartDefaultTask */

  if (f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK) {
 800a334:	2200      	movs	r2, #0
 800a336:	4928      	ldr	r1, [pc, #160]	; (800a3d8 <StartDefaultTask+0xb0>)
 800a338:	4828      	ldr	r0, [pc, #160]	; (800a3dc <StartDefaultTask+0xb4>)
 800a33a:	f7fc fa21 	bl	8006780 <f_mount>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d000      	beq.n	800a346 <StartDefaultTask+0x1e>
	  while (1);
 800a344:	e7fe      	b.n	800a344 <StartDefaultTask+0x1c>
  } else {
	  if (f_open (&SDFile, "stm32.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800a346:	220a      	movs	r2, #10
 800a348:	4925      	ldr	r1, [pc, #148]	; (800a3e0 <StartDefaultTask+0xb8>)
 800a34a:	4826      	ldr	r0, [pc, #152]	; (800a3e4 <StartDefaultTask+0xbc>)
 800a34c:	f7fc fa7c 	bl	8006848 <f_open>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d000      	beq.n	800a358 <StartDefaultTask+0x30>
		  while (1);
 800a356:	e7fe      	b.n	800a356 <StartDefaultTask+0x2e>
	  } else {
		  res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800a358:	4b23      	ldr	r3, [pc, #140]	; (800a3e8 <StartDefaultTask+0xc0>)
 800a35a:	2221      	movs	r2, #33	; 0x21
 800a35c:	4923      	ldr	r1, [pc, #140]	; (800a3ec <StartDefaultTask+0xc4>)
 800a35e:	4821      	ldr	r0, [pc, #132]	; (800a3e4 <StartDefaultTask+0xbc>)
 800a360:	f7fc fdba 	bl	8006ed8 <f_write>
 800a364:	4603      	mov	r3, r0
 800a366:	461a      	mov	r2, r3
 800a368:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <StartDefaultTask+0xc8>)
 800a36a:	701a      	strb	r2, [r3, #0]

		  if ((byteswritten == 0) || (res != FR_OK))
 800a36c:	4b1e      	ldr	r3, [pc, #120]	; (800a3e8 <StartDefaultTask+0xc0>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <StartDefaultTask+0x54>
 800a374:	4b1e      	ldr	r3, [pc, #120]	; (800a3f0 <StartDefaultTask+0xc8>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d000      	beq.n	800a37e <StartDefaultTask+0x56>
		  {
			  while (1);
 800a37c:	e7fe      	b.n	800a37c <StartDefaultTask+0x54>
		  }
		  else
		  {
			  f_close(&SDFile);
 800a37e:	4819      	ldr	r0, [pc, #100]	; (800a3e4 <StartDefaultTask+0xbc>)
 800a380:	f7fc ffd7 	bl	8007332 <f_close>

			  if (f_open (&SDFile, "stm32.txt", FA_READ) != FR_OK)
 800a384:	2201      	movs	r2, #1
 800a386:	4916      	ldr	r1, [pc, #88]	; (800a3e0 <StartDefaultTask+0xb8>)
 800a388:	4816      	ldr	r0, [pc, #88]	; (800a3e4 <StartDefaultTask+0xbc>)
 800a38a:	f7fc fa5d 	bl	8006848 <f_open>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d000      	beq.n	800a396 <StartDefaultTask+0x6e>
			  {
				  while (1);
 800a394:	e7fe      	b.n	800a394 <StartDefaultTask+0x6c>
			  }else {
				  res = f_read (&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 800a396:	4b17      	ldr	r3, [pc, #92]	; (800a3f4 <StartDefaultTask+0xcc>)
 800a398:	2264      	movs	r2, #100	; 0x64
 800a39a:	4917      	ldr	r1, [pc, #92]	; (800a3f8 <StartDefaultTask+0xd0>)
 800a39c:	4811      	ldr	r0, [pc, #68]	; (800a3e4 <StartDefaultTask+0xbc>)
 800a39e:	f7fc fc2d 	bl	8006bfc <f_read>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	4b12      	ldr	r3, [pc, #72]	; (800a3f0 <StartDefaultTask+0xc8>)
 800a3a8:	701a      	strb	r2, [r3, #0]

				  if ((bytesread == 0) || (res != FR_OK))
 800a3aa:	4b12      	ldr	r3, [pc, #72]	; (800a3f4 <StartDefaultTask+0xcc>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <StartDefaultTask+0x92>
 800a3b2:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <StartDefaultTask+0xc8>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d000      	beq.n	800a3bc <StartDefaultTask+0x94>
				  {
					  while (1);
 800a3ba:	e7fe      	b.n	800a3ba <StartDefaultTask+0x92>
				  } else {
					  f_close(&SDFile);
 800a3bc:	4809      	ldr	r0, [pc, #36]	; (800a3e4 <StartDefaultTask+0xbc>)
 800a3be:	f7fc ffb8 	bl	8007332 <f_close>

					  if (bytesread != byteswritten)
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	; (800a3f4 <StartDefaultTask+0xcc>)
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	4b08      	ldr	r3, [pc, #32]	; (800a3e8 <StartDefaultTask+0xc0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d000      	beq.n	800a3d0 <StartDefaultTask+0xa8>
					  {
						  while (1);
 800a3ce:	e7fe      	b.n	800a3ce <StartDefaultTask+0xa6>
  }

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	f7fd f9f8 	bl	80077c6 <osDelay>
 800a3d6:	e7fb      	b.n	800a3d0 <StartDefaultTask+0xa8>
 800a3d8:	2000408c 	.word	0x2000408c
 800a3dc:	200042c0 	.word	0x200042c0
 800a3e0:	0800b280 	.word	0x0800b280
 800a3e4:	20004090 	.word	0x20004090
 800a3e8:	200044fc 	.word	0x200044fc
 800a3ec:	2000000c 	.word	0x2000000c
 800a3f0:	20004568 	.word	0x20004568
 800a3f4:	20004500 	.word	0x20004500
 800a3f8:	20004504 	.word	0x20004504

0800a3fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	4a1e      	ldr	r2, [pc, #120]	; (800a480 <MX_GPIO_Init+0x84>)
 800a408:	4b1d      	ldr	r3, [pc, #116]	; (800a480 <MX_GPIO_Init+0x84>)
 800a40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a410:	6313      	str	r3, [r2, #48]	; 0x30
 800a412:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <MX_GPIO_Init+0x84>)
 800a414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]
 800a422:	4a17      	ldr	r2, [pc, #92]	; (800a480 <MX_GPIO_Init+0x84>)
 800a424:	4b16      	ldr	r3, [pc, #88]	; (800a480 <MX_GPIO_Init+0x84>)
 800a426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a428:	f043 0304 	orr.w	r3, r3, #4
 800a42c:	6313      	str	r3, [r2, #48]	; 0x30
 800a42e:	4b14      	ldr	r3, [pc, #80]	; (800a480 <MX_GPIO_Init+0x84>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	60bb      	str	r3, [r7, #8]
 800a438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a43a:	2300      	movs	r3, #0
 800a43c:	607b      	str	r3, [r7, #4]
 800a43e:	4a10      	ldr	r2, [pc, #64]	; (800a480 <MX_GPIO_Init+0x84>)
 800a440:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <MX_GPIO_Init+0x84>)
 800a442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a444:	f043 0301 	orr.w	r3, r3, #1
 800a448:	6313      	str	r3, [r2, #48]	; 0x30
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <MX_GPIO_Init+0x84>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	607b      	str	r3, [r7, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a456:	2300      	movs	r3, #0
 800a458:	603b      	str	r3, [r7, #0]
 800a45a:	4a09      	ldr	r2, [pc, #36]	; (800a480 <MX_GPIO_Init+0x84>)
 800a45c:	4b08      	ldr	r3, [pc, #32]	; (800a480 <MX_GPIO_Init+0x84>)
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	f043 0308 	orr.w	r3, r3, #8
 800a464:	6313      	str	r3, [r2, #48]	; 0x30
 800a466:	4b06      	ldr	r3, [pc, #24]	; (800a480 <MX_GPIO_Init+0x84>)
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	f003 0308 	and.w	r3, r3, #8
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	683b      	ldr	r3, [r7, #0]

}
 800a472:	bf00      	nop
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	40023800 	.word	0x40023800

0800a484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a488:	f7f6 f82a 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a48c:	f000 f80e 	bl	800a4ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a490:	f7ff ffb4 	bl	800a3fc <MX_GPIO_Init>
  MX_DMA_Init();
 800a494:	f7ff fedc 	bl	800a250 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800a498:	f000 fa9a 	bl	800a9d0 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 800a49c:	f000 fc96 	bl	800adcc <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800a4a0:	f7ff ff28 	bl	800a2f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800a4a4:	f7fd f945 	bl	8007732 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a4a8:	e7fe      	b.n	800a4a8 <main+0x24>
	...

0800a4ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b094      	sub	sp, #80	; 0x50
 800a4b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a4b2:	f107 0320 	add.w	r3, r7, #32
 800a4b6:	2230      	movs	r2, #48	; 0x30
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fdd5 	bl	800b06a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a4c0:	f107 030c 	add.w	r3, r7, #12
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	609a      	str	r2, [r3, #8]
 800a4cc:	60da      	str	r2, [r3, #12]
 800a4ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60bb      	str	r3, [r7, #8]
 800a4d4:	4a28      	ldr	r2, [pc, #160]	; (800a578 <SystemClock_Config+0xcc>)
 800a4d6:	4b28      	ldr	r3, [pc, #160]	; (800a578 <SystemClock_Config+0xcc>)
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4de:	6413      	str	r3, [r2, #64]	; 0x40
 800a4e0:	4b25      	ldr	r3, [pc, #148]	; (800a578 <SystemClock_Config+0xcc>)
 800a4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4e8:	60bb      	str	r3, [r7, #8]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	4a22      	ldr	r2, [pc, #136]	; (800a57c <SystemClock_Config+0xd0>)
 800a4f2:	4b22      	ldr	r3, [pc, #136]	; (800a57c <SystemClock_Config+0xd0>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	4b1f      	ldr	r3, [pc, #124]	; (800a57c <SystemClock_Config+0xd0>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a504:	607b      	str	r3, [r7, #4]
 800a506:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a508:	2302      	movs	r3, #2
 800a50a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a50c:	2301      	movs	r3, #1
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a510:	2310      	movs	r3, #16
 800a512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a514:	2302      	movs	r3, #2
 800a516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a518:	2300      	movs	r3, #0
 800a51a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a51c:	2308      	movs	r3, #8
 800a51e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a520:	23a8      	movs	r3, #168	; 0xa8
 800a522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a524:	2302      	movs	r3, #2
 800a526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a528:	2307      	movs	r3, #7
 800a52a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a52c:	f107 0320 	add.w	r3, r7, #32
 800a530:	4618      	mov	r0, r3
 800a532:	f7f6 feab 	bl	800128c <HAL_RCC_OscConfig>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a53c:	f000 f820 	bl	800a580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a540:	230f      	movs	r3, #15
 800a542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a544:	2302      	movs	r3, #2
 800a546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a548:	2300      	movs	r3, #0
 800a54a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a54c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800a552:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a558:	f107 030c 	add.w	r3, r7, #12
 800a55c:	2105      	movs	r1, #5
 800a55e:	4618      	mov	r0, r3
 800a560:	f7f7 f8d6 	bl	8001710 <HAL_RCC_ClockConfig>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a56a:	f000 f809 	bl	800a580 <Error_Handler>
  }
}
 800a56e:	bf00      	nop
 800a570:	3750      	adds	r7, #80	; 0x50
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	40023800 	.word	0x40023800
 800a57c:	40007000 	.word	0x40007000

0800a580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a584:	bf00      	nop
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 800a596:	f7fd f8df 	bl	8007758 <osKernelSysTick>
 800a59a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800a59c:	e006      	b.n	800a5ac <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a59e:	f7ff fe07 	bl	800a1b0 <BSP_SD_GetCardState>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e009      	b.n	800a5c0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800a5ac:	f7fd f8d4 	bl	8007758 <osKernelSysTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1ad2      	subs	r2, r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d3f0      	bcc.n	800a59e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a5bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <SD_CheckStatus+0x38>)
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a5d8:	f7ff fdea 	bl	800a1b0 <BSP_SD_GetCardState>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d107      	bne.n	800a5f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a5e2:	4b07      	ldr	r3, [pc, #28]	; (800a600 <SD_CheckStatus+0x38>)
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f023 0301 	bic.w	r3, r3, #1
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	4b04      	ldr	r3, [pc, #16]	; (800a600 <SD_CheckStatus+0x38>)
 800a5f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a5f2:	4b03      	ldr	r3, [pc, #12]	; (800a600 <SD_CheckStatus+0x38>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	b2db      	uxtb	r3, r3
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	2000002d 	.word	0x2000002d

0800a604 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800a60e:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <SD_initialize+0x74>)
 800a610:	2201      	movs	r2, #1
 800a612:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800a614:	f7fd f894 	bl	8007740 <osKernelRunning>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d025      	beq.n	800a66a <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a61e:	f7ff fd6d 	bl	800a0fc <BSP_SD_Init>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d107      	bne.n	800a638 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff ffcc 	bl	800a5c8 <SD_CheckStatus>
 800a630:	4603      	mov	r3, r0
 800a632:	461a      	mov	r2, r3
 800a634:	4b10      	ldr	r3, [pc, #64]	; (800a678 <SD_initialize+0x74>)
 800a636:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800a638:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <SD_initialize+0x74>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d013      	beq.n	800a66a <SD_initialize+0x66>
 800a642:	4b0e      	ldr	r3, [pc, #56]	; (800a67c <SD_initialize+0x78>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10f      	bne.n	800a66a <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a64a:	4a0d      	ldr	r2, [pc, #52]	; (800a680 <SD_initialize+0x7c>)
 800a64c:	f107 0308 	add.w	r3, r7, #8
 800a650:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a654:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a658:	f107 0308 	add.w	r3, r7, #8
 800a65c:	2100      	movs	r1, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fd f97b 	bl	800795a <osMessageCreate>
 800a664:	4602      	mov	r2, r0
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <SD_initialize+0x78>)
 800a668:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 800a66a:	4b03      	ldr	r3, [pc, #12]	; (800a678 <SD_initialize+0x74>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b2db      	uxtb	r3, r3
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	2000002d 	.word	0x2000002d
 800a67c:	20004034 	.word	0x20004034
 800a680:	0800b28c 	.word	0x0800b28c

0800a684 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	4603      	mov	r3, r0
 800a68c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff ff99 	bl	800a5c8 <SD_CheckStatus>
 800a696:	4603      	mov	r3, r0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08e      	sub	sp, #56	; 0x38
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	61b9      	str	r1, [r7, #24]
 800a6a8:	617a      	str	r2, [r7, #20]
 800a6aa:	613b      	str	r3, [r7, #16]
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a6b6:	f247 5030 	movw	r0, #30000	; 0x7530
 800a6ba:	f7ff ff68 	bl	800a58e <SD_CheckStatusWithTimeout>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	da02      	bge.n	800a6ca <SD_read+0x2a>
  {
    return res;
 800a6c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6c8:	e06c      	b.n	800a7a4 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d11e      	bne.n	800a712 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	6979      	ldr	r1, [r7, #20]
 800a6d8:	69b8      	ldr	r0, [r7, #24]
 800a6da:	f7ff fd35 	bl	800a148 <BSP_SD_ReadBlocks_DMA>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 800a6e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d159      	bne.n	800a7a0 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a6ec:	4b2f      	ldr	r3, [pc, #188]	; (800a7ac <SD_read+0x10c>)
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	f107 0320 	add.w	r3, r7, #32
 800a6f4:	f247 5230 	movw	r2, #30000	; 0x7530
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fd f981 	bl	8007a00 <osMessageGet>
      if (event.status == osEventMessage) {
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	2b10      	cmp	r3, #16
 800a702:	d14d      	bne.n	800a7a0 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	2b01      	cmp	r3, #1
 800a708:	d14a      	bne.n	800a7a0 <SD_read+0x100>
          res = RES_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a710:	e046      	b.n	800a7a0 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 800a712:	2300      	movs	r3, #0
 800a714:	633b      	str	r3, [r7, #48]	; 0x30
 800a716:	e032      	b.n	800a77e <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	617a      	str	r2, [r7, #20]
 800a71e:	2201      	movs	r2, #1
 800a720:	4619      	mov	r1, r3
 800a722:	4823      	ldr	r0, [pc, #140]	; (800a7b0 <SD_read+0x110>)
 800a724:	f7ff fd10 	bl	800a148 <BSP_SD_ReadBlocks_DMA>
 800a728:	4603      	mov	r3, r0
 800a72a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 800a72e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a732:	2b00      	cmp	r3, #0
 800a734:	d128      	bne.n	800a788 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a736:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <SD_read+0x10c>)
 800a738:	6819      	ldr	r1, [r3, #0]
 800a73a:	463b      	mov	r3, r7
 800a73c:	f247 5230 	movw	r2, #30000	; 0x7530
 800a740:	4618      	mov	r0, r3
 800a742:	f7fd f95d 	bl	8007a00 <osMessageGet>
 800a746:	f107 0320 	add.w	r3, r7, #32
 800a74a:	463a      	mov	r2, r7
 800a74c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a74e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	2b10      	cmp	r3, #16
 800a756:	d10f      	bne.n	800a778 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d10c      	bne.n	800a778 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	4a13      	ldr	r2, [pc, #76]	; (800a7b0 <SD_read+0x110>)
 800a762:	4618      	mov	r0, r3
 800a764:	4611      	mov	r1, r2
 800a766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a76a:	461a      	mov	r2, r3
 800a76c:	f000 fc72 	bl	800b054 <memcpy>
            buff += BLOCKSIZE;
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a776:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	3301      	adds	r3, #1
 800a77c:	633b      	str	r3, [r7, #48]	; 0x30
 800a77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	429a      	cmp	r2, r3
 800a784:	d3c8      	bcc.n	800a718 <SD_read+0x78>
 800a786:	e000      	b.n	800a78a <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 800a788:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800a78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d106      	bne.n	800a7a0 <SD_read+0x100>
 800a792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <SD_read+0x100>
      res = RES_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 800a7a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3738      	adds	r7, #56	; 0x38
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20004034 	.word	0x20004034
 800a7b0:	20003e34 	.word	0x20003e34

0800a7b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b090      	sub	sp, #64	; 0x40
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	61b9      	str	r1, [r7, #24]
 800a7bc:	617a      	str	r2, [r7, #20]
 800a7be:	613b      	str	r3, [r7, #16]
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a7ca:	f247 5030 	movw	r0, #30000	; 0x7530
 800a7ce:	f7ff fede 	bl	800a58e <SD_CheckStatusWithTimeout>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	da02      	bge.n	800a7de <SD_write+0x2a>
  {
    return res;
 800a7d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a7dc:	e07c      	b.n	800a8d8 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d12e      	bne.n	800a846 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	6979      	ldr	r1, [r7, #20]
 800a7ec:	69b8      	ldr	r0, [r7, #24]
 800a7ee:	f7ff fcc5 	bl	800a17c <BSP_SD_WriteBlocks_DMA>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d16d      	bne.n	800a8d4 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a7f8:	4b39      	ldr	r3, [pc, #228]	; (800a8e0 <SD_write+0x12c>)
 800a7fa:	6819      	ldr	r1, [r3, #0]
 800a7fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a800:	f247 5230 	movw	r2, #30000	; 0x7530
 800a804:	4618      	mov	r0, r3
 800a806:	f7fd f8fb 	bl	8007a00 <osMessageGet>

      if (event.status == osEventMessage)
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	2b10      	cmp	r3, #16
 800a80e:	d161      	bne.n	800a8d4 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	2b02      	cmp	r3, #2
 800a814:	d15e      	bne.n	800a8d4 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 800a816:	f7fc ff9f 	bl	8007758 <osKernelSysTick>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800a820:	3330      	adds	r3, #48	; 0x30
 800a822:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 800a824:	e008      	b.n	800a838 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a826:	f7ff fcc3 	bl	800a1b0 <BSP_SD_GetCardState>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d103      	bne.n	800a838 <SD_write+0x84>
            {
              res = RES_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800a836:	e04d      	b.n	800a8d4 <SD_write+0x120>
          while(timer > osKernelSysTick())
 800a838:	f7fc ff8e 	bl	8007758 <osKernelSysTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	429a      	cmp	r2, r3
 800a842:	d3f0      	bcc.n	800a826 <SD_write+0x72>
 800a844:	e046      	b.n	800a8d4 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 800a846:	2300      	movs	r3, #0
 800a848:	63bb      	str	r3, [r7, #56]	; 0x38
 800a84a:	e032      	b.n	800a8b2 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	617a      	str	r2, [r7, #20]
 800a852:	2201      	movs	r2, #1
 800a854:	4619      	mov	r1, r3
 800a856:	4823      	ldr	r0, [pc, #140]	; (800a8e4 <SD_write+0x130>)
 800a858:	f7ff fc90 	bl	800a17c <BSP_SD_WriteBlocks_DMA>
 800a85c:	4603      	mov	r3, r0
 800a85e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 800a862:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a866:	2b00      	cmp	r3, #0
 800a868:	d128      	bne.n	800a8bc <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a86a:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <SD_write+0x12c>)
 800a86c:	6819      	ldr	r1, [r3, #0]
 800a86e:	463b      	mov	r3, r7
 800a870:	f247 5230 	movw	r2, #30000	; 0x7530
 800a874:	4618      	mov	r0, r3
 800a876:	f7fd f8c3 	bl	8007a00 <osMessageGet>
 800a87a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a87e:	463a      	mov	r2, r7
 800a880:	ca07      	ldmia	r2, {r0, r1, r2}
 800a882:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	2b10      	cmp	r3, #16
 800a88a:	d10f      	bne.n	800a8ac <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d10c      	bne.n	800a8ac <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	4a13      	ldr	r2, [pc, #76]	; (800a8e4 <SD_write+0x130>)
 800a896:	4618      	mov	r0, r3
 800a898:	4611      	mov	r1, r2
 800a89a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f000 fbd8 	bl	800b054 <memcpy>
            buff += BLOCKSIZE;
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a8aa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d3c8      	bcc.n	800a84c <SD_write+0x98>
 800a8ba:	e000      	b.n	800a8be <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 800a8bc:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800a8be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d106      	bne.n	800a8d4 <SD_write+0x120>
 800a8c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d102      	bne.n	800a8d4 <SD_write+0x120>
      res = RES_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 800a8d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3740      	adds	r7, #64	; 0x40
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	20004034 	.word	0x20004034
 800a8e4:	20003e34 	.word	0x20003e34

0800a8e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08c      	sub	sp, #48	; 0x30
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	603a      	str	r2, [r7, #0]
 800a8f2:	71fb      	strb	r3, [r7, #7]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a8fe:	4b25      	ldr	r3, [pc, #148]	; (800a994 <SD_ioctl+0xac>)
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <SD_ioctl+0x28>
 800a90c:	2303      	movs	r3, #3
 800a90e:	e03c      	b.n	800a98a <SD_ioctl+0xa2>

  switch (cmd)
 800a910:	79bb      	ldrb	r3, [r7, #6]
 800a912:	2b03      	cmp	r3, #3
 800a914:	d834      	bhi.n	800a980 <SD_ioctl+0x98>
 800a916:	a201      	add	r2, pc, #4	; (adr r2, 800a91c <SD_ioctl+0x34>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a92d 	.word	0x0800a92d
 800a920:	0800a935 	.word	0x0800a935
 800a924:	0800a94d 	.word	0x0800a94d
 800a928:	0800a967 	.word	0x0800a967
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a932:	e028      	b.n	800a986 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a934:	f107 030c 	add.w	r3, r7, #12
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff fc49 	bl	800a1d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a94a:	e01c      	b.n	800a986 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a94c:	f107 030c 	add.w	r3, r7, #12
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fc3d 	bl	800a1d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	b29a      	uxth	r2, r3
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a964:	e00f      	b.n	800a986 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a966:	f107 030c 	add.w	r3, r7, #12
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff fc30 	bl	800a1d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a972:	0a5a      	lsrs	r2, r3, #9
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a97e:	e002      	b.n	800a986 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a980:	2304      	movs	r3, #4
 800a982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3730      	adds	r7, #48	; 0x30
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	2000002d 	.word	0x2000002d

0800a998 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 800a99c:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <BSP_SD_WriteCpltCallback+0x18>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a4:	2102      	movs	r1, #2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fc ffea 	bl	8007980 <osMessagePut>
}
 800a9ac:	bf00      	nop
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20004034 	.word	0x20004034

0800a9b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <BSP_SD_ReadCpltCallback+0x18>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fc ffdc 	bl	8007980 <osMessagePut>
}
 800a9c8:	bf00      	nop
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	20004034 	.word	0x20004034

0800a9d0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800a9d4:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <MX_SDIO_SD_Init+0x38>)
 800a9d6:	4a0d      	ldr	r2, [pc, #52]	; (800aa0c <MX_SDIO_SD_Init+0x3c>)
 800a9d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a9da:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <MX_SDIO_SD_Init+0x38>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a9e0:	4b09      	ldr	r3, [pc, #36]	; (800aa08 <MX_SDIO_SD_Init+0x38>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a9e6:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <MX_SDIO_SD_Init+0x38>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a9ec:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <MX_SDIO_SD_Init+0x38>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <MX_SDIO_SD_Init+0x38>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800a9f8:	4b03      	ldr	r3, [pc, #12]	; (800aa08 <MX_SDIO_SD_Init+0x38>)
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	619a      	str	r2, [r3, #24]

}
 800a9fe:	bf00      	nop
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	2000462c 	.word	0x2000462c
 800aa0c:	40012c00 	.word	0x40012c00

0800aa10 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08a      	sub	sp, #40	; 0x28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa18:	f107 0314 	add.w	r3, r7, #20
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	601a      	str	r2, [r3, #0]
 800aa20:	605a      	str	r2, [r3, #4]
 800aa22:	609a      	str	r2, [r3, #8]
 800aa24:	60da      	str	r2, [r3, #12]
 800aa26:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a69      	ldr	r2, [pc, #420]	; (800abd4 <HAL_SD_MspInit+0x1c4>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	f040 80cb 	bne.w	800abca <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800aa34:	2300      	movs	r3, #0
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	4a67      	ldr	r2, [pc, #412]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa3a:	4b67      	ldr	r3, [pc, #412]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa42:	6453      	str	r3, [r2, #68]	; 0x44
 800aa44:	4b64      	ldr	r3, [pc, #400]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa4c:	613b      	str	r3, [r7, #16]
 800aa4e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	4a60      	ldr	r2, [pc, #384]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa56:	4b60      	ldr	r3, [pc, #384]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5a:	f043 0304 	orr.w	r3, r3, #4
 800aa5e:	6313      	str	r3, [r2, #48]	; 0x30
 800aa60:	4b5d      	ldr	r3, [pc, #372]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60bb      	str	r3, [r7, #8]
 800aa70:	4a59      	ldr	r2, [pc, #356]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa72:	4b59      	ldr	r3, [pc, #356]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa76:	f043 0308 	orr.w	r3, r3, #8
 800aa7a:	6313      	str	r3, [r2, #48]	; 0x30
 800aa7c:	4b56      	ldr	r3, [pc, #344]	; (800abd8 <HAL_SD_MspInit+0x1c8>)
 800aa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	60bb      	str	r3, [r7, #8]
 800aa86:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800aa88:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800aa8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa8e:	2302      	movs	r3, #2
 800aa90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa96:	2303      	movs	r3, #3
 800aa98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa9e:	f107 0314 	add.w	r3, r7, #20
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	484d      	ldr	r0, [pc, #308]	; (800abdc <HAL_SD_MspInit+0x1cc>)
 800aaa6:	f7f6 fa57 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aaaa:	2304      	movs	r3, #4
 800aaac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaae:	2302      	movs	r3, #2
 800aab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aab6:	2303      	movs	r3, #3
 800aab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800aaba:	230c      	movs	r3, #12
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aabe:	f107 0314 	add.w	r3, r7, #20
 800aac2:	4619      	mov	r1, r3
 800aac4:	4846      	ldr	r0, [pc, #280]	; (800abe0 <HAL_SD_MspInit+0x1d0>)
 800aac6:	f7f6 fa47 	bl	8000f58 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800aaca:	4b46      	ldr	r3, [pc, #280]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aacc:	4a46      	ldr	r2, [pc, #280]	; (800abe8 <HAL_SD_MspInit+0x1d8>)
 800aace:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800aad0:	4b44      	ldr	r3, [pc, #272]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aad6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aad8:	4b42      	ldr	r3, [pc, #264]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aada:	2200      	movs	r2, #0
 800aadc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aade:	4b41      	ldr	r3, [pc, #260]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aae4:	4b3f      	ldr	r3, [pc, #252]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aaea:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800aaec:	4b3d      	ldr	r3, [pc, #244]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aaee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aaf2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800aaf4:	4b3b      	ldr	r3, [pc, #236]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aaf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aafa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800aafc:	4b39      	ldr	r3, [pc, #228]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800aafe:	2220      	movs	r2, #32
 800ab00:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ab02:	4b38      	ldr	r3, [pc, #224]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab08:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ab0a:	4b36      	ldr	r3, [pc, #216]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ab10:	4b34      	ldr	r3, [pc, #208]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab12:	2203      	movs	r2, #3
 800ab14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800ab16:	4b33      	ldr	r3, [pc, #204]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ab1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800ab1e:	4b31      	ldr	r3, [pc, #196]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ab24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800ab26:	482f      	ldr	r0, [pc, #188]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab28:	f7f5 fe7e 	bl	8000828 <HAL_DMA_Init>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800ab32:	f7ff fd25 	bl	800a580 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab3a:	63da      	str	r2, [r3, #60]	; 0x3c
 800ab3c:	4a29      	ldr	r2, [pc, #164]	; (800abe4 <HAL_SD_MspInit+0x1d4>)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800ab42:	4b2a      	ldr	r3, [pc, #168]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab44:	4a2a      	ldr	r2, [pc, #168]	; (800abf0 <HAL_SD_MspInit+0x1e0>)
 800ab46:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800ab48:	4b28      	ldr	r3, [pc, #160]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab4e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab50:	4b26      	ldr	r3, [pc, #152]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab52:	2240      	movs	r2, #64	; 0x40
 800ab54:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab56:	4b25      	ldr	r3, [pc, #148]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ab5c:	4b23      	ldr	r3, [pc, #140]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab62:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab64:	4b21      	ldr	r3, [pc, #132]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab6a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ab6c:	4b1f      	ldr	r3, [pc, #124]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab72:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800ab74:	4b1d      	ldr	r3, [pc, #116]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab76:	2220      	movs	r2, #32
 800ab78:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ab7a:	4b1c      	ldr	r3, [pc, #112]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab80:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ab82:	4b1a      	ldr	r3, [pc, #104]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab84:	2204      	movs	r2, #4
 800ab86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ab88:	4b18      	ldr	r3, [pc, #96]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab8a:	2203      	movs	r2, #3
 800ab8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800ab8e:	4b17      	ldr	r3, [pc, #92]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ab94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800ab96:	4b15      	ldr	r3, [pc, #84]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800ab98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ab9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800ab9e:	4813      	ldr	r0, [pc, #76]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800aba0:	f7f5 fe42 	bl	8000828 <HAL_DMA_Init>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800abaa:	f7ff fce9 	bl	800a580 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a0e      	ldr	r2, [pc, #56]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800abb2:	641a      	str	r2, [r3, #64]	; 0x40
 800abb4:	4a0d      	ldr	r2, [pc, #52]	; (800abec <HAL_SD_MspInit+0x1dc>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800abba:	2200      	movs	r2, #0
 800abbc:	2105      	movs	r1, #5
 800abbe:	2031      	movs	r0, #49	; 0x31
 800abc0:	f7f5 fdfb 	bl	80007ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800abc4:	2031      	movs	r0, #49	; 0x31
 800abc6:	f7f5 fe14 	bl	80007f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800abca:	bf00      	nop
 800abcc:	3728      	adds	r7, #40	; 0x28
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	40012c00 	.word	0x40012c00
 800abd8:	40023800 	.word	0x40023800
 800abdc:	40020800 	.word	0x40020800
 800abe0:	40020c00 	.word	0x40020c00
 800abe4:	2000456c 	.word	0x2000456c
 800abe8:	40026458 	.word	0x40026458
 800abec:	200045cc 	.word	0x200045cc
 800abf0:	400264a0 	.word	0x400264a0

0800abf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abfa:	2300      	movs	r3, #0
 800abfc:	607b      	str	r3, [r7, #4]
 800abfe:	4a12      	ldr	r2, [pc, #72]	; (800ac48 <HAL_MspInit+0x54>)
 800ac00:	4b11      	ldr	r3, [pc, #68]	; (800ac48 <HAL_MspInit+0x54>)
 800ac02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac08:	6453      	str	r3, [r2, #68]	; 0x44
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <HAL_MspInit+0x54>)
 800ac0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac12:	607b      	str	r3, [r7, #4]
 800ac14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac16:	2300      	movs	r3, #0
 800ac18:	603b      	str	r3, [r7, #0]
 800ac1a:	4a0b      	ldr	r2, [pc, #44]	; (800ac48 <HAL_MspInit+0x54>)
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <HAL_MspInit+0x54>)
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac24:	6413      	str	r3, [r2, #64]	; 0x40
 800ac26:	4b08      	ldr	r3, [pc, #32]	; (800ac48 <HAL_MspInit+0x54>)
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac2e:	603b      	str	r3, [r7, #0]
 800ac30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ac32:	2200      	movs	r2, #0
 800ac34:	210f      	movs	r1, #15
 800ac36:	f06f 0001 	mvn.w	r0, #1
 800ac3a:	f7f5 fdbe 	bl	80007ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	40023800 	.word	0x40023800

0800ac4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ac50:	bf00      	nop
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac5e:	e7fe      	b.n	800ac5e <HardFault_Handler+0x4>

0800ac60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ac64:	e7fe      	b.n	800ac64 <MemManage_Handler+0x4>

0800ac66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ac66:	b480      	push	{r7}
 800ac68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ac6a:	e7fe      	b.n	800ac6a <BusFault_Handler+0x4>

0800ac6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ac70:	e7fe      	b.n	800ac70 <UsageFault_Handler+0x4>

0800ac72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ac72:	b480      	push	{r7}
 800ac74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac76:	bf00      	nop
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ac84:	f7f5 fc7e 	bl	8000584 <HAL_IncTick>
  osSystickHandler();
 800ac88:	f7fc ff2e 	bl	8007ae8 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ac8c:	bf00      	nop
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ac94:	4802      	ldr	r0, [pc, #8]	; (800aca0 <USART1_IRQHandler+0x10>)
 800ac96:	f7f8 fa53 	bl	8003140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ac9a:	bf00      	nop
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20004770 	.word	0x20004770

0800aca4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800aca8:	4802      	ldr	r0, [pc, #8]	; (800acb4 <SDIO_IRQHandler+0x10>)
 800acaa:	f7f7 f93b 	bl	8001f24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800acae:	bf00      	nop
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	2000462c 	.word	0x2000462c

0800acb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800acbc:	4802      	ldr	r0, [pc, #8]	; (800acc8 <DMA2_Stream2_IRQHandler+0x10>)
 800acbe:	f7f5 fee3 	bl	8000a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800acc2:	bf00      	nop
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20004710 	.word	0x20004710

0800accc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800acd0:	4802      	ldr	r0, [pc, #8]	; (800acdc <DMA2_Stream3_IRQHandler+0x10>)
 800acd2:	f7f5 fed9 	bl	8000a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800acd6:	bf00      	nop
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2000456c 	.word	0x2000456c

0800ace0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800ace4:	4802      	ldr	r0, [pc, #8]	; (800acf0 <DMA2_Stream6_IRQHandler+0x10>)
 800ace6:	f7f5 fecf 	bl	8000a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800acea:	bf00      	nop
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	200045cc 	.word	0x200045cc

0800acf4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800acf8:	4802      	ldr	r0, [pc, #8]	; (800ad04 <DMA2_Stream7_IRQHandler+0x10>)
 800acfa:	f7f5 fec5 	bl	8000a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800acfe:	bf00      	nop
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	200046b0 	.word	0x200046b0

0800ad08 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ad10:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <_sbrk+0x50>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d102      	bne.n	800ad1e <_sbrk+0x16>
		heap_end = &end;
 800ad18:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <_sbrk+0x50>)
 800ad1a:	4a10      	ldr	r2, [pc, #64]	; (800ad5c <_sbrk+0x54>)
 800ad1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <_sbrk+0x50>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ad24:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <_sbrk+0x50>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	466a      	mov	r2, sp
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d907      	bls.n	800ad42 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800ad32:	f000 f955 	bl	800afe0 <__errno>
 800ad36:	4602      	mov	r2, r0
 800ad38:	230c      	movs	r3, #12
 800ad3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ad3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad40:	e006      	b.n	800ad50 <_sbrk+0x48>
	}

	heap_end += incr;
 800ad42:	4b05      	ldr	r3, [pc, #20]	; (800ad58 <_sbrk+0x50>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4413      	add	r3, r2
 800ad4a:	4a03      	ldr	r2, [pc, #12]	; (800ad58 <_sbrk+0x50>)
 800ad4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	20004038 	.word	0x20004038
 800ad5c:	200047b4 	.word	0x200047b4

0800ad60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ad64:	4a16      	ldr	r2, [pc, #88]	; (800adc0 <SystemInit+0x60>)
 800ad66:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <SystemInit+0x60>)
 800ad68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ad74:	4a13      	ldr	r2, [pc, #76]	; (800adc4 <SystemInit+0x64>)
 800ad76:	4b13      	ldr	r3, [pc, #76]	; (800adc4 <SystemInit+0x64>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f043 0301 	orr.w	r3, r3, #1
 800ad7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ad80:	4b10      	ldr	r3, [pc, #64]	; (800adc4 <SystemInit+0x64>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ad86:	4a0f      	ldr	r2, [pc, #60]	; (800adc4 <SystemInit+0x64>)
 800ad88:	4b0e      	ldr	r3, [pc, #56]	; (800adc4 <SystemInit+0x64>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ad90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ad96:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <SystemInit+0x64>)
 800ad98:	4a0b      	ldr	r2, [pc, #44]	; (800adc8 <SystemInit+0x68>)
 800ad9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ad9c:	4a09      	ldr	r2, [pc, #36]	; (800adc4 <SystemInit+0x64>)
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <SystemInit+0x64>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ada6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ada8:	4b06      	ldr	r3, [pc, #24]	; (800adc4 <SystemInit+0x64>)
 800adaa:	2200      	movs	r2, #0
 800adac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800adae:	4b04      	ldr	r3, [pc, #16]	; (800adc0 <SystemInit+0x60>)
 800adb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800adb4:	609a      	str	r2, [r3, #8]
#endif
}
 800adb6:	bf00      	nop
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	e000ed00 	.word	0xe000ed00
 800adc4:	40023800 	.word	0x40023800
 800adc8:	24003010 	.word	0x24003010

0800adcc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800add0:	4b11      	ldr	r3, [pc, #68]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800add2:	4a12      	ldr	r2, [pc, #72]	; (800ae1c <MX_USART1_UART_Init+0x50>)
 800add4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800add6:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800add8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800addc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800adde:	4b0e      	ldr	r3, [pc, #56]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ade4:	4b0c      	ldr	r3, [pc, #48]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800adea:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800adec:	2200      	movs	r2, #0
 800adee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800adf0:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800adf2:	220c      	movs	r2, #12
 800adf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800adf6:	4b08      	ldr	r3, [pc, #32]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ae02:	4805      	ldr	r0, [pc, #20]	; (800ae18 <MX_USART1_UART_Init+0x4c>)
 800ae04:	f7f8 f94e 	bl	80030a4 <HAL_UART_Init>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ae0e:	f7ff fbb7 	bl	800a580 <Error_Handler>
  }

}
 800ae12:	bf00      	nop
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20004770 	.word	0x20004770
 800ae1c:	40011000 	.word	0x40011000

0800ae20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08a      	sub	sp, #40	; 0x28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae28:	f107 0314 	add.w	r3, r7, #20
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	605a      	str	r2, [r3, #4]
 800ae32:	609a      	str	r2, [r3, #8]
 800ae34:	60da      	str	r2, [r3, #12]
 800ae36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a4c      	ldr	r2, [pc, #304]	; (800af70 <HAL_UART_MspInit+0x150>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	f040 8091 	bne.w	800af66 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ae44:	2300      	movs	r3, #0
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	4a4a      	ldr	r2, [pc, #296]	; (800af74 <HAL_UART_MspInit+0x154>)
 800ae4a:	4b4a      	ldr	r3, [pc, #296]	; (800af74 <HAL_UART_MspInit+0x154>)
 800ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4e:	f043 0310 	orr.w	r3, r3, #16
 800ae52:	6453      	str	r3, [r2, #68]	; 0x44
 800ae54:	4b47      	ldr	r3, [pc, #284]	; (800af74 <HAL_UART_MspInit+0x154>)
 800ae56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae58:	f003 0310 	and.w	r3, r3, #16
 800ae5c:	613b      	str	r3, [r7, #16]
 800ae5e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae60:	2300      	movs	r3, #0
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	4a43      	ldr	r2, [pc, #268]	; (800af74 <HAL_UART_MspInit+0x154>)
 800ae66:	4b43      	ldr	r3, [pc, #268]	; (800af74 <HAL_UART_MspInit+0x154>)
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	f043 0301 	orr.w	r3, r3, #1
 800ae6e:	6313      	str	r3, [r2, #48]	; 0x30
 800ae70:	4b40      	ldr	r3, [pc, #256]	; (800af74 <HAL_UART_MspInit+0x154>)
 800ae72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ae7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ae80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae82:	2302      	movs	r3, #2
 800ae84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae86:	2301      	movs	r3, #1
 800ae88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ae8e:	2307      	movs	r3, #7
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae92:	f107 0314 	add.w	r3, r7, #20
 800ae96:	4619      	mov	r1, r3
 800ae98:	4837      	ldr	r0, [pc, #220]	; (800af78 <HAL_UART_MspInit+0x158>)
 800ae9a:	f7f6 f85d 	bl	8000f58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800ae9e:	4b37      	ldr	r3, [pc, #220]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aea0:	4a37      	ldr	r2, [pc, #220]	; (800af80 <HAL_UART_MspInit+0x160>)
 800aea2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800aea4:	4b35      	ldr	r3, [pc, #212]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aeaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aeac:	4b33      	ldr	r3, [pc, #204]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aeb2:	4b32      	ldr	r3, [pc, #200]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aeb8:	4b30      	ldr	r3, [pc, #192]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aeba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aebe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aec0:	4b2e      	ldr	r3, [pc, #184]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aec6:	4b2d      	ldr	r3, [pc, #180]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800aecc:	4b2b      	ldr	r3, [pc, #172]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aece:	2200      	movs	r2, #0
 800aed0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aed2:	4b2a      	ldr	r3, [pc, #168]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aed8:	4b28      	ldr	r3, [pc, #160]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800aede:	4827      	ldr	r0, [pc, #156]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aee0:	f7f5 fca2 	bl	8000828 <HAL_DMA_Init>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800aeea:	f7ff fb49 	bl	800a580 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a22      	ldr	r2, [pc, #136]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aef2:	635a      	str	r2, [r3, #52]	; 0x34
 800aef4:	4a21      	ldr	r2, [pc, #132]	; (800af7c <HAL_UART_MspInit+0x15c>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800aefa:	4b22      	ldr	r3, [pc, #136]	; (800af84 <HAL_UART_MspInit+0x164>)
 800aefc:	4a22      	ldr	r2, [pc, #136]	; (800af88 <HAL_UART_MspInit+0x168>)
 800aefe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800af00:	4b20      	ldr	r3, [pc, #128]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af06:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800af08:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af0a:	2240      	movs	r2, #64	; 0x40
 800af0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800af0e:	4b1d      	ldr	r3, [pc, #116]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af10:	2200      	movs	r2, #0
 800af12:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800af14:	4b1b      	ldr	r3, [pc, #108]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af1c:	4b19      	ldr	r3, [pc, #100]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af1e:	2200      	movs	r2, #0
 800af20:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af22:	4b18      	ldr	r3, [pc, #96]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af24:	2200      	movs	r2, #0
 800af26:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800af28:	4b16      	ldr	r3, [pc, #88]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800af2e:	4b15      	ldr	r3, [pc, #84]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af30:	2200      	movs	r2, #0
 800af32:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af34:	4b13      	ldr	r3, [pc, #76]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af36:	2200      	movs	r2, #0
 800af38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800af3a:	4812      	ldr	r0, [pc, #72]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af3c:	f7f5 fc74 	bl	8000828 <HAL_DMA_Init>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800af46:	f7ff fb1b 	bl	800a580 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a0d      	ldr	r2, [pc, #52]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af4e:	631a      	str	r2, [r3, #48]	; 0x30
 800af50:	4a0c      	ldr	r2, [pc, #48]	; (800af84 <HAL_UART_MspInit+0x164>)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800af56:	2200      	movs	r2, #0
 800af58:	2105      	movs	r1, #5
 800af5a:	2025      	movs	r0, #37	; 0x25
 800af5c:	f7f5 fc2d 	bl	80007ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800af60:	2025      	movs	r0, #37	; 0x25
 800af62:	f7f5 fc46 	bl	80007f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800af66:	bf00      	nop
 800af68:	3728      	adds	r7, #40	; 0x28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	40011000 	.word	0x40011000
 800af74:	40023800 	.word	0x40023800
 800af78:	40020000 	.word	0x40020000
 800af7c:	20004710 	.word	0x20004710
 800af80:	40026440 	.word	0x40026440
 800af84:	200046b0 	.word	0x200046b0
 800af88:	400264b8 	.word	0x400264b8

0800af8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800af8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800afc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800af90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800af92:	e003      	b.n	800af9c <LoopCopyDataInit>

0800af94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800af94:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800af96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800af98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800af9a:	3104      	adds	r1, #4

0800af9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800af9c:	480b      	ldr	r0, [pc, #44]	; (800afcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800af9e:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800afa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800afa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800afa4:	d3f6      	bcc.n	800af94 <CopyDataInit>
  ldr  r2, =_sbss
 800afa6:	4a0b      	ldr	r2, [pc, #44]	; (800afd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800afa8:	e002      	b.n	800afb0 <LoopFillZerobss>

0800afaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800afaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800afac:	f842 3b04 	str.w	r3, [r2], #4

0800afb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800afb0:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800afb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800afb4:	d3f9      	bcc.n	800afaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800afb6:	f7ff fed3 	bl	800ad60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800afba:	f000 f817 	bl	800afec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800afbe:	f7ff fa61 	bl	800a484 <main>
  bx  lr    
 800afc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800afc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800afc8:	08035ea0 	.word	0x08035ea0
  ldr  r0, =_sdata
 800afcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800afd0:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 800afd4:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 800afd8:	200047b4 	.word	0x200047b4

0800afdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800afdc:	e7fe      	b.n	800afdc <ADC_IRQHandler>
	...

0800afe0 <__errno>:
 800afe0:	4b01      	ldr	r3, [pc, #4]	; (800afe8 <__errno+0x8>)
 800afe2:	6818      	ldr	r0, [r3, #0]
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20000034 	.word	0x20000034

0800afec <__libc_init_array>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	4e0d      	ldr	r6, [pc, #52]	; (800b024 <__libc_init_array+0x38>)
 800aff0:	4c0d      	ldr	r4, [pc, #52]	; (800b028 <__libc_init_array+0x3c>)
 800aff2:	1ba4      	subs	r4, r4, r6
 800aff4:	10a4      	asrs	r4, r4, #2
 800aff6:	2500      	movs	r5, #0
 800aff8:	42a5      	cmp	r5, r4
 800affa:	d109      	bne.n	800b010 <__libc_init_array+0x24>
 800affc:	4e0b      	ldr	r6, [pc, #44]	; (800b02c <__libc_init_array+0x40>)
 800affe:	4c0c      	ldr	r4, [pc, #48]	; (800b030 <__libc_init_array+0x44>)
 800b000:	f000 f8fa 	bl	800b1f8 <_init>
 800b004:	1ba4      	subs	r4, r4, r6
 800b006:	10a4      	asrs	r4, r4, #2
 800b008:	2500      	movs	r5, #0
 800b00a:	42a5      	cmp	r5, r4
 800b00c:	d105      	bne.n	800b01a <__libc_init_array+0x2e>
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b014:	4798      	blx	r3
 800b016:	3501      	adds	r5, #1
 800b018:	e7ee      	b.n	800aff8 <__libc_init_array+0xc>
 800b01a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b01e:	4798      	blx	r3
 800b020:	3501      	adds	r5, #1
 800b022:	e7f2      	b.n	800b00a <__libc_init_array+0x1e>
 800b024:	08035e98 	.word	0x08035e98
 800b028:	08035e98 	.word	0x08035e98
 800b02c:	08035e98 	.word	0x08035e98
 800b030:	08035e9c 	.word	0x08035e9c

0800b034 <malloc>:
 800b034:	4b02      	ldr	r3, [pc, #8]	; (800b040 <malloc+0xc>)
 800b036:	4601      	mov	r1, r0
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	f000 b86d 	b.w	800b118 <_malloc_r>
 800b03e:	bf00      	nop
 800b040:	20000034 	.word	0x20000034

0800b044 <free>:
 800b044:	4b02      	ldr	r3, [pc, #8]	; (800b050 <free+0xc>)
 800b046:	4601      	mov	r1, r0
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	f000 b817 	b.w	800b07c <_free_r>
 800b04e:	bf00      	nop
 800b050:	20000034 	.word	0x20000034

0800b054 <memcpy>:
 800b054:	b510      	push	{r4, lr}
 800b056:	1e43      	subs	r3, r0, #1
 800b058:	440a      	add	r2, r1
 800b05a:	4291      	cmp	r1, r2
 800b05c:	d100      	bne.n	800b060 <memcpy+0xc>
 800b05e:	bd10      	pop	{r4, pc}
 800b060:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b064:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b068:	e7f7      	b.n	800b05a <memcpy+0x6>

0800b06a <memset>:
 800b06a:	4402      	add	r2, r0
 800b06c:	4603      	mov	r3, r0
 800b06e:	4293      	cmp	r3, r2
 800b070:	d100      	bne.n	800b074 <memset+0xa>
 800b072:	4770      	bx	lr
 800b074:	f803 1b01 	strb.w	r1, [r3], #1
 800b078:	e7f9      	b.n	800b06e <memset+0x4>
	...

0800b07c <_free_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4605      	mov	r5, r0
 800b080:	2900      	cmp	r1, #0
 800b082:	d045      	beq.n	800b110 <_free_r+0x94>
 800b084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b088:	1f0c      	subs	r4, r1, #4
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	bfb8      	it	lt
 800b08e:	18e4      	addlt	r4, r4, r3
 800b090:	f000 f8b0 	bl	800b1f4 <__malloc_lock>
 800b094:	4a1f      	ldr	r2, [pc, #124]	; (800b114 <_free_r+0x98>)
 800b096:	6813      	ldr	r3, [r2, #0]
 800b098:	4610      	mov	r0, r2
 800b09a:	b933      	cbnz	r3, 800b0aa <_free_r+0x2e>
 800b09c:	6063      	str	r3, [r4, #4]
 800b09e:	6014      	str	r4, [r2, #0]
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0a6:	f000 b8a6 	b.w	800b1f6 <__malloc_unlock>
 800b0aa:	42a3      	cmp	r3, r4
 800b0ac:	d90c      	bls.n	800b0c8 <_free_r+0x4c>
 800b0ae:	6821      	ldr	r1, [r4, #0]
 800b0b0:	1862      	adds	r2, r4, r1
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	bf04      	itt	eq
 800b0b6:	681a      	ldreq	r2, [r3, #0]
 800b0b8:	685b      	ldreq	r3, [r3, #4]
 800b0ba:	6063      	str	r3, [r4, #4]
 800b0bc:	bf04      	itt	eq
 800b0be:	1852      	addeq	r2, r2, r1
 800b0c0:	6022      	streq	r2, [r4, #0]
 800b0c2:	6004      	str	r4, [r0, #0]
 800b0c4:	e7ec      	b.n	800b0a0 <_free_r+0x24>
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	b10a      	cbz	r2, 800b0d0 <_free_r+0x54>
 800b0cc:	42a2      	cmp	r2, r4
 800b0ce:	d9fa      	bls.n	800b0c6 <_free_r+0x4a>
 800b0d0:	6819      	ldr	r1, [r3, #0]
 800b0d2:	1858      	adds	r0, r3, r1
 800b0d4:	42a0      	cmp	r0, r4
 800b0d6:	d10b      	bne.n	800b0f0 <_free_r+0x74>
 800b0d8:	6820      	ldr	r0, [r4, #0]
 800b0da:	4401      	add	r1, r0
 800b0dc:	1858      	adds	r0, r3, r1
 800b0de:	4282      	cmp	r2, r0
 800b0e0:	6019      	str	r1, [r3, #0]
 800b0e2:	d1dd      	bne.n	800b0a0 <_free_r+0x24>
 800b0e4:	6810      	ldr	r0, [r2, #0]
 800b0e6:	6852      	ldr	r2, [r2, #4]
 800b0e8:	605a      	str	r2, [r3, #4]
 800b0ea:	4401      	add	r1, r0
 800b0ec:	6019      	str	r1, [r3, #0]
 800b0ee:	e7d7      	b.n	800b0a0 <_free_r+0x24>
 800b0f0:	d902      	bls.n	800b0f8 <_free_r+0x7c>
 800b0f2:	230c      	movs	r3, #12
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	e7d3      	b.n	800b0a0 <_free_r+0x24>
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	1821      	adds	r1, r4, r0
 800b0fc:	428a      	cmp	r2, r1
 800b0fe:	bf04      	itt	eq
 800b100:	6811      	ldreq	r1, [r2, #0]
 800b102:	6852      	ldreq	r2, [r2, #4]
 800b104:	6062      	str	r2, [r4, #4]
 800b106:	bf04      	itt	eq
 800b108:	1809      	addeq	r1, r1, r0
 800b10a:	6021      	streq	r1, [r4, #0]
 800b10c:	605c      	str	r4, [r3, #4]
 800b10e:	e7c7      	b.n	800b0a0 <_free_r+0x24>
 800b110:	bd38      	pop	{r3, r4, r5, pc}
 800b112:	bf00      	nop
 800b114:	2000403c 	.word	0x2000403c

0800b118 <_malloc_r>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	1ccd      	adds	r5, r1, #3
 800b11c:	f025 0503 	bic.w	r5, r5, #3
 800b120:	3508      	adds	r5, #8
 800b122:	2d0c      	cmp	r5, #12
 800b124:	bf38      	it	cc
 800b126:	250c      	movcc	r5, #12
 800b128:	2d00      	cmp	r5, #0
 800b12a:	4606      	mov	r6, r0
 800b12c:	db01      	blt.n	800b132 <_malloc_r+0x1a>
 800b12e:	42a9      	cmp	r1, r5
 800b130:	d903      	bls.n	800b13a <_malloc_r+0x22>
 800b132:	230c      	movs	r3, #12
 800b134:	6033      	str	r3, [r6, #0]
 800b136:	2000      	movs	r0, #0
 800b138:	bd70      	pop	{r4, r5, r6, pc}
 800b13a:	f000 f85b 	bl	800b1f4 <__malloc_lock>
 800b13e:	4a23      	ldr	r2, [pc, #140]	; (800b1cc <_malloc_r+0xb4>)
 800b140:	6814      	ldr	r4, [r2, #0]
 800b142:	4621      	mov	r1, r4
 800b144:	b991      	cbnz	r1, 800b16c <_malloc_r+0x54>
 800b146:	4c22      	ldr	r4, [pc, #136]	; (800b1d0 <_malloc_r+0xb8>)
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	b91b      	cbnz	r3, 800b154 <_malloc_r+0x3c>
 800b14c:	4630      	mov	r0, r6
 800b14e:	f000 f841 	bl	800b1d4 <_sbrk_r>
 800b152:	6020      	str	r0, [r4, #0]
 800b154:	4629      	mov	r1, r5
 800b156:	4630      	mov	r0, r6
 800b158:	f000 f83c 	bl	800b1d4 <_sbrk_r>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d126      	bne.n	800b1ae <_malloc_r+0x96>
 800b160:	230c      	movs	r3, #12
 800b162:	6033      	str	r3, [r6, #0]
 800b164:	4630      	mov	r0, r6
 800b166:	f000 f846 	bl	800b1f6 <__malloc_unlock>
 800b16a:	e7e4      	b.n	800b136 <_malloc_r+0x1e>
 800b16c:	680b      	ldr	r3, [r1, #0]
 800b16e:	1b5b      	subs	r3, r3, r5
 800b170:	d41a      	bmi.n	800b1a8 <_malloc_r+0x90>
 800b172:	2b0b      	cmp	r3, #11
 800b174:	d90f      	bls.n	800b196 <_malloc_r+0x7e>
 800b176:	600b      	str	r3, [r1, #0]
 800b178:	50cd      	str	r5, [r1, r3]
 800b17a:	18cc      	adds	r4, r1, r3
 800b17c:	4630      	mov	r0, r6
 800b17e:	f000 f83a 	bl	800b1f6 <__malloc_unlock>
 800b182:	f104 000b 	add.w	r0, r4, #11
 800b186:	1d23      	adds	r3, r4, #4
 800b188:	f020 0007 	bic.w	r0, r0, #7
 800b18c:	1ac3      	subs	r3, r0, r3
 800b18e:	d01b      	beq.n	800b1c8 <_malloc_r+0xb0>
 800b190:	425a      	negs	r2, r3
 800b192:	50e2      	str	r2, [r4, r3]
 800b194:	bd70      	pop	{r4, r5, r6, pc}
 800b196:	428c      	cmp	r4, r1
 800b198:	bf0d      	iteet	eq
 800b19a:	6863      	ldreq	r3, [r4, #4]
 800b19c:	684b      	ldrne	r3, [r1, #4]
 800b19e:	6063      	strne	r3, [r4, #4]
 800b1a0:	6013      	streq	r3, [r2, #0]
 800b1a2:	bf18      	it	ne
 800b1a4:	460c      	movne	r4, r1
 800b1a6:	e7e9      	b.n	800b17c <_malloc_r+0x64>
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	6849      	ldr	r1, [r1, #4]
 800b1ac:	e7ca      	b.n	800b144 <_malloc_r+0x2c>
 800b1ae:	1cc4      	adds	r4, r0, #3
 800b1b0:	f024 0403 	bic.w	r4, r4, #3
 800b1b4:	42a0      	cmp	r0, r4
 800b1b6:	d005      	beq.n	800b1c4 <_malloc_r+0xac>
 800b1b8:	1a21      	subs	r1, r4, r0
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f000 f80a 	bl	800b1d4 <_sbrk_r>
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d0cd      	beq.n	800b160 <_malloc_r+0x48>
 800b1c4:	6025      	str	r5, [r4, #0]
 800b1c6:	e7d9      	b.n	800b17c <_malloc_r+0x64>
 800b1c8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ca:	bf00      	nop
 800b1cc:	2000403c 	.word	0x2000403c
 800b1d0:	20004040 	.word	0x20004040

0800b1d4 <_sbrk_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4c06      	ldr	r4, [pc, #24]	; (800b1f0 <_sbrk_r+0x1c>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4605      	mov	r5, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	f7ff fd92 	bl	800ad08 <_sbrk>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_sbrk_r+0x1a>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_sbrk_r+0x1a>
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	200047b0 	.word	0x200047b0

0800b1f4 <__malloc_lock>:
 800b1f4:	4770      	bx	lr

0800b1f6 <__malloc_unlock>:
 800b1f6:	4770      	bx	lr

0800b1f8 <_init>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	bf00      	nop
 800b1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fe:	bc08      	pop	{r3}
 800b200:	469e      	mov	lr, r3
 800b202:	4770      	bx	lr

0800b204 <_fini>:
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	bf00      	nop
 800b208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20a:	bc08      	pop	{r3}
 800b20c:	469e      	mov	lr, r3
 800b20e:	4770      	bx	lr
